import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_inclination_range.xml
/** <p>The Supported Inclination Range characteristic is used to send the supported inclination range as well as the minimum inclination increment supported by the Server.</p> */
export interface SupportedInclinationRange {
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Percent with a resolution of 0.1</p>
     */
    maximumInclination: number;
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Percent with a resolution of 0.1</p>
     */
    minimumInclination: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Percent with a resolution of 0.1</p>
     */
    minimumIncrement: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_inclination_range.xml | Supported Inclination Range} */
export class SupportedInclinationRangeImpl implements SupportedInclinationRange {
    public static readonly UUID_PREFIX = 0x2ad5;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.supported_inclination_range";
    public static readonly NAME = "Supported Inclination Range";

    /** Parse from a DataView into {@link SupportedInclinationRange}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): SupportedInclinationRangeImpl {
        return new SupportedInclinationRangeImpl(supportedInclinationRangeFromDataView(dataView, indexStart));
    }

    public readonly maximumInclination: number;
    public readonly minimumInclination: number;
    public readonly minimumIncrement: number;

    public constructor(supportedInclinationRange: SupportedInclinationRange) {
        this.maximumInclination = supportedInclinationRange.maximumInclination;
        this.minimumInclination = supportedInclinationRange.minimumInclination;
        this.minimumIncrement = supportedInclinationRange.minimumIncrement;
    }
}

/** Parse from a DataView into {@link SupportedInclinationRange}. */
export function supportedInclinationRangeFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): SupportedInclinationRange {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const minimumInclination = $dvr.int16();
    const maximumInclination = $dvr.int16();
    const minimumIncrement = $dvr.uint16();
    return { maximumInclination, minimumInclination, minimumIncrement };
}
