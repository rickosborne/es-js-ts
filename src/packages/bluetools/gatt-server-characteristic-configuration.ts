import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.gatt.server_characteristic_configuration.xml
/**
 * <p>The Server Characteristic Configuration descriptor defines how the characteristic descriptor is associated with may be configured for the server.</p>
 * <p>Only one Server Characteristic Configuration descriptor exists in a characteristic definition. A client may write this configuration descriptor to control the configuration of the characteristic on the server for all clients. There is a single instantiation of this descriptor for all clients. Authentication and authorization may be required by the server to write this descriptor.</p>
 */
export interface GattServerCharacteristicConfiguration {
    /**
     * | value | description         |
     * | ----- | ------------------- |
     * | 0     | Broadcasts disabled |
     * | 1     | Broadcasts enabled  |
     */
    bit0: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 1</p>
     *
     * Bit field:
     *
     * | index | size | name |
     * | ----- | ---- | ---- |
     * | 0     | 1    | bit0 |
     *
     */
    properties: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.gatt.server_characteristic_configuration.xml | Gatt Server Characteristic Configuration} */
export class GattServerCharacteristicConfigurationImpl implements GattServerCharacteristicConfiguration {
    public static readonly UUID_PREFIX = 0x2903;
    public static readonly TYPE_NAME = "org.bluetooth.descriptor.gatt.server_characteristic_configuration";
    public static readonly NAME = "Server Characteristic Configuration";

    /** Parse from a DataView into {@link GattServerCharacteristicConfiguration}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GattServerCharacteristicConfigurationImpl {
        return new GattServerCharacteristicConfigurationImpl(gattServerCharacteristicConfigurationFromDataView(dataView, indexStart));
    }

    public readonly bit0: number;
    public readonly properties: number;

    public constructor(gattServerCharacteristicConfiguration: GattServerCharacteristicConfiguration) {
        this.bit0 = gattServerCharacteristicConfiguration.bit0;
        this.properties = gattServerCharacteristicConfiguration.properties;
    }
}

/** Parse from a DataView into {@link GattServerCharacteristicConfiguration}. */
export function gattServerCharacteristicConfigurationFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GattServerCharacteristicConfiguration {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const properties = $dvr.uint16();
    /**
     * | value | description         |
     * | ----- | ------------------- |
     * | 0     | Broadcasts disabled |
     * | 1     | Broadcasts enabled  |
     */
    const bit0 = properties & 0b0000_0000_0000_0001;
    return { bit0, properties };
}
