import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.stair_climber_data.xml
/** <p>The Stair Climber Data characteristic is used to send training-related data to the Client from a stair climber (Server).</p> */
export interface StairClimberData {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.step_per_minute`</p>
     * <p>Step/minute with a resolution of 1</p>
     */
    averageStepRate?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     * <p>Second with a resolution of 1</p>
     */
    elapsedTime?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.energy.kilogram_calorie`</p>
     * <p>Kilo Calorie with a resolution of 1</p>
     */
    energyPerHour?: number | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.energy.kilogram_calorie`</p>
     * <p>Kilo Calorie with a resolution of 1</p>
     */
    energyPerMinute?: number | undefined;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | req | name                            |
     * | ----- | ---- | --- | ------------------------------- |
     * | 0     | 1    | C1  | More Data                       |
     * | 1     | 1    | C2  | Step per Minute present         |
     * | 2     | 1    | C3  | Average Step Rate Present       |
     * | 3     | 1    | C4  | Positive Elevation Gain present |
     * | 4     | 1    | C5  | Stride Count Present            |
     * | 5     | 1    | C6  | Expended Energy present         |
     * | 6     | 1    | C7  | Heart Rate present              |
     * | 7     | 1    | C8  | Metabolic Equivalent present    |
     * | 8     | 1    | C9  | Elapsed Time present            |
     * | 9     | 1    | C10 | Remaining Time present          |
     * | 10    | 6    |     | Reserved for future use         |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unitless with a resolution of 1</p>
     */
    floors?: number | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Beats per minute with a resolution of 1</p>
     */
    heartRate?: number | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.metabolic_equivalent`</p>
     * <p>Metabolic Equivalent with a resolution of 0.1</p>
     */
    metabolicEquivalent?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.metre`</p>
     * <p>Meters with a resolution of 1</p>
     */
    positiveElevationGain?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     * <p>Second with a resolution of 1</p>
     */
    remainingTime?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.step_per_minute`</p>
     * <p>Step/minute with a resolution of 1</p>
     */
    stepPerMinute?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unitless with a resolution of 1</p>
     */
    strideCount?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.energy.kilogram_calorie`</p>
     * <p>Kilo Calorie with a resolution of 1</p>
     */
    totalEnergy?: number | undefined;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.stair_climber_data.xml | Stair Climber Data} */
export class StairClimberDataImpl implements StairClimberData {
    public static readonly UUID_PREFIX = 0x2ad0;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.stair_climber_data";
    public static readonly NAME = "Stair Climber Data";

    /** Parse from a DataView into {@link StairClimberData}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): StairClimberDataImpl {
        return new StairClimberDataImpl(stairClimberDataFromDataView(dataView, indexStart));
    }

    public readonly averageStepRate?: number | undefined;
    public readonly elapsedTime?: number | undefined;
    public readonly energyPerHour?: number | undefined;
    public readonly energyPerMinute?: number | undefined;
    public readonly flags: number;
    public readonly floors?: number | undefined;
    public readonly heartRate?: number | undefined;
    public readonly metabolicEquivalent?: number | undefined;
    public readonly positiveElevationGain?: number | undefined;
    public readonly remainingTime?: number | undefined;
    public readonly stepPerMinute?: number | undefined;
    public readonly strideCount?: number | undefined;
    public readonly totalEnergy?: number | undefined;

    public constructor(stairClimberData: StairClimberData) {
        this.averageStepRate = stairClimberData.averageStepRate;
        this.elapsedTime = stairClimberData.elapsedTime;
        this.energyPerHour = stairClimberData.energyPerHour;
        this.energyPerMinute = stairClimberData.energyPerMinute;
        this.flags = stairClimberData.flags;
        this.floors = stairClimberData.floors;
        this.heartRate = stairClimberData.heartRate;
        this.metabolicEquivalent = stairClimberData.metabolicEquivalent;
        this.positiveElevationGain = stairClimberData.positiveElevationGain;
        this.remainingTime = stairClimberData.remainingTime;
        this.stepPerMinute = stairClimberData.stepPerMinute;
        this.strideCount = stairClimberData.strideCount;
        this.totalEnergy = stairClimberData.totalEnergy;
    }
}

/** Parse from a DataView into {@link StairClimberData}. */
export function stairClimberDataFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): StairClimberData {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint16();
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     | C1  | False       |
     * | 1     |     | True        |
     * <p>Requirements: C1</p>
     */
    const moreData = !!(flags & 0b0000_0000_0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C2  | True        |
     * <p>Requirements: C2</p>
     */
    const stepPerMinutePresent = !!((flags & 0b0000_0000_0000_0010) >> 1);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C3  | True        |
     * <p>Requirements: C3</p>
     */
    const averageStepRatePresent = !!((flags & 0b0000_0000_0000_0100) >> 2);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C4  | True        |
     * <p>Requirements: C4</p>
     */
    const positiveElevationGainPresent = !!((flags & 0b0000_0000_0000_1000) >> 3);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C5  | True        |
     * <p>Requirements: C5</p>
     */
    const strideCountPresent = !!((flags & 0b0000_0000_0001_0000) >> 4);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C6  | True        |
     * <p>Requirements: C6</p>
     */
    const expendedEnergyPresent = !!((flags & 0b0000_0000_0010_0000) >> 5);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C7  | True        |
     * <p>Requirements: C7</p>
     */
    const heartRatePresent = !!((flags & 0b0000_0000_0100_0000) >> 6);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C8  | True        |
     * <p>Requirements: C8</p>
     */
    const metabolicEquivalentPresent = !!((flags & 0b0000_0000_1000_0000) >> 7);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C9  | True        |
     * <p>Requirements: C9</p>
     */
    const elapsedTimePresent = !!((flags & 0b0000_0001_0000_0000) >> 8);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C10 | True        |
     * <p>Requirements: C10</p>
     */
    const remainingTimePresent = !!((flags & 0b0000_0010_0000_0000) >> 9);
    let floors: number | undefined = undefined;
    if (!moreData) {
        floors = $dvr.uint16();
    }

    let stepPerMinute: number | undefined = undefined;
    if (stepPerMinutePresent) {
        stepPerMinute = $dvr.uint16();
    }

    let averageStepRate: number | undefined = undefined;
    if (averageStepRatePresent) {
        averageStepRate = $dvr.uint16();
    }

    let positiveElevationGain: number | undefined = undefined;
    if (positiveElevationGainPresent) {
        positiveElevationGain = $dvr.uint16();
    }

    let strideCount: number | undefined = undefined;
    if (strideCountPresent) {
        strideCount = $dvr.uint16();
    }

    let totalEnergy: number | undefined = undefined;
    if (expendedEnergyPresent) {
        totalEnergy = $dvr.uint16();
    }

    let energyPerHour: number | undefined = undefined;
    if (expendedEnergyPresent) {
        energyPerHour = $dvr.uint16();
    }

    let energyPerMinute: number | undefined = undefined;
    if (expendedEnergyPresent) {
        energyPerMinute = $dvr.uint8();
    }

    let heartRate: number | undefined = undefined;
    if (heartRatePresent) {
        heartRate = $dvr.uint8();
    }

    let metabolicEquivalent: number | undefined = undefined;
    if (metabolicEquivalentPresent) {
        metabolicEquivalent = $dvr.uint8();
    }

    let elapsedTime: number | undefined = undefined;
    if (elapsedTimePresent) {
        elapsedTime = $dvr.uint16();
    }

    let remainingTime: number | undefined = undefined;
    if (remainingTimePresent) {
        remainingTime = $dvr.uint16();
    }

    return { averageStepRate, elapsedTime, energyPerHour, energyPerMinute, flags, floors, heartRate, metabolicEquivalent, positiveElevationGain, remainingTime, stepPerMinute, strideCount, totalEnergy };
}
