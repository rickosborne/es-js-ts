import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.pollen_concentration.xml
export interface PollenConcentration {
    /**
     * <p>Format: `uint24`</p>
     * <p>Unit: `org.bluetooth.unit.concentration.count_per_cubic_metre`</p>
     * <p>Unit is in concentration count per cubic meter with a resolution of 1/m^3</p>
     */
    pollenConcentration: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.pollen_concentration.xml | Pollen Concentration} */
export class PollenConcentrationImpl implements PollenConcentration {
    public static readonly UUID_PREFIX = 0x2a75;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.pollen_concentration";
    public static readonly NAME = "Pollen Concentration";

    /** Parse from a DataView into {@link PollenConcentration}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): PollenConcentrationImpl {
        return new PollenConcentrationImpl(pollenConcentrationFromDataView(dataView, indexStart));
    }

    public readonly pollenConcentration: number;

    public constructor(pollenConcentration: PollenConcentration) {
        this.pollenConcentration = pollenConcentration.pollenConcentration;
    }
}

/** Parse from a DataView into {@link PollenConcentration}. */
export function pollenConcentrationFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): PollenConcentration {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const pollenConcentration = $dvr.uint24();
    return { pollenConcentration };
}
