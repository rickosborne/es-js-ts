import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.rsc_measurement.xml
/** <p>The RSC Measurement characteristic (RSC refers to Running Speed and Cadence) is a variable length structure containing a Flags field, an Instantaneous Speed field and an Instantaneous Cadence field and, based on the contents of the Flags field, may contain a Stride Length field and a Total Distance field.</p> */
export interface RscMeasurement {
    /**
     * <p>Format: `8bit`</p>
     * <p>These flags define which data fields are present in the Characteristic value.</p>
     *
     * Bit field:
     *
     * | index | size | req | name                                |
     * | ----- | ---- | --- | ----------------------------------- |
     * | 0     | 1    | C1  | Instantaneous Stride Length Present |
     * | 1     | 1    | C2  | Total Distance Present              |
     * | 2     | 1    |     | Walking or Running Status bits      |
     * | 3     | 5    |     | Reserved for future use             |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.angular_velocity.revolution_per_minute`</p>
     * <p>Unit is in 1/minute (or RPM) with a resolutions of 1 1/min (or 1 RPM)</p>
     */
    instantaneousCadence: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.metres_per_second`</p>
     * <p>Unit is in m/s with a resolution of 1/256 s</p>
     */
    instantaneousSpeed: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>C1: Field exists if the key of bit 0 of the Flags field is set to 1.</p>
     * <p>- Unit is in meter with a resolution of 1/100 m (or centimeter).</p>
     */
    instantaneousStrideLength?: number | undefined;
    /**
     * <p>Format: `uint32`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>C2: Field exists if the key of bit 1 of the Flags field is set to 1.</p>
     * <p>- Unit is in meter with a resolution of 1/10 m (or decimeter).</p>
     */
    totalDistance?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | Walking     |
     * | 1     | Running     |
     */
    walkRun: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.rsc_measurement.xml | Rsc Measurement} */
export class RscMeasurementImpl implements RscMeasurement {
    public static readonly UUID_PREFIX = 0x2a53;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.rsc_measurement";
    public static readonly NAME = "RSC Measurement";

    /** Parse from a DataView into {@link RscMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): RscMeasurementImpl {
        return new RscMeasurementImpl(rscMeasurementFromDataView(dataView, indexStart));
    }

    public readonly flags: number;
    public readonly instantaneousCadence: number;
    public readonly instantaneousSpeed: number;
    public readonly instantaneousStrideLength?: number | undefined;
    public readonly totalDistance?: number | undefined;
    public readonly walkRun: number;

    public constructor(rscMeasurement: RscMeasurement) {
        this.flags = rscMeasurement.flags;
        this.instantaneousCadence = rscMeasurement.instantaneousCadence;
        this.instantaneousSpeed = rscMeasurement.instantaneousSpeed;
        this.instantaneousStrideLength = rscMeasurement.instantaneousStrideLength;
        this.totalDistance = rscMeasurement.totalDistance;
        this.walkRun = rscMeasurement.walkRun;
    }
}

/** Parse from a DataView into {@link RscMeasurement}. */
export function rscMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): RscMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C1  | True        |
     * <p>Requirements: C1</p>
     */
    const instantaneousStrideLengthPresent = !!(flags & 0b0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C2  | True        |
     * <p>Requirements: C2</p>
     */
    const totalDistancePresent = !!((flags & 0b0000_0010) >> 1);
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | Walking     |
     * | 1     | Running     |
     */
    const walkRun = (flags & 0b0000_0100) >> 2;
    const instantaneousSpeed = $dvr.uint16();
    const instantaneousCadence = $dvr.uint8();
    let instantaneousStrideLength: number | undefined = undefined;
    if (instantaneousStrideLengthPresent) {
        instantaneousStrideLength = $dvr.uint16();
    }

    let totalDistance: number | undefined = undefined;
    if (totalDistancePresent) {
        totalDistance = $dvr.uint32();
    }

    return { flags, instantaneousCadence, instantaneousSpeed, instantaneousStrideLength, totalDistance, walkRun };
}
