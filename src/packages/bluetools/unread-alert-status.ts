import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type AlertCategoryId, AlertCategoryIdImpl } from "./alert-category-id.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.unread_alert_status.xml
/**
 * <p>This characteristic shows how many numbers of unread alerts exist in the specific category in the device.</p>
 * <p>The value 0x01, 0x04 are interpreted that the server has 4 unread messages in Email category.</p>
 * <p>This characteristic consists of ?Category ID? and ?uint8? which shows the number of unread alerts/messages.</p>
 */
export interface UnreadAlertStatus {
    /** <p>The value shows the category for unread alert count</p> */
    categoryID: AlertCategoryId;
    /**
     * <p>Format: `uint8`</p>
     * <p>If the value is 255, it means Unread count is greater than 254.</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 255</p>
     */
    unreadCount: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.unread_alert_status.xml | Unread Alert Status} */
export class UnreadAlertStatusImpl implements UnreadAlertStatus {
    public static readonly UUID_PREFIX = 0x2a45;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.unread_alert_status";
    public static readonly NAME = "Unread Alert Status";

    /** Parse from a DataView into {@link UnreadAlertStatus}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): UnreadAlertStatusImpl {
        return new UnreadAlertStatusImpl(unreadAlertStatusFromDataView(dataView, indexStart));
    }

    public readonly categoryID: AlertCategoryId;
    public readonly unreadCount: number;

    public constructor(unreadAlertStatus: UnreadAlertStatus) {
        this.categoryID = unreadAlertStatus.categoryID;
        this.unreadCount = unreadAlertStatus.unreadCount;
    }
}

/** Parse from a DataView into {@link UnreadAlertStatus}. */
export function unreadAlertStatusFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): UnreadAlertStatus {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const categoryID = AlertCategoryIdImpl.fromDataView($dvr);
    const unreadCount = $dvr.uint8();
    return { categoryID, unreadCount };
}
