import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.plx_features.xml
/** <p>The PLX Features characteristic is used to describe the supported features of the Server. Included in the characteristic is a PLX Features field, and, depending on the contents of the PLX Features field, the Measurement Status Support field, and the Device and Sensor Status Support field.</p> */
export interface PlxFeatures {
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    calibrationOngoingBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    dataForDemonstrationBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    dataForTestingBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    dataFromMeasurementStorageBitSupported: number;
    /**
     * <p>Format: `24bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                                                  |
     * | ----- | ---- | ----------------------------------------------------- |
     * | 0     | 1    | Extended Display Update Ongoing bit supported         |
     * | 1     | 1    | Equipment Malfunction Detected bit supported          |
     * | 2     | 1    | Signal Processing Irregularity Detected bit supported |
     * | 3     | 1    | Inadequite Signal Detected bit supported              |
     * | 4     | 1    | Poor Signal Detected bit supported                    |
     * | 5     | 1    | Low Perfusion Detected bit supported                  |
     * | 6     | 1    | Erratic Signal Detected bit supported                 |
     * | 7     | 1    | Nonpulsatile Signal Detected bit supported            |
     * | 8     | 1    | Questionable Pulse Detected bit supported             |
     * | 9     | 1    | Signal Analysis Ongoing bit supported                 |
     * | 10    | 1    | Sensor Interface Detected bit supported               |
     * | 11    | 1    | Sensor Unconnected to User bit supported              |
     * | 12    | 1    | Unknown Sensor Connected bit supported                |
     * | 13    | 1    | Sensor Displaced bit supported                        |
     * | 14    | 1    | Sensor Malfunctioning bit supported                   |
     * | 15    | 1    | Sensor Disconnected bit supported                     |
     * | 16    | 8    | Reserved for future use                               |
     *
     */
    deviceAndSensorStatusSupport: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    earlyEstimatedDataBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    equipmentMalfunctionDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    erraticSignalDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    extendedDisplayUpdateOngoingBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    fullyQualifiedDataBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    inadequiteSignalDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    invalidMeasurementDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    lowPerfusionDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    measurementOngoingBitSupported: number;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                                            |
     * | ----- | ---- | ----------------------------------------------- |
     * | 5     | 1    | Measurement Ongoing bit supported               |
     * | 6     | 1    | Early Estimated Data bit supported              |
     * | 7     | 1    | Validated Data bit supported                    |
     * | 8     | 1    | Fully Qualified Data bit supported              |
     * | 9     | 1    | Data from Measurement Storage bit supported     |
     * | 10    | 1    | Data for Demonstration bit supported            |
     * | 11    | 1    | Data for Testing bit supported                  |
     * | 12    | 1    | Calibration Ongoing bit supported               |
     * | 13    | 1    | Measurement Unavailable bit supported           |
     * | 14    | 1    | Questionable Measurement Detected bit supported |
     * | 15    | 1    | Invalid Measurement Detected bit supported      |
     * | 0     | 5    | Reserved for future use                         |
     *
     */
    measurementStatusSupport: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    measurementStorageForSpotCheckMeasurementsIsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    measurementUnavailableBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multipleBondsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    nonpulsatileSignalDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    poorSignalDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    pulseAmplitudeIndexFieldIsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    questionableMeasurementDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    questionablePulseDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorDisconnectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorDisplacedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorInterfaceDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorMalfunctioningBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorUnconnectedToUserBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    signalAnalysisOngoingBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    signalProcessingIrregularityDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    spo2prFastMetricIsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    spo2prSlowMetricIsSupported: number;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | req | name                                                         |
     * | ----- | ---- | --- | ------------------------------------------------------------ |
     * | 0     | 1    | C1  | Measurement Status support is present                        |
     * | 1     | 1    | C2  | Device and Sensor Status support is present                  |
     * | 2     | 1    |     | Measurement Storage for Spot-check measurements is supported |
     * | 3     | 1    |     | Timestamp for Spot-check measurements is supported           |
     * | 4     | 1    |     | SpO2PR-Fast metric is supported                              |
     * | 5     | 1    |     | SpO2PR-Slow metric is supported                              |
     * | 6     | 1    |     | Pulse Amplitude Index field is supported                     |
     * | 7     | 1    |     | Multiple Bonds Supported                                     |
     * | 8     | 8    |     | Reserved for future use                                      |
     *
     */
    supportedFeatures: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    timestampForSpotCheckMeasurementsIsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    unknownSensorConnectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    validatedDataBitSupported: number;
}

/**
 * The fields in the above table, reading from top to bottom, are shown in the order of LSO to MSO, where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.plx_features.xml | Plx Features}
 */
export class PlxFeaturesImpl implements PlxFeatures {
    public static readonly UUID_PREFIX = 0x2a60;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.plx_features";
    public static readonly NAME = "PLX Features";

    /** Parse from a DataView into {@link PlxFeatures}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): PlxFeaturesImpl {
        return new PlxFeaturesImpl(plxFeaturesFromDataView(dataView, indexStart));
    }

    public readonly calibrationOngoingBitSupported: number;
    public readonly dataForDemonstrationBitSupported: number;
    public readonly dataForTestingBitSupported: number;
    public readonly dataFromMeasurementStorageBitSupported: number;
    public readonly deviceAndSensorStatusSupport: number;
    public readonly earlyEstimatedDataBitSupported: number;
    public readonly equipmentMalfunctionDetectedBitSupported: number;
    public readonly erraticSignalDetectedBitSupported: number;
    public readonly extendedDisplayUpdateOngoingBitSupported: number;
    public readonly fullyQualifiedDataBitSupported: number;
    public readonly inadequiteSignalDetectedBitSupported: number;
    public readonly invalidMeasurementDetectedBitSupported: number;
    public readonly lowPerfusionDetectedBitSupported: number;
    public readonly measurementOngoingBitSupported: number;
    public readonly measurementStatusSupport: number;
    public readonly measurementStorageForSpotCheckMeasurementsIsSupported: number;
    public readonly measurementUnavailableBitSupported: number;
    public readonly multipleBondsSupported: number;
    public readonly nonpulsatileSignalDetectedBitSupported: number;
    public readonly poorSignalDetectedBitSupported: number;
    public readonly pulseAmplitudeIndexFieldIsSupported: number;
    public readonly questionableMeasurementDetectedBitSupported: number;
    public readonly questionablePulseDetectedBitSupported: number;
    public readonly sensorDisconnectedBitSupported: number;
    public readonly sensorDisplacedBitSupported: number;
    public readonly sensorInterfaceDetectedBitSupported: number;
    public readonly sensorMalfunctioningBitSupported: number;
    public readonly sensorUnconnectedToUserBitSupported: number;
    public readonly signalAnalysisOngoingBitSupported: number;
    public readonly signalProcessingIrregularityDetectedBitSupported: number;
    public readonly spo2prFastMetricIsSupported: number;
    public readonly spo2prSlowMetricIsSupported: number;
    public readonly supportedFeatures: number;
    public readonly timestampForSpotCheckMeasurementsIsSupported: number;
    public readonly unknownSensorConnectedBitSupported: number;
    public readonly validatedDataBitSupported: number;

    public constructor(plxFeatures: PlxFeatures) {
        this.calibrationOngoingBitSupported = plxFeatures.calibrationOngoingBitSupported;
        this.dataForDemonstrationBitSupported = plxFeatures.dataForDemonstrationBitSupported;
        this.dataForTestingBitSupported = plxFeatures.dataForTestingBitSupported;
        this.dataFromMeasurementStorageBitSupported = plxFeatures.dataFromMeasurementStorageBitSupported;
        this.deviceAndSensorStatusSupport = plxFeatures.deviceAndSensorStatusSupport;
        this.earlyEstimatedDataBitSupported = plxFeatures.earlyEstimatedDataBitSupported;
        this.equipmentMalfunctionDetectedBitSupported = plxFeatures.equipmentMalfunctionDetectedBitSupported;
        this.erraticSignalDetectedBitSupported = plxFeatures.erraticSignalDetectedBitSupported;
        this.extendedDisplayUpdateOngoingBitSupported = plxFeatures.extendedDisplayUpdateOngoingBitSupported;
        this.fullyQualifiedDataBitSupported = plxFeatures.fullyQualifiedDataBitSupported;
        this.inadequiteSignalDetectedBitSupported = plxFeatures.inadequiteSignalDetectedBitSupported;
        this.invalidMeasurementDetectedBitSupported = plxFeatures.invalidMeasurementDetectedBitSupported;
        this.lowPerfusionDetectedBitSupported = plxFeatures.lowPerfusionDetectedBitSupported;
        this.measurementOngoingBitSupported = plxFeatures.measurementOngoingBitSupported;
        this.measurementStatusSupport = plxFeatures.measurementStatusSupport;
        this.measurementStorageForSpotCheckMeasurementsIsSupported = plxFeatures.measurementStorageForSpotCheckMeasurementsIsSupported;
        this.measurementUnavailableBitSupported = plxFeatures.measurementUnavailableBitSupported;
        this.multipleBondsSupported = plxFeatures.multipleBondsSupported;
        this.nonpulsatileSignalDetectedBitSupported = plxFeatures.nonpulsatileSignalDetectedBitSupported;
        this.poorSignalDetectedBitSupported = plxFeatures.poorSignalDetectedBitSupported;
        this.pulseAmplitudeIndexFieldIsSupported = plxFeatures.pulseAmplitudeIndexFieldIsSupported;
        this.questionableMeasurementDetectedBitSupported = plxFeatures.questionableMeasurementDetectedBitSupported;
        this.questionablePulseDetectedBitSupported = plxFeatures.questionablePulseDetectedBitSupported;
        this.sensorDisconnectedBitSupported = plxFeatures.sensorDisconnectedBitSupported;
        this.sensorDisplacedBitSupported = plxFeatures.sensorDisplacedBitSupported;
        this.sensorInterfaceDetectedBitSupported = plxFeatures.sensorInterfaceDetectedBitSupported;
        this.sensorMalfunctioningBitSupported = plxFeatures.sensorMalfunctioningBitSupported;
        this.sensorUnconnectedToUserBitSupported = plxFeatures.sensorUnconnectedToUserBitSupported;
        this.signalAnalysisOngoingBitSupported = plxFeatures.signalAnalysisOngoingBitSupported;
        this.signalProcessingIrregularityDetectedBitSupported = plxFeatures.signalProcessingIrregularityDetectedBitSupported;
        this.spo2prFastMetricIsSupported = plxFeatures.spo2prFastMetricIsSupported;
        this.spo2prSlowMetricIsSupported = plxFeatures.spo2prSlowMetricIsSupported;
        this.supportedFeatures = plxFeatures.supportedFeatures;
        this.timestampForSpotCheckMeasurementsIsSupported = plxFeatures.timestampForSpotCheckMeasurementsIsSupported;
        this.unknownSensorConnectedBitSupported = plxFeatures.unknownSensorConnectedBitSupported;
        this.validatedDataBitSupported = plxFeatures.validatedDataBitSupported;
    }
}

/** Parse from a DataView into {@link PlxFeatures}. */
export function plxFeaturesFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): PlxFeatures {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const supportedFeatures = $dvr.uint16();
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C1  | True        |
     * <p>Requirements: C1</p>
     */
    const measurementStatusSupportIsPresent = !!(supportedFeatures & 0b0000_0000_0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C2  | True        |
     * <p>Requirements: C2</p>
     */
    const deviceAndSensorStatusSupportIsPresent = !!((supportedFeatures & 0b0000_0000_0000_0010) >> 1);
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const measurementStorageForSpotCheckMeasurementsIsSupported = (supportedFeatures & 0b0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const timestampForSpotCheckMeasurementsIsSupported = (supportedFeatures & 0b0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const spo2prFastMetricIsSupported = (supportedFeatures & 0b0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const spo2prSlowMetricIsSupported = (supportedFeatures & 0b0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const pulseAmplitudeIndexFieldIsSupported = (supportedFeatures & 0b0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multipleBondsSupported = (supportedFeatures & 0b0000_0000_1000_0000) >> 7;
    let measurementStatusSupport: number = 0;
    if (measurementStatusSupportIsPresent) {
        measurementStatusSupport = $dvr.uint16();
    }

    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const measurementOngoingBitSupported = (measurementStatusSupport & 0b0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const earlyEstimatedDataBitSupported = (measurementStatusSupport & 0b0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const validatedDataBitSupported = (measurementStatusSupport & 0b0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const fullyQualifiedDataBitSupported = (measurementStatusSupport & 0b0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const dataFromMeasurementStorageBitSupported = (measurementStatusSupport & 0b0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const dataForDemonstrationBitSupported = (measurementStatusSupport & 0b0000_0100_0000_0000) >> 10;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const dataForTestingBitSupported = (measurementStatusSupport & 0b0000_1000_0000_0000) >> 11;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const calibrationOngoingBitSupported = (measurementStatusSupport & 0b0001_0000_0000_0000) >> 12;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const measurementUnavailableBitSupported = (measurementStatusSupport & 0b0010_0000_0000_0000) >> 13;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const questionableMeasurementDetectedBitSupported = (measurementStatusSupport & 0b0100_0000_0000_0000) >> 14;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const invalidMeasurementDetectedBitSupported = (measurementStatusSupport & 0b1000_0000_0000_0000) >> 15;
    let deviceAndSensorStatusSupport: number = 0;
    if (deviceAndSensorStatusSupportIsPresent) {
        deviceAndSensorStatusSupport = $dvr.uint24();
    }

    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const extendedDisplayUpdateOngoingBitSupported = deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const equipmentMalfunctionDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const signalProcessingIrregularityDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const inadequiteSignalDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const poorSignalDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const lowPerfusionDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const erraticSignalDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const nonpulsatileSignalDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const questionablePulseDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const signalAnalysisOngoingBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorInterfaceDetectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_0100_0000_0000) >> 10;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorUnconnectedToUserBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0000_1000_0000_0000) >> 11;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const unknownSensorConnectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0001_0000_0000_0000) >> 12;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorDisplacedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0010_0000_0000_0000) >> 13;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorMalfunctioningBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_0100_0000_0000_0000) >> 14;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorDisconnectedBitSupported = (deviceAndSensorStatusSupport & 0b0000_0000_1000_0000_0000_0000) >> 15;
    return { calibrationOngoingBitSupported, dataForDemonstrationBitSupported, dataForTestingBitSupported, dataFromMeasurementStorageBitSupported, deviceAndSensorStatusSupport, earlyEstimatedDataBitSupported, equipmentMalfunctionDetectedBitSupported, erraticSignalDetectedBitSupported, extendedDisplayUpdateOngoingBitSupported, fullyQualifiedDataBitSupported, inadequiteSignalDetectedBitSupported, invalidMeasurementDetectedBitSupported, lowPerfusionDetectedBitSupported, measurementOngoingBitSupported, measurementStatusSupport, measurementStorageForSpotCheckMeasurementsIsSupported, measurementUnavailableBitSupported, multipleBondsSupported, nonpulsatileSignalDetectedBitSupported, poorSignalDetectedBitSupported, pulseAmplitudeIndexFieldIsSupported, questionableMeasurementDetectedBitSupported, questionablePulseDetectedBitSupported, sensorDisconnectedBitSupported, sensorDisplacedBitSupported, sensorInterfaceDetectedBitSupported, sensorMalfunctioningBitSupported, sensorUnconnectedToUserBitSupported, signalAnalysisOngoingBitSupported, signalProcessingIrregularityDetectedBitSupported, spo2prFastMetricIsSupported, spo2prSlowMetricIsSupported, supportedFeatures, timestampForSpotCheckMeasurementsIsSupported, unknownSensorConnectedBitSupported, validatedDataBitSupported };
}
