import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type Digital, DigitalImpl } from "./digital.js";
import { type Analog, AnalogImpl } from "./analog.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.aggregate.xml
/** <p>The Aggregate Input is an aggregate of the Digital Input Characteristic value (if available) and ALL Analog Inputs available.</p> */
export interface Aggregate {
    analogInput: Analog;
    input: Digital;
}

/**
 * The fields in the above table, reading from top to bottom, are shown in the order of LSO to MSO, where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.aggregate.xml | Aggregate}
 */
export class AggregateImpl implements Aggregate {
    public static readonly UUID_PREFIX = 0x2a5a;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.aggregate";
    public static readonly NAME = "Aggregate";

    /** Parse from a DataView into {@link Aggregate}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): AggregateImpl {
        return new AggregateImpl(aggregateFromDataView(dataView, indexStart));
    }

    public readonly analogInput: Analog;
    public readonly input: Digital;

    public constructor(aggregate: Aggregate) {
        this.analogInput = aggregate.analogInput;
        this.input = aggregate.input;
    }
}

/** Parse from a DataView into {@link Aggregate}. */
export function aggregateFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Aggregate {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const input = DigitalImpl.fromDataView($dvr);
    const analogInput = AnalogImpl.fromDataView($dvr);
    return { analogInput, input };
}
