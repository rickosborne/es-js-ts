import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DayDateTime, DayDateTimeImpl } from "./day-date-time.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.exact_time_256.xml
export interface ExactTime256 {
    /** <p>Reference the Time Characteristic</p> */
    dayDateTime: DayDateTime;
    /**
     * <p>Format: `uint8`</p>
     * <p>1/256th of a second</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 255</p>
     */
    fractions256: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.exact_time_256.xml | Exact Time 256} */
export class ExactTime256Impl implements ExactTime256 {
    public static readonly UUID_PREFIX = 0x2a0c;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.exact_time_256";
    public static readonly NAME = "Exact Time 256";

    /** Parse from a DataView into {@link ExactTime256}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ExactTime256Impl {
        return new ExactTime256Impl(exactTime256FromDataView(dataView, indexStart));
    }

    public readonly dayDateTime: DayDateTime;
    public readonly fractions256: number;

    public constructor(exactTime256: ExactTime256) {
        this.dayDateTime = exactTime256.dayDateTime;
        this.fractions256 = exactTime256.fractions256;
    }
}

/** Parse from a DataView into {@link ExactTime256}. */
export function exactTime256FromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ExactTime256 {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const dayDateTime = DayDateTimeImpl.fromDataView($dvr);
    const fractions256 = $dvr.uint8();
    return { dayDateTime, fractions256 };
}
