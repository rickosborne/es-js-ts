import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.csc_measurement.xml
/** <p>The CSC Measurement characteristic (CSC refers to Cycling Speed and Cadence) is a variable length structure containing a Flags field and, based on the contents of the Flags field, may contain one or more additional fields as shown in the tables below.</p> */
export interface CscMeasurement {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>C2: Field exists if the key of bit 1 of the Flags field is set to 1.</p>
     */
    cumulativeCrankRevolutions?: number | undefined;
    /**
     * <p>Format: `uint32`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>C1: Field exists if the key of bit 0 of the Flags field is set to 1.</p>
     */
    cumulativeWheelRevolutions?: number | undefined;
    /**
     * <p>Format: `8bit`</p>
     * <p>These flags define which data fields are present in the Characteristic value.</p>
     *
     * Bit field:
     *
     * | index | size | req | name                          |
     * | ----- | ---- | --- | ----------------------------- |
     * | 0     | 1    | C1  | Wheel Revolution Data Present |
     * | 1     | 1    | C2  | Crank Revolution Data Present |
     * | 2     | 6    |     | Reserved for future use       |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     */
    lastCrankEventTime?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     */
    lastWheelEventTime?: number | undefined;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.csc_measurement.xml | Csc Measurement} */
export class CscMeasurementImpl implements CscMeasurement {
    public static readonly UUID_PREFIX = 0x2a5b;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.csc_measurement";
    public static readonly NAME = "CSC Measurement";

    /** Parse from a DataView into {@link CscMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): CscMeasurementImpl {
        return new CscMeasurementImpl(cscMeasurementFromDataView(dataView, indexStart));
    }

    public readonly cumulativeCrankRevolutions?: number | undefined;
    public readonly cumulativeWheelRevolutions?: number | undefined;
    public readonly flags: number;
    public readonly lastCrankEventTime?: number | undefined;
    public readonly lastWheelEventTime?: number | undefined;

    public constructor(cscMeasurement: CscMeasurement) {
        this.cumulativeCrankRevolutions = cscMeasurement.cumulativeCrankRevolutions;
        this.cumulativeWheelRevolutions = cscMeasurement.cumulativeWheelRevolutions;
        this.flags = cscMeasurement.flags;
        this.lastCrankEventTime = cscMeasurement.lastCrankEventTime;
        this.lastWheelEventTime = cscMeasurement.lastWheelEventTime;
    }
}

/** Parse from a DataView into {@link CscMeasurement}. */
export function cscMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): CscMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C1  | True        |
     * <p>Requirements: C1</p>
     */
    const wheelRevolutionDataPresent = !!(flags & 0b0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C2  | True        |
     * <p>Requirements: C2</p>
     */
    const crankRevolutionDataPresent = !!((flags & 0b0000_0010) >> 1);
    let cumulativeWheelRevolutions: number | undefined = undefined;
    if (wheelRevolutionDataPresent) {
        cumulativeWheelRevolutions = $dvr.uint32();
    }

    let lastWheelEventTime: number | undefined = undefined;
    if (wheelRevolutionDataPresent) {
        lastWheelEventTime = $dvr.uint16();
    }

    let cumulativeCrankRevolutions: number | undefined = undefined;
    if (crankRevolutionDataPresent) {
        cumulativeCrankRevolutions = $dvr.uint16();
    }

    let lastCrankEventTime: number | undefined = undefined;
    if (crankRevolutionDataPresent) {
        lastCrankEventTime = $dvr.uint16();
    }

    return { cumulativeCrankRevolutions, cumulativeWheelRevolutions, flags, lastCrankEventTime, lastWheelEventTime };
}
