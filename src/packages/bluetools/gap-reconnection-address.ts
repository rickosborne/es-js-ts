import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gap.reconnection_address.xml
/** <p>The Information included in this page is informative. The normative descriptions are contained in the applicable specification.</p> */
export interface GapReconnectionAddress {
    /**
     * <p>Format: `uint48`</p>
     * <p>This is a non-resolvable private address</p>
     */
    address: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gap.reconnection_address.xml | Gap Reconnection Address} */
export class GapReconnectionAddressImpl implements GapReconnectionAddress {
    public static readonly UUID_PREFIX = 0x2a03;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.gap.reconnection_address";
    public static readonly NAME = "Reconnection Address";

    /** Parse from a DataView into {@link GapReconnectionAddress}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GapReconnectionAddressImpl {
        return new GapReconnectionAddressImpl(gapReconnectionAddressFromDataView(dataView, indexStart));
    }

    public readonly address: number;

    public constructor(gapReconnectionAddress: GapReconnectionAddress) {
        this.address = gapReconnectionAddress.address;
    }
}

/** Parse from a DataView into {@link GapReconnectionAddress}. */
export function gapReconnectionAddressFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GapReconnectionAddress {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const address = $dvr.uint48();
    return { address };
}
