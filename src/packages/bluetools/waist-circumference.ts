import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.waist_circumference.xml
/** <p>Used with the Hip Circumference value to calculate the Waist to Hip Ratio (WHR)</p> */
export interface WaistCircumference {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 0.01</p>
     */
    waistCircumference: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.waist_circumference.xml | Waist Circumference} */
export class WaistCircumferenceImpl implements WaistCircumference {
    public static readonly UUID_PREFIX = 0x2a97;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.waist_circumference";
    public static readonly NAME = "Waist Circumference";

    /** Parse from a DataView into {@link WaistCircumference}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): WaistCircumferenceImpl {
        return new WaistCircumferenceImpl(waistCircumferenceFromDataView(dataView, indexStart));
    }

    public readonly waistCircumference: number;

    public constructor(waistCircumference: WaistCircumference) {
        this.waistCircumference = waistCircumference.waistCircumference;
    }
}

/** Parse from a DataView into {@link WaistCircumference}. */
export function waistCircumferenceFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): WaistCircumference {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const waistCircumference = $dvr.uint16();
    return { waistCircumference };
}
