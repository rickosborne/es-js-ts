import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.time_update_state.xml
export interface TimeUpdateState {
    /**
     * <p>Format: `uint8`</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 1</p>
     * | Key | Description    |
     * | --- | -------------- |
     * | 0   | Idle           |
     * | 1   | Update Pending |
     *
     * <p>Reserved: 2 to 255</p>
     */
    currentState: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 4</p>
     * | Key | Description                       |
     * | --- | --------------------------------- |
     * | 0   | Successful                        |
     * | 1   | Canceled                          |
     * | 2   | No Connection To Reference        |
     * | 3   | Reference responded with an error |
     * | 4   | Timeout                           |
     * | 5   | Update not attempted after reset  |
     *
     * <p>Reserved: 6 to 255</p>
     */
    result: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.time_update_state.xml | Time Update State} */
export class TimeUpdateStateImpl implements TimeUpdateState {
    public static readonly UUID_PREFIX = 0x2a17;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.time_update_state";
    public static readonly NAME = "Time Update State";

    /** Parse from a DataView into {@link TimeUpdateState}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): TimeUpdateStateImpl {
        return new TimeUpdateStateImpl(timeUpdateStateFromDataView(dataView, indexStart));
    }

    public readonly currentState: number;
    public readonly result: number;

    public constructor(timeUpdateState: TimeUpdateState) {
        this.currentState = timeUpdateState.currentState;
        this.result = timeUpdateState.result;
    }
}

/** Parse from a DataView into {@link TimeUpdateState}. */
export function timeUpdateStateFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): TimeUpdateState {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | description    |
     * | ----- | -------------- |
     * | 0     | Idle           |
     * | 1     | Update Pending |
     */
    const currentState = $dvr.uint8();
    /** */
    /**
     * | value | description                       |
     * | ----- | --------------------------------- |
     * | 0     | Successful                        |
     * | 1     | Canceled                          |
     * | 2     | No Connection To Reference        |
     * | 3     | Reference responded with an error |
     * | 4     | Timeout                           |
     * | 5     | Update not attempted after reset  |
     */
    const result = $dvr.uint8();
    return { currentState, result };
}
