import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_resistance_level_range.xml
/** <p>The Supported Resistance Level Range characteristic is used to send the supported resistance level range as well as the minimum resistance increment supported by the Server.</p> */
export interface SupportedResistanceLevelRange {
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unitless with a resolution of 0.1</p>
     */
    maximumResistanceLevel: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unitless with a resolution of 0.1</p>
     */
    minimumIncrement: number;
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unitless with a resolution of 0.1</p>
     */
    minimumResistanceLevel: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_resistance_level_range.xml | Supported Resistance Level Range} */
export class SupportedResistanceLevelRangeImpl implements SupportedResistanceLevelRange {
    public static readonly UUID_PREFIX = 0x2ad6;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.supported_resistance_level_range";
    public static readonly NAME = "Supported Resistance Level Range";

    /** Parse from a DataView into {@link SupportedResistanceLevelRange}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): SupportedResistanceLevelRangeImpl {
        return new SupportedResistanceLevelRangeImpl(supportedResistanceLevelRangeFromDataView(dataView, indexStart));
    }

    public readonly maximumResistanceLevel: number;
    public readonly minimumIncrement: number;
    public readonly minimumResistanceLevel: number;

    public constructor(supportedResistanceLevelRange: SupportedResistanceLevelRange) {
        this.maximumResistanceLevel = supportedResistanceLevelRange.maximumResistanceLevel;
        this.minimumIncrement = supportedResistanceLevelRange.minimumIncrement;
        this.minimumResistanceLevel = supportedResistanceLevelRange.minimumResistanceLevel;
    }
}

/** Parse from a DataView into {@link SupportedResistanceLevelRange}. */
export function supportedResistanceLevelRangeFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): SupportedResistanceLevelRange {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const minimumResistanceLevel = $dvr.int16();
    const maximumResistanceLevel = $dvr.int16();
    const minimumIncrement = $dvr.uint16();
    return { maximumResistanceLevel, minimumIncrement, minimumResistanceLevel };
}
