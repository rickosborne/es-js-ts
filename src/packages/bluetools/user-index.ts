import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.user_index.xml
export interface UserIndex {
    /**
     * <p>Format: `uint8`</p>
     * | Key | Description  |
     * | --- | ------------ |
     * | 255 | Unknown User |
     *
     */
    userIndex: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.user_index.xml | User Index} */
export class UserIndexImpl implements UserIndex {
    public static readonly UUID_PREFIX = 0x2a9a;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.user_index";
    public static readonly NAME = "User Index";

    /** Parse from a DataView into {@link UserIndex}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): UserIndexImpl {
        return new UserIndexImpl(userIndexFromDataView(dataView, indexStart));
    }

    public readonly userIndex: number;

    public constructor(userIndex: UserIndex) {
        this.userIndex = userIndex.userIndex;
    }
}

/** Parse from a DataView into {@link UserIndex}. */
export function userIndexFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): UserIndex {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | description  |
     * | ----- | ------------ |
     * | 255   | Unknown User |
     */
    const userIndex = $dvr.uint8();
    return { userIndex };
}
