import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.report_map.xml
/** <p>Only a single instance of this characteristic exists as part of a HID Service.</p> */
export interface ReportMap {
    /** <p>Format: `uint8`</p> */
    reportMapValue: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.report_map.xml | Report Map} */
export class ReportMapImpl implements ReportMap {
    public static readonly UUID_PREFIX = 0x2a4b;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.report_map";
    public static readonly NAME = "Report Map";

    /** Parse from a DataView into {@link ReportMap}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ReportMapImpl {
        return new ReportMapImpl(reportMapFromDataView(dataView, indexStart));
    }

    public readonly reportMapValue: number;

    public constructor(reportMap: ReportMap) {
        this.reportMapValue = reportMap.reportMapValue;
    }
}

/** Parse from a DataView into {@link ReportMap}. */
export function reportMapFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ReportMap {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const reportMapValue = $dvr.uint8();
    return { reportMapValue };
}
