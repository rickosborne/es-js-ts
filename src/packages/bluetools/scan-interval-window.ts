import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.scan_interval_window.xml
/**
 * <p>The Scan Interval Window characteristic is used to store the scan parameters of the GATT Client. Included in this characteristic are the Scan Interval and Scan Window of the GATT Client device.</p>
 * <p>The Scan Interval Window characteristic is used to store the scan parameters of the GATT Client. The GATT Server can use these values to optimize its own advertisement rate and to minimize the rate of its own advertisements while also minimizing the latency of reconnections.</p>
 */
export interface ScanIntervalWindow {
    /** <p>Format: `uint16`</p> */
    le_scan_interval: number;
    /** <p>Format: `uint16`</p> */
    le_scan_window: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.scan_interval_window.xml | Scan Interval Window} */
export class ScanIntervalWindowImpl implements ScanIntervalWindow {
    public static readonly UUID_PREFIX = 0x2a4f;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.scan_interval_window";
    public static readonly NAME = "Scan Interval Window";

    /** Parse from a DataView into {@link ScanIntervalWindow}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ScanIntervalWindowImpl {
        return new ScanIntervalWindowImpl(scanIntervalWindowFromDataView(dataView, indexStart));
    }

    public readonly le_scan_interval: number;
    public readonly le_scan_window: number;

    public constructor(scanIntervalWindow: ScanIntervalWindow) {
        this.le_scan_interval = scanIntervalWindow.le_scan_interval;
        this.le_scan_window = scanIntervalWindow.le_scan_window;
    }
}

/** Parse from a DataView into {@link ScanIntervalWindow}. */
export function scanIntervalWindowFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ScanIntervalWindow {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const le_scan_interval = $dvr.uint16();
    const le_scan_window = $dvr.uint16();
    return { le_scan_interval, le_scan_window };
}
