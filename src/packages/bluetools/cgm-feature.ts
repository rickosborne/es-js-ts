import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.cgm_feature.xml
export interface CgmFeature {
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    calibrationSupported: number;
    /**
     * <p>Format: `24bit`</p>
     * <p>Byte Order - LSO...MSO</p>
     *
     * Bit field:
     *
     * | index | size | name                                            |
     * | ----- | ---- | ----------------------------------------------- |
     * | 0     | 1    | Calibration Supported                           |
     * | 1     | 1    | Patient High/Low Alerts supported               |
     * | 2     | 1    | Hypo Alerts supported                           |
     * | 3     | 1    | Hyper Alerts supported                          |
     * | 4     | 1    | Rate of Increase/Decrease Alerts supported      |
     * | 5     | 1    | Device Specific Alert supported                 |
     * | 6     | 1    | Sensor Malfunction Detection supported          |
     * | 7     | 1    | Sensor Temperature High-Low Detection supported |
     * | 8     | 1    | Sensor Result High-Low Detection supported      |
     * | 9     | 1    | Low Battery Detection supported                 |
     * | 10    | 1    | Sensor Type Error Detection supported           |
     * | 11    | 1    | General Device Fault supported                  |
     * | 12    | 1    | E2E-CRC supported                               |
     * | 13    | 1    | Multiple Bond supported                         |
     * | 14    | 1    | Multiple Sessions supported                     |
     * | 15    | 1    | CGM Trend Information supported                 |
     * | 16    | 1    | CGM Quality supported                           |
     * | 17    | 7    | Reserved for future use                         |
     *
     */
    cgmFeature: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    cgmQualitySupported: number;
    /**
     * <p>Format: `4bit`</p>
     * <p>See Note number 2 below.</p>
     * | Key | Description                         |
     * | --- | ----------------------------------- |
     * | 0   | Reserved for future use             |
     * | 1   | Finger                              |
     * | 2   | Alternate Site Test (AST)           |
     * | 3   | Earlobe                             |
     * | 4   | Control solution                    |
     * | 5   | Subcutaneous tissue                 |
     * | 15  | Sample Location value not available |
     *
     * <p>Reserved for future use: 6 to 14</p>
     */
    cgmSampleLocation: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    cgmTrendInformationSupported: number;
    /**
     * <p>Format: `4bit`</p>
     * <p>See Note number 2 below.</p>
     * | Key | Description              |
     * | --- | ------------------------ |
     * | 0   | Reserved for future use  |
     * | 1   | Capillary Whole blood    |
     * | 2   | Capillary Plasma         |
     * | 3   | Capillary Whole blood    |
     * | 4   | Venous Plasma            |
     * | 5   | Arterial Whole blood     |
     * | 6   | Arterial Plasma          |
     * | 7   | Undetermined Whole blood |
     * | 8   | Undetermined Plasma      |
     * | 9   | Interstitial Fluid (ISF) |
     * | 10  | Control Solution         |
     *
     * <p>Reserved for future use: 11 to 15</p>
     */
    cgmType: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    deviceSpecificAlertSupported: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>If the device supports E2E-safety (E2E-CRC Supported bit is set in CGM Feature), the feature are secured by a CRC calculated over all data. This field is mandatory in this characteristic. If the device doesn?t support E2E-safety the value of the field shall be set to 0xFFFF.</p>
     */
    e2eCRC: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    e2eCRCSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    generalDeviceFaultSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    hyperAlertsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    hypoAlertsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    lowBatteryDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multipleBondSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multipleSessionsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    patientHighLowAlertsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    rateOfIncreaseDecreaseAlertsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorMalfunctionDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorResultHighLowDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorTemperatureHighLowDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorTypeErrorDetectionSupported: number;
}

/**
 * 1. The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet 2. The CGM Type and CGM Sample Location Fields are each a nibble (4bit), where the least significant nibble contains the Type and the most significant nibble contains the Sample Location. These two nibbles are packed as one single octet, the Least Significant Nibble means the four bits numbered 0, 1, 2 and 3 of the octet and the Most Significant Nibble means the four bits numbered 4, 5, 6 and 7 of that octet
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.cgm_feature.xml | Cgm Feature}
 */
export class CgmFeatureImpl implements CgmFeature {
    public static readonly UUID_PREFIX = 0x2aa8;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.cgm_feature";
    public static readonly NAME = "CGM Feature";

    /** Parse from a DataView into {@link CgmFeature}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): CgmFeatureImpl {
        return new CgmFeatureImpl(cgmFeatureFromDataView(dataView, indexStart));
    }

    public readonly calibrationSupported: number;
    public readonly cgmFeature: number;
    public readonly cgmQualitySupported: number;
    public readonly cgmSampleLocation: number;
    public readonly cgmTrendInformationSupported: number;
    public readonly cgmType: number;
    public readonly deviceSpecificAlertSupported: number;
    public readonly e2eCRC: number;
    public readonly e2eCRCSupported: number;
    public readonly generalDeviceFaultSupported: number;
    public readonly hyperAlertsSupported: number;
    public readonly hypoAlertsSupported: number;
    public readonly lowBatteryDetectionSupported: number;
    public readonly multipleBondSupported: number;
    public readonly multipleSessionsSupported: number;
    public readonly patientHighLowAlertsSupported: number;
    public readonly rateOfIncreaseDecreaseAlertsSupported: number;
    public readonly sensorMalfunctionDetectionSupported: number;
    public readonly sensorResultHighLowDetectionSupported: number;
    public readonly sensorTemperatureHighLowDetectionSupported: number;
    public readonly sensorTypeErrorDetectionSupported: number;

    public constructor(cgmFeature: CgmFeature) {
        this.calibrationSupported = cgmFeature.calibrationSupported;
        this.cgmFeature = cgmFeature.cgmFeature;
        this.cgmQualitySupported = cgmFeature.cgmQualitySupported;
        this.cgmSampleLocation = cgmFeature.cgmSampleLocation;
        this.cgmTrendInformationSupported = cgmFeature.cgmTrendInformationSupported;
        this.cgmType = cgmFeature.cgmType;
        this.deviceSpecificAlertSupported = cgmFeature.deviceSpecificAlertSupported;
        this.e2eCRC = cgmFeature.e2eCRC;
        this.e2eCRCSupported = cgmFeature.e2eCRCSupported;
        this.generalDeviceFaultSupported = cgmFeature.generalDeviceFaultSupported;
        this.hyperAlertsSupported = cgmFeature.hyperAlertsSupported;
        this.hypoAlertsSupported = cgmFeature.hypoAlertsSupported;
        this.lowBatteryDetectionSupported = cgmFeature.lowBatteryDetectionSupported;
        this.multipleBondSupported = cgmFeature.multipleBondSupported;
        this.multipleSessionsSupported = cgmFeature.multipleSessionsSupported;
        this.patientHighLowAlertsSupported = cgmFeature.patientHighLowAlertsSupported;
        this.rateOfIncreaseDecreaseAlertsSupported = cgmFeature.rateOfIncreaseDecreaseAlertsSupported;
        this.sensorMalfunctionDetectionSupported = cgmFeature.sensorMalfunctionDetectionSupported;
        this.sensorResultHighLowDetectionSupported = cgmFeature.sensorResultHighLowDetectionSupported;
        this.sensorTemperatureHighLowDetectionSupported = cgmFeature.sensorTemperatureHighLowDetectionSupported;
        this.sensorTypeErrorDetectionSupported = cgmFeature.sensorTypeErrorDetectionSupported;
    }
}

/** Parse from a DataView into {@link CgmFeature}. */
export function cgmFeatureFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): CgmFeature {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const cgmFeature = $dvr.uint24();
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const calibrationSupported = cgmFeature & 0b0000_0000_0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const patientHighLowAlertsSupported = (cgmFeature & 0b0000_0000_0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const hypoAlertsSupported = (cgmFeature & 0b0000_0000_0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const hyperAlertsSupported = (cgmFeature & 0b0000_0000_0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const rateOfIncreaseDecreaseAlertsSupported = (cgmFeature & 0b0000_0000_0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const deviceSpecificAlertSupported = (cgmFeature & 0b0000_0000_0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorMalfunctionDetectionSupported = (cgmFeature & 0b0000_0000_0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorTemperatureHighLowDetectionSupported = (cgmFeature & 0b0000_0000_0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorResultHighLowDetectionSupported = (cgmFeature & 0b0000_0000_0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const lowBatteryDetectionSupported = (cgmFeature & 0b0000_0000_0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorTypeErrorDetectionSupported = (cgmFeature & 0b0000_0000_0000_0100_0000_0000) >> 10;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const generalDeviceFaultSupported = (cgmFeature & 0b0000_0000_0000_1000_0000_0000) >> 11;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const e2eCRCSupported = (cgmFeature & 0b0000_0000_0001_0000_0000_0000) >> 12;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multipleBondSupported = (cgmFeature & 0b0000_0000_0010_0000_0000_0000) >> 13;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multipleSessionsSupported = (cgmFeature & 0b0000_0000_0100_0000_0000_0000) >> 14;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const cgmTrendInformationSupported = (cgmFeature & 0b0000_0000_1000_0000_0000_0000) >> 15;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const cgmQualitySupported = (cgmFeature & 0b0000_0001_0000_0000_0000_0000) >> 16;
    /** */
    /**
     * | value | description              |
     * | ----- | ------------------------ |
     * | 0     | Reserved for future use  |
     * | 1     | Capillary Whole blood    |
     * | 2     | Capillary Plasma         |
     * | 3     | Capillary Whole blood    |
     * | 4     | Venous Plasma            |
     * | 5     | Arterial Whole blood     |
     * | 6     | Arterial Plasma          |
     * | 7     | Undetermined Whole blood |
     * | 8     | Undetermined Plasma      |
     * | 9     | Interstitial Fluid (ISF) |
     * | 10    | Control Solution         |
     */
    const cgmType = $dvr.nibble();
    /** */
    /**
     * | value | description                         |
     * | ----- | ----------------------------------- |
     * | 0     | Reserved for future use             |
     * | 1     | Finger                              |
     * | 2     | Alternate Site Test (AST)           |
     * | 3     | Earlobe                             |
     * | 4     | Control solution                    |
     * | 5     | Subcutaneous tissue                 |
     * | 15    | Sample Location value not available |
     */
    const cgmSampleLocation = $dvr.nibble();
    const e2eCRC = $dvr.uint16();
    return { calibrationSupported, cgmFeature, cgmQualitySupported, cgmSampleLocation, cgmTrendInformationSupported, cgmType, deviceSpecificAlertSupported, e2eCRC, e2eCRCSupported, generalDeviceFaultSupported, hyperAlertsSupported, hypoAlertsSupported, lowBatteryDetectionSupported, multipleBondSupported, multipleSessionsSupported, patientHighLowAlertsSupported, rateOfIncreaseDecreaseAlertsSupported, sensorMalfunctionDetectionSupported, sensorResultHighLowDetectionSupported, sensorTemperatureHighLowDetectionSupported, sensorTypeErrorDetectionSupported };
}
