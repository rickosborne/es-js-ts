import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.glucose_measurement.xml
/** <p>The Glucose Measurement characteristic is a variable length structure containing a Flags field, a Sequence Number field, a Base Time field and, based upon the contents of the Flags field, may contain a Time Offset field, Glucose Concentration field, Type-Sample Location field and a Sensor Status Annunciation field.</p> */
export interface GlucoseMeasurement {
    baseTime: DateTime;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    contextInformationFollows: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    deviceBatteryLowAtTimeOfMeasurement: number;
    /**
     * <p>Format: `8bit`</p>
     * <p>These flags define which data fields are present in the Characteristic value</p>
     *
     * Bit field:
     *
     * | index | size | req    | name                                                    |
     * | ----- | ---- | ------ | ------------------------------------------------------- |
     * | 0     | 1    | C1     | Time Offset Present                                     |
     * | 1     | 1    | C2     | Glucose Concentration, Type and Sample Location Present |
     * | 2     | 1    | C3, C4 | Glucose Concentration Units                             |
     * | 3     | 1    | C5     | Sensor Status Annunciation Present                      |
     * | 4     | 1    |        | Context Information Follows                             |
     * | 5     | 3    |        | Reserved for future use                                 |
     *
     */
    flags: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    generalDeviceFaultHasOccurredInTheSensor: number;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.mass_density.kilogram_per_litre`</p>
     * <p>C2: Field exists if the key of bit 1 of the Flags field is set to 1, C3: Field exists if the key of bit 2 of the Flags field is set to 0</p>
     */
    glucoseConcentrationUnitsOfKgL?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.mass_density.mole_per_litre`</p>
     * <p>C2: Field exists if the key of bit 1 of the Flags field is set to 1, C4: Field exists if the key of bit 2 of the Flags field is set to 1</p>
     */
    glucoseConcentrationUnitsOfMolL?: number | undefined;
    /**
     * <p>Format: `nibble`</p>
     * <p>C2: Field exists if the key of bit 1 of the Flags field is set to 1</p>
     * | Key | Description                         |
     * | --- | ----------------------------------- |
     * | 0   | Reserved for future use             |
     * | 1   | Finger                              |
     * | 2   | Alternate Site Test (AST)           |
     * | 3   | Earlobe                             |
     * | 4   | Control solution                    |
     * | 15  | Sample Location value not available |
     *
     * <p>Reserved for future use: 5 to 14</p>
     */
    sampleLocation?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sampleSizeForBloodOrControlSolutionInsufficientAtTimeOfMeasurement: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorMalfunctionOrFaultingAtTimeOfMeasurement: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorReadInterruptedBecauseStripWasPulledTooSoonAtTimeOfMeasurement: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorResultHigherThanTheDeviceCanProcess: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorResultLowerThanTheDeviceCanProcess: number;
    /**
     * <p>Format: `16bit`</p>
     * <p>C5: Field exists if the key of bit 3 of the Flags field is set to 1</p>
     *
     * Bit field:
     *
     * | index | size | name                                                                             |
     * | ----- | ---- | -------------------------------------------------------------------------------- |
     * | 0     | 1    | Device battery low at time of measurement                                        |
     * | 1     | 1    | Sensor malfunction or faulting at time of measurement                            |
     * | 2     | 1    | Sample size for blood or control solution insufficient at time of measurement    |
     * | 3     | 1    | Strip insertion error                                                            |
     * | 4     | 1    | Strip type incorrect for device                                                  |
     * | 5     | 1    | Sensor result higher than the device can process                                 |
     * | 6     | 1    | Sensor result lower than the device can process                                  |
     * | 7     | 1    | Sensor temperature too high for valid test/result at time of measurement         |
     * | 8     | 1    | Sensor temperature too low for valid test/result at time of measurement          |
     * | 9     | 1    | Sensor read interrupted because strip was pulled too soon at time of measurement |
     * | 10    | 1    | General device fault has occurred in the sensor                                  |
     * | 11    | 1    | Time fault has occurred in the sensor and time may be inaccurate                 |
     * | 12    | 4    | Reserved for future use                                                          |
     *
     */
    sensorStatusAnnunciation: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorTemperatureTooHighForValidTestResultAtTimeOfMeasurement: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorTemperatureTooLowForValidTestResultAtTimeOfMeasurement: number;
    /** <p>Format: `uint16`</p> */
    sequenceNumber: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    stripInsertionError: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    stripTypeIncorrectForDevice: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    timeFaultHasOccurredInTheSensorAndTimeMayBeInaccurate: number;
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.minute`</p>
     * <p>C1: Field exists if the key of bit 0 of the Flags field is set to 1</p>
     */
    timeOffset?: number | undefined;
    /**
     * <p>Format: `nibble`</p>
     * <p>C2: Field exists if the key of bit 1 of the Flags field is set to 1</p>
     * | Key | Description              |
     * | --- | ------------------------ |
     * | 0   | Reserved for future use  |
     * | 1   | Capillary Whole blood    |
     * | 2   | Capillary Plasma         |
     * | 3   | Venous Whole blood       |
     * | 4   | Venous Plasma            |
     * | 5   | Arterial Whole blood     |
     * | 6   | Arterial Plasma          |
     * | 7   | Undetermined Whole blood |
     * | 8   | Undetermined Plasma      |
     * | 9   | Interstitial Fluid (ISF) |
     * | 10  | Control Solution         |
     *
     * <p>Reserved for future use: 11 to 15</p>
     */
    type?: number | undefined;
}

/**
 * Where fields with the format ?nibble? have been defined in the above table, the fields are shown in the order of Least Significant Nibble first, when reading the table from top to bottom. Where the characteristic definition contains two adjacent nibbles and the service specification has defined that that pair of nibbles comprise a single octet, the Least Significant Nibble means the four bits numbered 0, 1, 2 and 3 of the octet and the Most Significant Nibble means the four bits numbered 4, 5, 6 and 7 of that octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.glucose_measurement.xml | Glucose Measurement}
 */
export class GlucoseMeasurementImpl implements GlucoseMeasurement {
    public static readonly UUID_PREFIX = 0x2a18;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.glucose_measurement";
    public static readonly NAME = "Glucose Measurement";

    /** Parse from a DataView into {@link GlucoseMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GlucoseMeasurementImpl {
        return new GlucoseMeasurementImpl(glucoseMeasurementFromDataView(dataView, indexStart));
    }

    public readonly baseTime: DateTime;
    public readonly contextInformationFollows: number;
    public readonly deviceBatteryLowAtTimeOfMeasurement: number;
    public readonly flags: number;
    public readonly generalDeviceFaultHasOccurredInTheSensor: number;
    public readonly glucoseConcentrationUnitsOfKgL?: number | undefined;
    public readonly glucoseConcentrationUnitsOfMolL?: number | undefined;
    public readonly sampleLocation?: number | undefined;
    public readonly sampleSizeForBloodOrControlSolutionInsufficientAtTimeOfMeasurement: number;
    public readonly sensorMalfunctionOrFaultingAtTimeOfMeasurement: number;
    public readonly sensorReadInterruptedBecauseStripWasPulledTooSoonAtTimeOfMeasurement: number;
    public readonly sensorResultHigherThanTheDeviceCanProcess: number;
    public readonly sensorResultLowerThanTheDeviceCanProcess: number;
    public readonly sensorStatusAnnunciation: number;
    public readonly sensorTemperatureTooHighForValidTestResultAtTimeOfMeasurement: number;
    public readonly sensorTemperatureTooLowForValidTestResultAtTimeOfMeasurement: number;
    public readonly sequenceNumber: number;
    public readonly stripInsertionError: number;
    public readonly stripTypeIncorrectForDevice: number;
    public readonly timeFaultHasOccurredInTheSensorAndTimeMayBeInaccurate: number;
    public readonly timeOffset?: number | undefined;
    public readonly type?: number | undefined;

    public constructor(glucoseMeasurement: GlucoseMeasurement) {
        this.baseTime = glucoseMeasurement.baseTime;
        this.contextInformationFollows = glucoseMeasurement.contextInformationFollows;
        this.deviceBatteryLowAtTimeOfMeasurement = glucoseMeasurement.deviceBatteryLowAtTimeOfMeasurement;
        this.flags = glucoseMeasurement.flags;
        this.generalDeviceFaultHasOccurredInTheSensor = glucoseMeasurement.generalDeviceFaultHasOccurredInTheSensor;
        this.glucoseConcentrationUnitsOfKgL = glucoseMeasurement.glucoseConcentrationUnitsOfKgL;
        this.glucoseConcentrationUnitsOfMolL = glucoseMeasurement.glucoseConcentrationUnitsOfMolL;
        this.sampleLocation = glucoseMeasurement.sampleLocation;
        this.sampleSizeForBloodOrControlSolutionInsufficientAtTimeOfMeasurement = glucoseMeasurement.sampleSizeForBloodOrControlSolutionInsufficientAtTimeOfMeasurement;
        this.sensorMalfunctionOrFaultingAtTimeOfMeasurement = glucoseMeasurement.sensorMalfunctionOrFaultingAtTimeOfMeasurement;
        this.sensorReadInterruptedBecauseStripWasPulledTooSoonAtTimeOfMeasurement = glucoseMeasurement.sensorReadInterruptedBecauseStripWasPulledTooSoonAtTimeOfMeasurement;
        this.sensorResultHigherThanTheDeviceCanProcess = glucoseMeasurement.sensorResultHigherThanTheDeviceCanProcess;
        this.sensorResultLowerThanTheDeviceCanProcess = glucoseMeasurement.sensorResultLowerThanTheDeviceCanProcess;
        this.sensorStatusAnnunciation = glucoseMeasurement.sensorStatusAnnunciation;
        this.sensorTemperatureTooHighForValidTestResultAtTimeOfMeasurement = glucoseMeasurement.sensorTemperatureTooHighForValidTestResultAtTimeOfMeasurement;
        this.sensorTemperatureTooLowForValidTestResultAtTimeOfMeasurement = glucoseMeasurement.sensorTemperatureTooLowForValidTestResultAtTimeOfMeasurement;
        this.sequenceNumber = glucoseMeasurement.sequenceNumber;
        this.stripInsertionError = glucoseMeasurement.stripInsertionError;
        this.stripTypeIncorrectForDevice = glucoseMeasurement.stripTypeIncorrectForDevice;
        this.timeFaultHasOccurredInTheSensorAndTimeMayBeInaccurate = glucoseMeasurement.timeFaultHasOccurredInTheSensorAndTimeMayBeInaccurate;
        this.timeOffset = glucoseMeasurement.timeOffset;
        this.type = glucoseMeasurement.type;
    }
}

/** Parse from a DataView into {@link GlucoseMeasurement}. */
export function glucoseMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GlucoseMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C1  | True        |
     * <p>Requirements: C1</p>
     */
    const timeOffsetPresent = !!(flags & 0b0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C2  | True        |
     * <p>Requirements: C2</p>
     */
    const glucoseConcentrationTypeAndSampleLocationPresent = !!((flags & 0b0000_0010) >> 1);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     | C3  | kg/L        |
     * | 1     | C4  | mol/L       |
     * <p>Requirements: C3, C4</p>
     */
    const glucoseConcentrationUnits = !!((flags & 0b0000_0100) >> 2);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C5  | True        |
     * <p>Requirements: C5</p>
     */
    const sensorStatusAnnunciationPresent = !!((flags & 0b0000_1000) >> 3);
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const contextInformationFollows = (flags & 0b0001_0000) >> 4;
    const sequenceNumber = $dvr.uint16();
    const baseTime = DateTimeImpl.fromDataView($dvr);
    let timeOffset: number | undefined = undefined;
    if (timeOffsetPresent) {
        timeOffset = $dvr.int16();
    }

    let glucoseConcentrationUnitsOfKgL: number | undefined = undefined;
    if (glucoseConcentrationTypeAndSampleLocationPresent && !glucoseConcentrationUnits) {
        glucoseConcentrationUnitsOfKgL = $dvr.sFloat();
    }

    let glucoseConcentrationUnitsOfMolL: number | undefined = undefined;
    if (glucoseConcentrationTypeAndSampleLocationPresent && glucoseConcentrationUnits) {
        glucoseConcentrationUnitsOfMolL = $dvr.sFloat();
    }

    let type: number | undefined = undefined;
    if (glucoseConcentrationTypeAndSampleLocationPresent) {
        type = $dvr.nibble();
    }

    let sampleLocation: number | undefined = undefined;
    if (glucoseConcentrationTypeAndSampleLocationPresent) {
        sampleLocation = $dvr.nibble();
    }

    let sensorStatusAnnunciation: number = 0;
    if (sensorStatusAnnunciationPresent) {
        sensorStatusAnnunciation = $dvr.uint16();
    }

    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const deviceBatteryLowAtTimeOfMeasurement = sensorStatusAnnunciation & 0b0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorMalfunctionOrFaultingAtTimeOfMeasurement = (sensorStatusAnnunciation & 0b0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sampleSizeForBloodOrControlSolutionInsufficientAtTimeOfMeasurement = (sensorStatusAnnunciation & 0b0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const stripInsertionError = (sensorStatusAnnunciation & 0b0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const stripTypeIncorrectForDevice = (sensorStatusAnnunciation & 0b0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorResultHigherThanTheDeviceCanProcess = (sensorStatusAnnunciation & 0b0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorResultLowerThanTheDeviceCanProcess = (sensorStatusAnnunciation & 0b0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorTemperatureTooHighForValidTestResultAtTimeOfMeasurement = (sensorStatusAnnunciation & 0b0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorTemperatureTooLowForValidTestResultAtTimeOfMeasurement = (sensorStatusAnnunciation & 0b0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorReadInterruptedBecauseStripWasPulledTooSoonAtTimeOfMeasurement = (sensorStatusAnnunciation & 0b0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const generalDeviceFaultHasOccurredInTheSensor = (sensorStatusAnnunciation & 0b0000_0100_0000_0000) >> 10;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const timeFaultHasOccurredInTheSensorAndTimeMayBeInaccurate = (sensorStatusAnnunciation & 0b0000_1000_0000_0000) >> 11;
    return { baseTime, contextInformationFollows, deviceBatteryLowAtTimeOfMeasurement, flags, generalDeviceFaultHasOccurredInTheSensor, glucoseConcentrationUnitsOfKgL, glucoseConcentrationUnitsOfMolL, sampleLocation, sampleSizeForBloodOrControlSolutionInsufficientAtTimeOfMeasurement, sensorMalfunctionOrFaultingAtTimeOfMeasurement, sensorReadInterruptedBecauseStripWasPulledTooSoonAtTimeOfMeasurement, sensorResultHigherThanTheDeviceCanProcess, sensorResultLowerThanTheDeviceCanProcess, sensorStatusAnnunciation, sensorTemperatureTooHighForValidTestResultAtTimeOfMeasurement, sensorTemperatureTooLowForValidTestResultAtTimeOfMeasurement, sequenceNumber, stripInsertionError, stripTypeIncorrectForDevice, timeFaultHasOccurredInTheSensorAndTimeMayBeInaccurate, timeOffset, type };
}
