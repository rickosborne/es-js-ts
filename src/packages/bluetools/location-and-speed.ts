import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.location_and_speed.xml
/** <p>The Location and Speed characteristic is a variable length structure containing a Flags field and, based on the contents of the Flags field, may contain a combination of data fields listed below. Note that it is possible for this characteristic to exceed the default LE MTU size.</p> */
export interface LocationAndSpeed {
    /**
     * <p>Format: `sint24`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 1/100</p>
     */
    elevation?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    elevationPresent: number;
    /**
     * | value | description                    |
     * | ----- | ------------------------------ |
     * | 0     | Positioning System             |
     * | 1     | Barometric Air Pressure        |
     * | 2     | Database Service (or similiar) |
     * | 3     | Other                          |
     */
    elevationSource: number;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                        |
     * | ----- | ---- | --------------------------- |
     * | 0     | 1    | Instantaneous Speed Present |
     * | 1     | 1    | Total Distance Present      |
     * | 2     | 1    | Location Present            |
     * | 3     | 1    | Elevation Present           |
     * | 4     | 1    | Heading Present             |
     * | 5     | 1    | Rolling Time Present        |
     * | 6     | 1    | UTC Time Present            |
     * | 7     | 2    | Position Status             |
     * | 9     | 1    | Speed and Distance format   |
     * | 10    | 2    | Elevation Source            |
     * | 12    | 1    | Heading Source              |
     * | 13    | 3    | Reserved for future use     |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.plane_angle.degree`</p>
     * <p>Unit is in degrees with a resolution of 1/100</p>
     */
    heading?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    headingPresent: number;
    /**
     * | value | description                       |
     * | ----- | --------------------------------- |
     * | 0     | Heading based on movement         |
     * | 1     | Heading based on magnetic compass |
     */
    headingSource: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.metres_per_second`</p>
     * <p>Unit is in meters per second with a resolution of 1/100</p>
     */
    instantaneousSpeed?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    instantaneousSpeedPresent: number;
    /**
     * <p>Format: `sint32`</p>
     * <p>Unit: `org.bluetooth.unit.plane_angle.degree`</p>
     */
    locationLatitude?: number | undefined;
    /**
     * <p>Format: `sint32`</p>
     * <p>Unit: `org.bluetooth.unit.plane_angle.degree`</p>
     */
    locationLongitude?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    locationPresent: number;
    /**
     * | value | description         |
     * | ----- | ------------------- |
     * | 0     | No Position         |
     * | 1     | Position Ok         |
     * | 2     | Estimated Position  |
     * | 3     | Last Known Position |
     */
    positionStatus: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     * <p>Unit is in seconds with a resolution of 1 second</p>
     */
    rollingTime?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    rollingTimePresent: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | 2D          |
     * | 1     | 3D          |
     */
    speedAndDistanceFormat: number;
    /**
     * <p>Format: `uint24`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 1/10</p>
     */
    totalDistance?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    totalDistancePresent: number;
    /** <p>Smallest units in seconds</p> */
    utcTime?: DateTime | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    utcTimePresent: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.location_and_speed.xml | Location And Speed} */
export class LocationAndSpeedImpl implements LocationAndSpeed {
    public static readonly UUID_PREFIX = 0x2a67;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.location_and_speed";
    public static readonly NAME = "Location and Speed Characteristic";

    /** Parse from a DataView into {@link LocationAndSpeed}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): LocationAndSpeedImpl {
        return new LocationAndSpeedImpl(locationAndSpeedFromDataView(dataView, indexStart));
    }

    public readonly elevation?: number | undefined;
    public readonly elevationPresent: number;
    public readonly elevationSource: number;
    public readonly flags: number;
    public readonly heading?: number | undefined;
    public readonly headingPresent: number;
    public readonly headingSource: number;
    public readonly instantaneousSpeed?: number | undefined;
    public readonly instantaneousSpeedPresent: number;
    public readonly locationLatitude?: number | undefined;
    public readonly locationLongitude?: number | undefined;
    public readonly locationPresent: number;
    public readonly positionStatus: number;
    public readonly rollingTime?: number | undefined;
    public readonly rollingTimePresent: number;
    public readonly speedAndDistanceFormat: number;
    public readonly totalDistance?: number | undefined;
    public readonly totalDistancePresent: number;
    public readonly utcTime?: DateTime | undefined;
    public readonly utcTimePresent: number;

    public constructor(locationAndSpeed: LocationAndSpeed) {
        this.elevation = locationAndSpeed.elevation;
        this.elevationPresent = locationAndSpeed.elevationPresent;
        this.elevationSource = locationAndSpeed.elevationSource;
        this.flags = locationAndSpeed.flags;
        this.heading = locationAndSpeed.heading;
        this.headingPresent = locationAndSpeed.headingPresent;
        this.headingSource = locationAndSpeed.headingSource;
        this.instantaneousSpeed = locationAndSpeed.instantaneousSpeed;
        this.instantaneousSpeedPresent = locationAndSpeed.instantaneousSpeedPresent;
        this.locationLatitude = locationAndSpeed.locationLatitude;
        this.locationLongitude = locationAndSpeed.locationLongitude;
        this.locationPresent = locationAndSpeed.locationPresent;
        this.positionStatus = locationAndSpeed.positionStatus;
        this.rollingTime = locationAndSpeed.rollingTime;
        this.rollingTimePresent = locationAndSpeed.rollingTimePresent;
        this.speedAndDistanceFormat = locationAndSpeed.speedAndDistanceFormat;
        this.totalDistance = locationAndSpeed.totalDistance;
        this.totalDistancePresent = locationAndSpeed.totalDistancePresent;
        this.utcTime = locationAndSpeed.utcTime;
        this.utcTimePresent = locationAndSpeed.utcTimePresent;
    }
}

/** Parse from a DataView into {@link LocationAndSpeed}. */
export function locationAndSpeedFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): LocationAndSpeed {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint16();
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const instantaneousSpeedPresent = flags & 0b0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const totalDistancePresent = (flags & 0b0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const locationPresent = (flags & 0b0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const elevationPresent = (flags & 0b0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const headingPresent = (flags & 0b0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const rollingTimePresent = (flags & 0b0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const utcTimePresent = (flags & 0b0000_0000_0100_0000) >> 6;
    /**
     * | value | description         |
     * | ----- | ------------------- |
     * | 0     | No Position         |
     * | 1     | Position Ok         |
     * | 2     | Estimated Position  |
     * | 3     | Last Known Position |
     */
    const positionStatus = (flags & 0b0000_0001_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | 2D          |
     * | 1     | 3D          |
     */
    const speedAndDistanceFormat = (flags & 0b0000_0010_0000_0000) >> 9;
    /**
     * | value | description                    |
     * | ----- | ------------------------------ |
     * | 0     | Positioning System             |
     * | 1     | Barometric Air Pressure        |
     * | 2     | Database Service (or similiar) |
     * | 3     | Other                          |
     */
    const elevationSource = (flags & 0b0000_1100_0000_0000) >> 10;
    /**
     * | value | description                       |
     * | ----- | --------------------------------- |
     * | 0     | Heading based on movement         |
     * | 1     | Heading based on magnetic compass |
     */
    const headingSource = (flags & 0b0001_0000_0000_0000) >> 12;
    const instantaneousSpeed = $dvr.uint16();
    const totalDistance = $dvr.uint24();
    let locationLatitude: number | undefined = undefined;
    if (!!locationPresent) {
        locationLatitude = $dvr.int32();
    }

    let locationLongitude: number | undefined = undefined;
    if (!!locationPresent) {
        locationLongitude = $dvr.int32();
    }

    const elevation = $dvr.int24();
    const heading = $dvr.uint16();
    const rollingTime = $dvr.uint8();
    const utcTime = DateTimeImpl.fromDataView($dvr);
    return { elevation, elevationPresent, elevationSource, flags, heading, headingPresent, headingSource, instantaneousSpeed, instantaneousSpeedPresent, locationLatitude, locationLongitude, locationPresent, positionStatus, rollingTime, rollingTimePresent, speedAndDistanceFormat, totalDistance, totalDistancePresent, utcTime, utcTimePresent };
}
