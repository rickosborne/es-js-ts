import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.time_trigger_setting.xml
/** <p>The value of the descriptor has two parts. Part one is a condition field and occupies one octet, and part two is the comparison value (trigger point) that the characteristic value is checked against.</p> */
export interface TimeTriggerSetting {
    /**
     * <p>Format: `uint8`</p>
     * | Key | Req. | Description   |
     * | --- | ---- | ------------- |
     * | 0   | C1   | None          |
     * | 1   | C2   | Time Interval |
     * | 2   | C2   | Time Interval |
     * | 3   | C3   | Count         |
     *
     * <p>Reserved for future use: 4 to 255</p>
     */
    condition: number;
    /** <p>Format: `uint16`</p> */
    valueCount?: number | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>No comparison value required</p>
     */
    valueNone?: number | undefined;
    /**
     * <p>Format: `uint24`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     */
    valueTimeInterval?: number | undefined;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.time_trigger_setting.xml | Time Trigger Setting} */
export class TimeTriggerSettingImpl implements TimeTriggerSetting {
    public static readonly UUID_PREFIX = 0x290e;
    public static readonly TYPE_NAME = "org.bluetooth.descriptor.time_trigger_setting";
    public static readonly NAME = "Time Trigger Setting";

    /** Parse from a DataView into {@link TimeTriggerSetting}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): TimeTriggerSettingImpl {
        return new TimeTriggerSettingImpl(timeTriggerSettingFromDataView(dataView, indexStart));
    }

    public readonly condition: number;
    public readonly valueCount?: number | undefined;
    public readonly valueNone?: number | undefined;
    public readonly valueTimeInterval?: number | undefined;

    public constructor(timeTriggerSetting: TimeTriggerSetting) {
        this.condition = timeTriggerSetting.condition;
        this.valueCount = timeTriggerSetting.valueCount;
        this.valueNone = timeTriggerSetting.valueNone;
        this.valueTimeInterval = timeTriggerSetting.valueTimeInterval;
    }
}

/** Parse from a DataView into {@link TimeTriggerSetting}. */
export function timeTriggerSettingFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): TimeTriggerSetting {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | req | description   |
     * | ----- | --- | ------------- |
     * | 0     | C1  | None          |
     * | 1     | C2  | Time Interval |
     * | 2     | C2  | Time Interval |
     * | 3     | C3  | Count         |
     */
    /** <p>Requirements: C1, C2, C3</p> */
    const condition = $dvr.uint8();
    let valueNone: number | undefined = undefined;
    if (condition === 0) {
        valueNone = $dvr.uint8();
    }

    let valueTimeInterval: number | undefined = undefined;
    if (condition === 2) {
        valueTimeInterval = $dvr.uint24();
    }

    let valueCount: number | undefined = undefined;
    if (condition === 3) {
        valueCount = $dvr.uint16();
    }

    return { condition, valueCount, valueNone, valueTimeInterval };
}
