import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.http_entity_body.xml
/** <p>The HTTP Entity Body Characteristic contains the contents of the message body after any Transfer Encoding has been applied.</p> */
export interface HttpEntityBody {
    /**
     * <p>Format: `utf8s`</p>
     * <p>The HTTP entity body used in the HTTP request.</p>
     */
    httpEntityBody: string;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.http_entity_body.xml | Http Entity Body} */
export class HttpEntityBodyImpl implements HttpEntityBody {
    public static readonly UUID_PREFIX = 0x2ab9;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.http_entity_body";
    public static readonly NAME = "HTTP Entity Body";

    /** Parse from a DataView into {@link HttpEntityBody}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): HttpEntityBodyImpl {
        return new HttpEntityBodyImpl(httpEntityBodyFromDataView(dataView, indexStart));
    }

    public readonly httpEntityBody: string;

    public constructor(httpEntityBody: HttpEntityBody) {
        this.httpEntityBody = httpEntityBody.httpEntityBody;
    }
}

/** Parse from a DataView into {@link HttpEntityBody}. */
export function httpEntityBodyFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): HttpEntityBody {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const httpEntityBody = $dvr.utf8s();
    return { httpEntityBody };
}
