import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.weight_scale_feature.xml
export interface WeightScaleFeature {
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    bmiSupported: number;
    /**
     * | value | description                           |
     * | ----- | ------------------------------------- |
     * | 0     | Not Specified                         |
     * | 1     | Resolution of 0.01 meter or 1 inch    |
     * | 2     | Resolution of 0.005 meter or 0.5 inch |
     * | 3     | Resolution of 0.001 meter or 0.1 inch |
     */
    heightMeasurementResolution: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multipleUsersSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    timeStampSupported: number;
    /**
     * | value | description                       |
     * | ----- | --------------------------------- |
     * | 0     | Not Specified                     |
     * | 1     | Resolution of 0.5 kg or 1 lb      |
     * | 2     | Resolution of 0.2 kg or 0.5 lb    |
     * | 3     | Resolution of 0.1 kg or 0.2 lb    |
     * | 4     | Resolution of 0.05 kg or 0.1 lb   |
     * | 5     | Resolution of 0.02 kg or 0.05 lb  |
     * | 6     | Resolution of 0.01 kg or 0.02 lb  |
     * | 7     | Resolution of 0.005 kg or 0.01 lb |
     */
    weightMeasurementResolution: number;
    /**
     * <p>Format: `32bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                          |
     * | ----- | ---- | ----------------------------- |
     * | 0     | 1    | Time Stamp Supported          |
     * | 1     | 1    | Multiple Users Supported      |
     * | 2     | 1    | BMI Supported                 |
     * | 3     | 4    | Weight Measurement Resolution |
     * | 7     | 3    | Height Measurement Resolution |
     * | 10    | 22   | Reserved for future use       |
     *
     */
    weightScaleFeature: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.weight_scale_feature.xml | Weight Scale Feature} */
export class WeightScaleFeatureImpl implements WeightScaleFeature {
    public static readonly UUID_PREFIX = 0x2a9e;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.weight_scale_feature";
    public static readonly NAME = "Weight Scale Feature";

    /** Parse from a DataView into {@link WeightScaleFeature}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): WeightScaleFeatureImpl {
        return new WeightScaleFeatureImpl(weightScaleFeatureFromDataView(dataView, indexStart));
    }

    public readonly bmiSupported: number;
    public readonly heightMeasurementResolution: number;
    public readonly multipleUsersSupported: number;
    public readonly timeStampSupported: number;
    public readonly weightMeasurementResolution: number;
    public readonly weightScaleFeature: number;

    public constructor(weightScaleFeature: WeightScaleFeature) {
        this.bmiSupported = weightScaleFeature.bmiSupported;
        this.heightMeasurementResolution = weightScaleFeature.heightMeasurementResolution;
        this.multipleUsersSupported = weightScaleFeature.multipleUsersSupported;
        this.timeStampSupported = weightScaleFeature.timeStampSupported;
        this.weightMeasurementResolution = weightScaleFeature.weightMeasurementResolution;
        this.weightScaleFeature = weightScaleFeature.weightScaleFeature;
    }
}

/** Parse from a DataView into {@link WeightScaleFeature}. */
export function weightScaleFeatureFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): WeightScaleFeature {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const weightScaleFeature = $dvr.uint32();
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const timeStampSupported = weightScaleFeature & 0b0000_0000_0000_0000_0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multipleUsersSupported = (weightScaleFeature & 0b0000_0000_0000_0000_0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const bmiSupported = (weightScaleFeature & 0b0000_0000_0000_0000_0000_0000_0000_0100) >> 2;
    /**
     * | value | description                       |
     * | ----- | --------------------------------- |
     * | 0     | Not Specified                     |
     * | 1     | Resolution of 0.5 kg or 1 lb      |
     * | 2     | Resolution of 0.2 kg or 0.5 lb    |
     * | 3     | Resolution of 0.1 kg or 0.2 lb    |
     * | 4     | Resolution of 0.05 kg or 0.1 lb   |
     * | 5     | Resolution of 0.02 kg or 0.05 lb  |
     * | 6     | Resolution of 0.01 kg or 0.02 lb  |
     * | 7     | Resolution of 0.005 kg or 0.01 lb |
     */
    const weightMeasurementResolution = (weightScaleFeature & 0b0000_0000_0000_0000_0000_0000_0111_1000) >> 3;
    /**
     * | value | description                           |
     * | ----- | ------------------------------------- |
     * | 0     | Not Specified                         |
     * | 1     | Resolution of 0.01 meter or 1 inch    |
     * | 2     | Resolution of 0.005 meter or 0.5 inch |
     * | 3     | Resolution of 0.001 meter or 0.1 inch |
     */
    const heightMeasurementResolution = (weightScaleFeature & 0b0000_0000_0000_0000_0000_0011_1000_0000) >> 7;
    return { bmiSupported, heightMeasurementResolution, multipleUsersSupported, timeStampSupported, weightMeasurementResolution, weightScaleFeature };
}
