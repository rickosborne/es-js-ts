import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.weight_measurement.xml
export interface WeightMeasurement {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unit is unitless with a resolution of 0.1</p>
     */
    bmi?: number | undefined;
    /**
     * <p>Format: `8bit`</p>
     *
     * Bit field:
     *
     * | index | size | req    | name                    |
     * | ----- | ---- | ------ | ----------------------- |
     * | 0     | 1    | C1, C2 | Measurement Units       |
     * | 1     | 1    | C3     | Time stamp present      |
     * | 2     | 1    | C4     | User ID present         |
     * | 3     | 1    | C5     | BMI and Height present  |
     * | 4     | 4    |        | Reserved for future use |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.inch`</p>
     * <p>Unit is in inches with a resolution of 0.1, and determined when bit 0 of the Flags field is set to 1</p>
     */
    heightImperial?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 0.001, and determined when bit 0 of the Flags field is set to 0.</p>
     */
    heightSI?: number | undefined;
    /** <p>Smallest unit in seconds</p> */
    timeStamp?: DateTime | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unit is unitless with a resolution of 1</p>
     * | Key | Description  |
     * | --- | ------------ |
     * | 255 | unknown user |
     *
     */
    userID?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.pound`</p>
     * <p>Unit is in pounds with a resolution of 0.01, and determined when bit 0 of the Flags field is set to 1.</p>
     */
    weightImperial?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.kilogram`</p>
     * <p>Unit is in kilograms with a resolution of 0.005, and determined when bit 0 of the Flags field is set to 0.</p>
     */
    weightSI?: number | undefined;
}

/**
 * The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.weight_measurement.xml | Weight Measurement}
 */
export class WeightMeasurementImpl implements WeightMeasurement {
    public static readonly UUID_PREFIX = 0x2a9d;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.weight_measurement";
    public static readonly NAME = "Weight Measurement";

    /** Parse from a DataView into {@link WeightMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): WeightMeasurementImpl {
        return new WeightMeasurementImpl(weightMeasurementFromDataView(dataView, indexStart));
    }

    public readonly bmi?: number | undefined;
    public readonly flags: number;
    public readonly heightImperial?: number | undefined;
    public readonly heightSI?: number | undefined;
    public readonly timeStamp?: DateTime | undefined;
    public readonly userID?: number | undefined;
    public readonly weightImperial?: number | undefined;
    public readonly weightSI?: number | undefined;

    public constructor(weightMeasurement: WeightMeasurement) {
        this.bmi = weightMeasurement.bmi;
        this.flags = weightMeasurement.flags;
        this.heightImperial = weightMeasurement.heightImperial;
        this.heightSI = weightMeasurement.heightSI;
        this.timeStamp = weightMeasurement.timeStamp;
        this.userID = weightMeasurement.userID;
        this.weightImperial = weightMeasurement.weightImperial;
        this.weightSI = weightMeasurement.weightSI;
    }
}

/** Parse from a DataView into {@link WeightMeasurement}. */
export function weightMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): WeightMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description                                                                        |
     * | ----- | --- | ---------------------------------------------------------------------------------- |
     * | 0     | C1  | SI (Weight and Mass in units of kilogram (kg) and Height in units of meter)        |
     * | 1     | C2  | Imperial (Weight and Mass in units of pound (lb) and Height in units of inch (in)) |
     * <p>Requirements: C1, C2</p>
     */
    const measurementUnits = !!(flags & 0b0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C3  | True        |
     * <p>Requirements: C3</p>
     */
    const timeStampPresent = !!((flags & 0b0000_0010) >> 1);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C4  | True        |
     * <p>Requirements: C4</p>
     */
    const userIDPresent = !!((flags & 0b0000_0100) >> 2);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C5  | True        |
     * <p>Requirements: C5</p>
     */
    const bmiAndHeightPresent = !!((flags & 0b0000_1000) >> 3);
    let weightSI: number | undefined = undefined;
    if (!measurementUnits) {
        weightSI = $dvr.uint16();
    }

    let weightImperial: number | undefined = undefined;
    if (measurementUnits) {
        weightImperial = $dvr.uint16();
    }

    let timeStamp: DateTime | undefined = undefined;
    if (timeStampPresent) {
        timeStamp = DateTimeImpl.fromDataView($dvr);
    }

    /** */
    /**
     * | value | description  |
     * | ----- | ------------ |
     * | 255   | unknown user |
     */
    let userID: number | undefined = undefined;
    if (userIDPresent) {
        userID = $dvr.uint8();
    }

    let bmi: number | undefined = undefined;
    if (bmiAndHeightPresent) {
        bmi = $dvr.uint16();
    }

    let heightSI: number | undefined = undefined;
    if (!measurementUnits && bmiAndHeightPresent) {
        heightSI = $dvr.uint16();
    }

    let heightImperial: number | undefined = undefined;
    if (measurementUnits && bmiAndHeightPresent) {
        heightImperial = $dvr.uint16();
    }

    return { bmi, flags, heightImperial, heightSI, timeStamp, userID, weightImperial, weightSI };
}
