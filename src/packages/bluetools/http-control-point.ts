import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.http_control_point.xml
/** <p>The HTTP Control Point is used to initiate a request to send an HTTP request message from the device contgaining the HTTP Proxy Service, acting as an HTTP Client, and an HTTP Server.</p> */
export interface HttpControlPoint {
    /**
     * <p>Format: `uint8`</p>
     * | Key | Req. | Description          |
     * | --- | ---- | -------------------- |
     * | 1   | N/A  | HTTP GET Request     |
     * | 2   | N/A  | HTTP HEAD Request    |
     * | 3   | N/A  | HTTP POST Request    |
     * | 4   | N/A  | HTTP PUT Request     |
     * | 5   | N/A  | HTTP DELETE Request  |
     * | 6   | N/A  | HTTPS GET Request    |
     * | 7   | N/A  | HTTPS HEAD Request   |
     * | 8   | N/A  | HTTPS POST Request   |
     * | 9   | N/A  | HTTPS PUT Request    |
     * | 10  | N/A  | HTTPS DELETE Request |
     * | 11  | N/A  | HTTP Request Cancel  |
     *
     * <p>Reserved for future use: 0 to -1</p>
     */
    opCode: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.http_control_point.xml | Http Control Point} */
export class HttpControlPointImpl implements HttpControlPoint {
    public static readonly UUID_PREFIX = 0x2aba;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.http_control_point";
    public static readonly NAME = "HTTP Control Point";

    /** Parse from a DataView into {@link HttpControlPoint}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): HttpControlPointImpl {
        return new HttpControlPointImpl(httpControlPointFromDataView(dataView, indexStart));
    }

    public readonly opCode: number;

    public constructor(httpControlPoint: HttpControlPoint) {
        this.opCode = httpControlPoint.opCode;
    }
}

/** Parse from a DataView into {@link HttpControlPoint}. */
export function httpControlPointFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): HttpControlPoint {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | req | description          |
     * | ----- | --- | -------------------- |
     * | 1     | N/A | HTTP GET Request     |
     * | 2     | N/A | HTTP HEAD Request    |
     * | 3     | N/A | HTTP POST Request    |
     * | 4     | N/A | HTTP PUT Request     |
     * | 5     | N/A | HTTP DELETE Request  |
     * | 6     | N/A | HTTPS GET Request    |
     * | 7     | N/A | HTTPS HEAD Request   |
     * | 8     | N/A | HTTPS POST Request   |
     * | 9     | N/A | HTTPS PUT Request    |
     * | 10    | N/A | HTTPS DELETE Request |
     * | 11    | N/A | HTTP Request Cancel  |
     */
    /** <p>Requirements: N/A</p> */
    const opCode = $dvr.uint8();
    return { opCode };
}
