import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.aerobic_threshold.xml
/** <p>First metabolic threshold.</p> */
export interface AerobicThreshold {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>The Unit is beats per minute with a resolution of 1</p>
     */
    aerobicThreshold: number;
}

/**
 * Aerobic Threshold and Anaerobic Threshold together with the Sport Type for Aerobic and Anaerobic Thresholds describe the metabolic thresholds of the user. The Sport Type for Aerobic and Anaerobic Thresholds identifies how the measurement was performed.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.aerobic_threshold.xml | Aerobic Threshold}
 */
export class AerobicThresholdImpl implements AerobicThreshold {
    public static readonly UUID_PREFIX = 0x2a7f;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.aerobic_threshold";
    public static readonly NAME = "Aerobic Threshold";

    /** Parse from a DataView into {@link AerobicThreshold}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): AerobicThresholdImpl {
        return new AerobicThresholdImpl(aerobicThresholdFromDataView(dataView, indexStart));
    }

    public readonly aerobicThreshold: number;

    public constructor(aerobicThreshold: AerobicThreshold) {
        this.aerobicThreshold = aerobicThreshold.aerobicThreshold;
    }
}

/** Parse from a DataView into {@link AerobicThreshold}. */
export function aerobicThresholdFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): AerobicThreshold {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const aerobicThreshold = $dvr.uint8();
    return { aerobicThreshold };
}
