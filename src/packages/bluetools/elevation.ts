import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.elevation.xml
export interface Elevation {
    /**
     * <p>Format: `sint24`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 0.01 m</p>
     */
    elevation: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.elevation.xml | Elevation} */
export class ElevationImpl implements Elevation {
    public static readonly UUID_PREFIX = 0x2a6c;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.elevation";
    public static readonly NAME = "Elevation";

    /** Parse from a DataView into {@link Elevation}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ElevationImpl {
        return new ElevationImpl(elevationFromDataView(dataView, indexStart));
    }

    public readonly elevation: number;

    public constructor(elevation: Elevation) {
        this.elevation = elevation.elevation;
    }
}

/** Parse from a DataView into {@link Elevation}. */
export function elevationFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Elevation {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const elevation = $dvr.int24();
    return { elevation };
}
