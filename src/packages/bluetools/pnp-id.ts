import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.pnp_id.xml
/**
 * <p>The PnP_ID characteristic returns its value when read using the GATT Characteristic Value Read procedure.</p>
 * <p>The PnP_ID characteristic is a set of values that used to create a device ID value that is unique for this device. Included in the characteristic is a Vendor ID Source field, a Vendor ID field, a Product ID field and a Product Version field. These values are used to identify all devices of a given type/model/version using numbers.</p>
 */
export interface PnpId {
    /**
     * <p>Format: `uint16`</p>
     * <p>Manufacturer managed identifier for this product</p>
     */
    productID: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Manufacturer managed version for this product</p>
     */
    productVersion: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Identifies the product vendor from the namespace in the Vendor ID Source</p>
     */
    vendorID: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Identifies the source of the Vendor ID field</p>
     * <p>Minimum: 1</p>
     * <p>Maximum: 2</p>
     * | Key | Description                                                                        |
     * | --- | ---------------------------------------------------------------------------------- |
     * | 1   | Bluetooth SIG assigned Company Identifier value from the Assigned Numbers document |
     * | 2   | USB Implementer?s Forum assigned Vendor ID value                                   |
     *
     * <p>Reserved for future use: 3 to 255</p>
     */
    vendorIDSource: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.pnp_id.xml | Pnp Id} */
export class PnpIdImpl implements PnpId {
    public static readonly UUID_PREFIX = 0x2a50;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.pnp_id";
    public static readonly NAME = "PnP ID";

    /** Parse from a DataView into {@link PnpId}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): PnpIdImpl {
        return new PnpIdImpl(pnpIdFromDataView(dataView, indexStart));
    }

    public readonly productID: number;
    public readonly productVersion: number;
    public readonly vendorID: number;
    public readonly vendorIDSource: number;

    public constructor(pnpId: PnpId) {
        this.productID = pnpId.productID;
        this.productVersion = pnpId.productVersion;
        this.vendorID = pnpId.vendorID;
        this.vendorIDSource = pnpId.vendorIDSource;
    }
}

/** Parse from a DataView into {@link PnpId}. */
export function pnpIdFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): PnpId {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | description                                                                        |
     * | ----- | ---------------------------------------------------------------------------------- |
     * | 1     | Bluetooth SIG assigned Company Identifier value from the Assigned Numbers document |
     * | 2     | USB Implementer?s Forum assigned Vendor ID value                                   |
     */
    const vendorIDSource = $dvr.uint8();
    const vendorID = $dvr.uint16();
    const productID = $dvr.uint16();
    const productVersion = $dvr.uint16();
    return { productID, productVersion, vendorID, vendorIDSource };
}
