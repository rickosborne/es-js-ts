import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.tx_power_level.xml
/**
 * <p>The Transmit Power Level characteristic represents the current transmit power level in dBm, and the level ranges from -100 dBm to +20 dBm to a resolution of 1 dBm.</p>
 * <p>The value 0x12 is interpreted as +18dBm</p>
 * <p>The value 0xEE is interpreted as -18dBm</p>
 * <p>The value of the characteristic is a signed 8 bit integer that has a fixed point exponent of 0.</p>
 */
export interface TxPowerLevel {
    /**
     * <p>Format: `sint8`</p>
     * <p>Unit: `org.bluetooth.unit.logarithmic_radio_quantity.decibel`</p>
     * <p>Minimum: -100</p>
     * <p>Maximum: 20</p>
     */
    txPower: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.tx_power_level.xml | Tx Power Level} */
export class TxPowerLevelImpl implements TxPowerLevel {
    public static readonly UUID_PREFIX = 0x2a07;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.tx_power_level";
    public static readonly NAME = "Tx Power Level";

    /** Parse from a DataView into {@link TxPowerLevel}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): TxPowerLevelImpl {
        return new TxPowerLevelImpl(txPowerLevelFromDataView(dataView, indexStart));
    }

    public readonly txPower: number;

    public constructor(txPowerLevel: TxPowerLevel) {
        this.txPower = txPowerLevel.txPower;
    }
}

/** Parse from a DataView into {@link TxPowerLevel}. */
export function txPowerLevelFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): TxPowerLevel {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const txPower = $dvr.int8();
    return { txPower };
}
