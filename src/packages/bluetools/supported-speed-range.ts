import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_speed_range.xml
/** <p>The Supported Speed Range characteristic is used to send the supported speed range as well as the minimum speed increment supported by the Server.</p> */
export interface SupportedSpeedRange {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.kilometre_per_hour`</p>
     * <p>Kilometer per hour with a resolution of 0.01</p>
     */
    maximumSpeed: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.kilometre_per_hour`</p>
     * <p>Meters per second with a resolution of 0.01</p>
     */
    minimumIncrement: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.kilometre_per_hour`</p>
     * <p>Kilometer per hour with a resolution of 0.01</p>
     */
    minimumSpeed: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_speed_range.xml | Supported Speed Range} */
export class SupportedSpeedRangeImpl implements SupportedSpeedRange {
    public static readonly UUID_PREFIX = 0x2ad4;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.supported_speed_range";
    public static readonly NAME = "Supported Speed Range";

    /** Parse from a DataView into {@link SupportedSpeedRange}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): SupportedSpeedRangeImpl {
        return new SupportedSpeedRangeImpl(supportedSpeedRangeFromDataView(dataView, indexStart));
    }

    public readonly maximumSpeed: number;
    public readonly minimumIncrement: number;
    public readonly minimumSpeed: number;

    public constructor(supportedSpeedRange: SupportedSpeedRange) {
        this.maximumSpeed = supportedSpeedRange.maximumSpeed;
        this.minimumIncrement = supportedSpeedRange.minimumIncrement;
        this.minimumSpeed = supportedSpeedRange.minimumSpeed;
    }
}

/** Parse from a DataView into {@link SupportedSpeedRange}. */
export function supportedSpeedRangeFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): SupportedSpeedRange {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const minimumSpeed = $dvr.uint16();
    const maximumSpeed = $dvr.uint16();
    const minimumIncrement = $dvr.uint16();
    return { maximumSpeed, minimumIncrement, minimumSpeed };
}
