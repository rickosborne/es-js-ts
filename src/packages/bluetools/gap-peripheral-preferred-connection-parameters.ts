import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gap.peripheral_preferred_connection_parameters.xml
export interface GapPeripheralPreferredConnectionParameters {
    /**
     * <p>Format: `uint16`</p>
     * <p>Minimum: 10</p>
     * <p>Maximum: 3200</p>
     */
    connectionSupervisionTimeoutMultiplier: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>connInterval_max = Maximum Connection Interval * 1.25 ms. and is equal or greater than the Minimum Connection Interval</p>
     * <p>Minimum: 6</p>
     * <p>Maximum: 3200</p>
     */
    maximumConnectionInterval: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>connInterval_min = Minimum Connection Interval * 1.25 ms</p>
     * <p>Minimum: 6</p>
     * <p>Maximum: 3200</p>
     */
    minimumConnectionInterval: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 1000</p>
     */
    slaveLatency: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gap.peripheral_preferred_connection_parameters.xml | Gap Peripheral Preferred Connection Parameters} */
export class GapPeripheralPreferredConnectionParametersImpl implements GapPeripheralPreferredConnectionParameters {
    public static readonly UUID_PREFIX = 0x2a04;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.gap.peripheral_preferred_connection_parameters";
    public static readonly NAME = "Peripheral Preferred Connection Parameters";

    /** Parse from a DataView into {@link GapPeripheralPreferredConnectionParameters}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GapPeripheralPreferredConnectionParametersImpl {
        return new GapPeripheralPreferredConnectionParametersImpl(gapPeripheralPreferredConnectionParametersFromDataView(dataView, indexStart));
    }

    public readonly connectionSupervisionTimeoutMultiplier: number;
    public readonly maximumConnectionInterval: number;
    public readonly minimumConnectionInterval: number;
    public readonly slaveLatency: number;

    public constructor(gapPeripheralPreferredConnectionParameters: GapPeripheralPreferredConnectionParameters) {
        this.connectionSupervisionTimeoutMultiplier = gapPeripheralPreferredConnectionParameters.connectionSupervisionTimeoutMultiplier;
        this.maximumConnectionInterval = gapPeripheralPreferredConnectionParameters.maximumConnectionInterval;
        this.minimumConnectionInterval = gapPeripheralPreferredConnectionParameters.minimumConnectionInterval;
        this.slaveLatency = gapPeripheralPreferredConnectionParameters.slaveLatency;
    }
}

/** Parse from a DataView into {@link GapPeripheralPreferredConnectionParameters}. */
export function gapPeripheralPreferredConnectionParametersFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GapPeripheralPreferredConnectionParameters {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const minimumConnectionInterval = $dvr.uint16();
    const maximumConnectionInterval = $dvr.uint16();
    const slaveLatency = $dvr.uint16();
    const connectionSupervisionTimeoutMultiplier = $dvr.uint16();
    return { connectionSupervisionTimeoutMultiplier, maximumConnectionInterval, minimumConnectionInterval, slaveLatency };
}
