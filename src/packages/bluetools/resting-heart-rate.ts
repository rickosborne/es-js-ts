import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.resting_heart_rate.xml
/** <p>Lowest Heart Rate a user can reach</p> */
export interface RestingHeartRate {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is in beats per minute with a resolution of 1</p>
     */
    restingHeartRate: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.resting_heart_rate.xml | Resting Heart Rate} */
export class RestingHeartRateImpl implements RestingHeartRate {
    public static readonly UUID_PREFIX = 0x2a92;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.resting_heart_rate";
    public static readonly NAME = "Resting Heart Rate";

    /** Parse from a DataView into {@link RestingHeartRate}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): RestingHeartRateImpl {
        return new RestingHeartRateImpl(restingHeartRateFromDataView(dataView, indexStart));
    }

    public readonly restingHeartRate: number;

    public constructor(restingHeartRate: RestingHeartRate) {
        this.restingHeartRate = restingHeartRate.restingHeartRate;
    }
}

/** Parse from a DataView into {@link RestingHeartRate}. */
export function restingHeartRateFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): RestingHeartRate {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const restingHeartRate = $dvr.uint8();
    return { restingHeartRate };
}
