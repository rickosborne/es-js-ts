import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.five_zone_heart_rate_limits.xml
/** <p>Data structure containing the limits between the heart rate zones for the 5-zone heart rate definition (Maximum, Hard, Moderate, Light and Very Light).</p> */
export interface FiveZoneHeartRateLimits {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is in beats per minute with a resolution of 1</p>
     */
    hardLimit: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is in beats per minute with a resolution of 1</p>
     */
    hardMaximumLimit: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is in beats per minute with a resolution of 1</p>
     */
    lightLightLimit: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is in beats per minute with a resolution of 1</p>
     */
    lightModerateLimit: number;
}

/**
 * The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.five_zone_heart_rate_limits.xml | Five Zone Heart Rate Limits}
 */
export class FiveZoneHeartRateLimitsImpl implements FiveZoneHeartRateLimits {
    public static readonly UUID_PREFIX = 0x2a8b;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.five_zone_heart_rate_limits";
    public static readonly NAME = "Five Zone Heart Rate Limits";

    /** Parse from a DataView into {@link FiveZoneHeartRateLimits}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): FiveZoneHeartRateLimitsImpl {
        return new FiveZoneHeartRateLimitsImpl(fiveZoneHeartRateLimitsFromDataView(dataView, indexStart));
    }

    public readonly hardLimit: number;
    public readonly hardMaximumLimit: number;
    public readonly lightLightLimit: number;
    public readonly lightModerateLimit: number;

    public constructor(fiveZoneHeartRateLimits: FiveZoneHeartRateLimits) {
        this.hardLimit = fiveZoneHeartRateLimits.hardLimit;
        this.hardMaximumLimit = fiveZoneHeartRateLimits.hardMaximumLimit;
        this.lightLightLimit = fiveZoneHeartRateLimits.lightLightLimit;
        this.lightModerateLimit = fiveZoneHeartRateLimits.lightModerateLimit;
    }
}

/** Parse from a DataView into {@link FiveZoneHeartRateLimits}. */
export function fiveZoneHeartRateLimitsFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): FiveZoneHeartRateLimits {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const lightLightLimit = $dvr.uint8();
    const lightModerateLimit = $dvr.uint8();
    const hardLimit = $dvr.uint8();
    const hardMaximumLimit = $dvr.uint8();
    return { hardLimit, hardMaximumLimit, lightLightLimit, lightModerateLimit };
}
