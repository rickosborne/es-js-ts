import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gap.device_name.xml
export interface GapDeviceName {
    /** <p>Format: `utf8s`</p> */
    name: string;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gap.device_name.xml | Gap Device Name} */
export class GapDeviceNameImpl implements GapDeviceName {
    public static readonly UUID_PREFIX = 0x2a00;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.gap.device_name";
    public static readonly NAME = "Device Name";

    /** Parse from a DataView into {@link GapDeviceName}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GapDeviceNameImpl {
        return new GapDeviceNameImpl(gapDeviceNameFromDataView(dataView, indexStart));
    }

    public readonly name: string;

    public constructor(gapDeviceName: GapDeviceName) {
        this.name = gapDeviceName.name;
    }
}

/** Parse from a DataView into {@link GapDeviceName}. */
export function gapDeviceNameFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GapDeviceName {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const name = $dvr.utf8s();
    return { name };
}
