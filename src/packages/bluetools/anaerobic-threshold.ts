import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.anaerobic_threshold.xml
/** <p>Second metabolic threshold</p> */
export interface AnaerobicThreshold {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>The Unit is beats per minute with a resolution of 1</p>
     */
    anaerobicThreshold: number;
}

/**
 * Aerobic Threshold and Anaerobic Threshold together with the Sport Type for Aerobic and Anaerobic Thresholds describe the metabolic thresholds of the user. The Sport Type for Aerobic and Anaerobic Thresholds identifies how the measurement was performed.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.anaerobic_threshold.xml | Anaerobic Threshold}
 */
export class AnaerobicThresholdImpl implements AnaerobicThreshold {
    public static readonly UUID_PREFIX = 0x2a83;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.anaerobic_threshold";
    public static readonly NAME = "Anaerobic Threshold";

    /** Parse from a DataView into {@link AnaerobicThreshold}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): AnaerobicThresholdImpl {
        return new AnaerobicThresholdImpl(anaerobicThresholdFromDataView(dataView, indexStart));
    }

    public readonly anaerobicThreshold: number;

    public constructor(anaerobicThreshold: AnaerobicThreshold) {
        this.anaerobicThreshold = anaerobicThreshold.anaerobicThreshold;
    }
}

/** Parse from a DataView into {@link AnaerobicThreshold}. */
export function anaerobicThresholdFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): AnaerobicThreshold {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const anaerobicThreshold = $dvr.uint8();
    return { anaerobicThreshold };
}
