import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.http_headers.xml
/** <p>The HTTP Headers Characteristic is used to hold the headers that would be sent to the HTTP Request or the headers contained within an HTTP response message from the HTTP Server.</p> */
export interface HttpHeaders {
    /**
     * <p>Format: `utf8s`</p>
     * <p>The HTTP headers to be used in the HTTP request.</p>
     */
    httpHeaders: string;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.http_headers.xml | Http Headers} */
export class HttpHeadersImpl implements HttpHeaders {
    public static readonly UUID_PREFIX = 0x2ab7;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.http_headers";
    public static readonly NAME = "HTTP Headers";

    /** Parse from a DataView into {@link HttpHeaders}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): HttpHeadersImpl {
        return new HttpHeadersImpl(httpHeadersFromDataView(dataView, indexStart));
    }

    public readonly httpHeaders: string;

    public constructor(httpHeaders: HttpHeaders) {
        this.httpHeaders = httpHeaders.httpHeaders;
    }
}

/** Parse from a DataView into {@link HttpHeaders}. */
export function httpHeadersFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): HttpHeaders {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const httpHeaders = $dvr.utf8s();
    return { httpHeaders };
}
