import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.object_size.xml
export interface ObjectSize {
    /** <p>Format: `uint32`</p> */
    allocatedSize: number;
    /** <p>Format: `uint32`</p> */
    currentSize: number;
}

/**
 * The fields in the above table, reading from top to bottom, are shown in the order of LSO to MSO, where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.object_size.xml | Object Size}
 */
export class ObjectSizeImpl implements ObjectSize {
    public static readonly UUID_PREFIX = 0x2ac0;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.object_size";
    public static readonly NAME = "Object Size";

    /** Parse from a DataView into {@link ObjectSize}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ObjectSizeImpl {
        return new ObjectSizeImpl(objectSizeFromDataView(dataView, indexStart));
    }

    public readonly allocatedSize: number;
    public readonly currentSize: number;

    public constructor(objectSize: ObjectSize) {
        this.allocatedSize = objectSize.allocatedSize;
        this.currentSize = objectSize.currentSize;
    }
}

/** Parse from a DataView into {@link ObjectSize}. */
export function objectSizeFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ObjectSize {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const currentSize = $dvr.uint32();
    const allocatedSize = $dvr.uint32();
    return { allocatedSize, currentSize };
}
