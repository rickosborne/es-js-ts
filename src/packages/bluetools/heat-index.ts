import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.heat_index.xml
export interface HeatIndex {
    /**
     * <p>Format: `sint8`</p>
     * <p>Unit: `org.bluetooth.unit.thermodynamic_temperature.degree_celsius`</p>
     * <p>Unit is in degrees celsius with a resolution of 1 degree Celsius</p>
     */
    heatIndex: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.heat_index.xml | Heat Index} */
export class HeatIndexImpl implements HeatIndex {
    public static readonly UUID_PREFIX = 0x2a7a;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.heat_index";
    public static readonly NAME = "Heat Index";

    /** Parse from a DataView into {@link HeatIndex}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): HeatIndexImpl {
        return new HeatIndexImpl(heatIndexFromDataView(dataView, indexStart));
    }

    public readonly heatIndex: number;

    public constructor(heatIndex: HeatIndex) {
        this.heatIndex = heatIndex.heatIndex;
    }
}

/** Parse from a DataView into {@link HeatIndex}. */
export function heatIndexFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): HeatIndex {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const heatIndex = $dvr.int8();
    return { heatIndex };
}
