import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.cycling_power_feature.xml
/** <p>The CP Feature characteristic is used to report a list of features supported by the device.</p> */
export interface CyclingPowerFeature {
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    accumulatedEnergySupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    accumulatedTorqueSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    chainLengthAdjustmentSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    chainWeightAdjustmentSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    crankLengthAdjustmentSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    crankRevolutionDataSupported: number;
    /**
     * <p>Format: `32bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                                                               |
     * | ----- | ---- | ------------------------------------------------------------------ |
     * | 0     | 1    | Pedal Power Balance Supported                                      |
     * | 1     | 1    | Accumulated Torque Supported                                       |
     * | 2     | 1    | Wheel Revolution Data Supported                                    |
     * | 3     | 1    | Crank Revolution Data Supported                                    |
     * | 4     | 1    | Extreme Magnitudes Supported                                       |
     * | 5     | 1    | Extreme Angles Supported                                           |
     * | 6     | 1    | Top and Bottom Dead Spot Angles Supported                          |
     * | 7     | 1    | Accumulated Energy Supported                                       |
     * | 8     | 1    | Offset Compensation Indicator Supported                            |
     * | 9     | 1    | Offset Compensation Supported                                      |
     * | 10    | 1    | Cycling Power Measurement Characteristic Content Masking Supported |
     * | 11    | 1    | Multiple Sensor Locations Supported                                |
     * | 12    | 1    | Crank Length Adjustment Supported                                  |
     * | 13    | 1    | Chain Length Adjustment Supported                                  |
     * | 14    | 1    | Chain Weight Adjustment Supported                                  |
     * | 15    | 1    | Span Length Adjustment Supported                                   |
     * | 16    | 1    | Sensor Measurement Context                                         |
     * | 17    | 1    | Instantaneous Measurement Direction Supported                      |
     * | 18    | 1    | Factory Calibration Date Supported                                 |
     * | 19    | 1    | Enhanced Offset Compensation Supported                             |
     * | 20    | 2    | Distribute System Support                                          |
     * | 22    | 10   | Reserved for future use                                            |
     *
     */
    cyclingPowerFeature: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    cyclingPowerMeasurementCharacteristicContentMaskingSupported: number;
    /**
     * | value | description                         |
     * | ----- | ----------------------------------- |
     * | 0     | Unspecified (legacy sensor)         |
     * | 1     | Not for use in a distributed system |
     * | 2     | Can be used in a distributed system |
     * | 3     | RFU                                 |
     */
    distributeSystemSupport: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    enhancedOffsetCompensationSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    extremeAnglesSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    extremeMagnitudesSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    factoryCalibrationDateSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    instantaneousMeasurementDirectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multipleSensorLocationsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    offsetCompensationIndicatorSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    offsetCompensationSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    pedalPowerBalanceSupported: number;
    /**
     * | value | description  |
     * | ----- | ------------ |
     * | 0     | Force based  |
     * | 1     | Torque based |
     */
    sensorMeasurementContext: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    spanLengthAdjustmentSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    topAndBottomDeadSpotAnglesSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    wheelRevolutionDataSupported: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.cycling_power_feature.xml | Cycling Power Feature} */
export class CyclingPowerFeatureImpl implements CyclingPowerFeature {
    public static readonly UUID_PREFIX = 0x2a65;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.cycling_power_feature";
    public static readonly NAME = "Cycling Power Feature";

    /** Parse from a DataView into {@link CyclingPowerFeature}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): CyclingPowerFeatureImpl {
        return new CyclingPowerFeatureImpl(cyclingPowerFeatureFromDataView(dataView, indexStart));
    }

    public readonly accumulatedEnergySupported: number;
    public readonly accumulatedTorqueSupported: number;
    public readonly chainLengthAdjustmentSupported: number;
    public readonly chainWeightAdjustmentSupported: number;
    public readonly crankLengthAdjustmentSupported: number;
    public readonly crankRevolutionDataSupported: number;
    public readonly cyclingPowerFeature: number;
    public readonly cyclingPowerMeasurementCharacteristicContentMaskingSupported: number;
    public readonly distributeSystemSupport: number;
    public readonly enhancedOffsetCompensationSupported: number;
    public readonly extremeAnglesSupported: number;
    public readonly extremeMagnitudesSupported: number;
    public readonly factoryCalibrationDateSupported: number;
    public readonly instantaneousMeasurementDirectionSupported: number;
    public readonly multipleSensorLocationsSupported: number;
    public readonly offsetCompensationIndicatorSupported: number;
    public readonly offsetCompensationSupported: number;
    public readonly pedalPowerBalanceSupported: number;
    public readonly sensorMeasurementContext: number;
    public readonly spanLengthAdjustmentSupported: number;
    public readonly topAndBottomDeadSpotAnglesSupported: number;
    public readonly wheelRevolutionDataSupported: number;

    public constructor(cyclingPowerFeature: CyclingPowerFeature) {
        this.accumulatedEnergySupported = cyclingPowerFeature.accumulatedEnergySupported;
        this.accumulatedTorqueSupported = cyclingPowerFeature.accumulatedTorqueSupported;
        this.chainLengthAdjustmentSupported = cyclingPowerFeature.chainLengthAdjustmentSupported;
        this.chainWeightAdjustmentSupported = cyclingPowerFeature.chainWeightAdjustmentSupported;
        this.crankLengthAdjustmentSupported = cyclingPowerFeature.crankLengthAdjustmentSupported;
        this.crankRevolutionDataSupported = cyclingPowerFeature.crankRevolutionDataSupported;
        this.cyclingPowerFeature = cyclingPowerFeature.cyclingPowerFeature;
        this.cyclingPowerMeasurementCharacteristicContentMaskingSupported = cyclingPowerFeature.cyclingPowerMeasurementCharacteristicContentMaskingSupported;
        this.distributeSystemSupport = cyclingPowerFeature.distributeSystemSupport;
        this.enhancedOffsetCompensationSupported = cyclingPowerFeature.enhancedOffsetCompensationSupported;
        this.extremeAnglesSupported = cyclingPowerFeature.extremeAnglesSupported;
        this.extremeMagnitudesSupported = cyclingPowerFeature.extremeMagnitudesSupported;
        this.factoryCalibrationDateSupported = cyclingPowerFeature.factoryCalibrationDateSupported;
        this.instantaneousMeasurementDirectionSupported = cyclingPowerFeature.instantaneousMeasurementDirectionSupported;
        this.multipleSensorLocationsSupported = cyclingPowerFeature.multipleSensorLocationsSupported;
        this.offsetCompensationIndicatorSupported = cyclingPowerFeature.offsetCompensationIndicatorSupported;
        this.offsetCompensationSupported = cyclingPowerFeature.offsetCompensationSupported;
        this.pedalPowerBalanceSupported = cyclingPowerFeature.pedalPowerBalanceSupported;
        this.sensorMeasurementContext = cyclingPowerFeature.sensorMeasurementContext;
        this.spanLengthAdjustmentSupported = cyclingPowerFeature.spanLengthAdjustmentSupported;
        this.topAndBottomDeadSpotAnglesSupported = cyclingPowerFeature.topAndBottomDeadSpotAnglesSupported;
        this.wheelRevolutionDataSupported = cyclingPowerFeature.wheelRevolutionDataSupported;
    }
}

/** Parse from a DataView into {@link CyclingPowerFeature}. */
export function cyclingPowerFeatureFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): CyclingPowerFeature {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const cyclingPowerFeature = $dvr.uint32();
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const pedalPowerBalanceSupported = cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const accumulatedTorqueSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const wheelRevolutionDataSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const crankRevolutionDataSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const extremeMagnitudesSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const extremeAnglesSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const topAndBottomDeadSpotAnglesSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const accumulatedEnergySupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const offsetCompensationIndicatorSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const offsetCompensationSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const cyclingPowerMeasurementCharacteristicContentMaskingSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_0100_0000_0000) >> 10;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multipleSensorLocationsSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0000_1000_0000_0000) >> 11;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const crankLengthAdjustmentSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0001_0000_0000_0000) >> 12;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const chainLengthAdjustmentSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0010_0000_0000_0000) >> 13;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const chainWeightAdjustmentSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_0100_0000_0000_0000) >> 14;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const spanLengthAdjustmentSupported = (cyclingPowerFeature & 0b0000_0000_0000_0000_1000_0000_0000_0000) >> 15;
    /**
     * | value | description  |
     * | ----- | ------------ |
     * | 0     | Force based  |
     * | 1     | Torque based |
     */
    const sensorMeasurementContext = (cyclingPowerFeature & 0b0000_0000_0000_0001_0000_0000_0000_0000) >> 16;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const instantaneousMeasurementDirectionSupported = (cyclingPowerFeature & 0b0000_0000_0000_0010_0000_0000_0000_0000) >> 17;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const factoryCalibrationDateSupported = (cyclingPowerFeature & 0b0000_0000_0000_0100_0000_0000_0000_0000) >> 18;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const enhancedOffsetCompensationSupported = (cyclingPowerFeature & 0b0000_0000_0000_1000_0000_0000_0000_0000) >> 19;
    /**
     * | value | description                         |
     * | ----- | ----------------------------------- |
     * | 0     | Unspecified (legacy sensor)         |
     * | 1     | Not for use in a distributed system |
     * | 2     | Can be used in a distributed system |
     * | 3     | RFU                                 |
     */
    const distributeSystemSupport = (cyclingPowerFeature & 0b0000_0000_0011_0000_0000_0000_0000_0000) >> 20;
    return { accumulatedEnergySupported, accumulatedTorqueSupported, chainLengthAdjustmentSupported, chainWeightAdjustmentSupported, crankLengthAdjustmentSupported, crankRevolutionDataSupported, cyclingPowerFeature, cyclingPowerMeasurementCharacteristicContentMaskingSupported, distributeSystemSupport, enhancedOffsetCompensationSupported, extremeAnglesSupported, extremeMagnitudesSupported, factoryCalibrationDateSupported, instantaneousMeasurementDirectionSupported, multipleSensorLocationsSupported, offsetCompensationIndicatorSupported, offsetCompensationSupported, pedalPowerBalanceSupported, sensorMeasurementContext, spanLengthAdjustmentSupported, topAndBottomDeadSpotAnglesSupported, wheelRevolutionDataSupported };
}
