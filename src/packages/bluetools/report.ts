import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.report.xml
/**
 * <p>The Report characteristic is used to exchange data between a HID Device and a HID Host.</p>
 * <p>The Report characteristic value contains Input Report, Output Report or Feature Report data to be transferred between the HID Device and HID Host.</p>
 */
// eslint-disable-next-line no-shadow
export interface Report {
    /** <p>Format: `uint8`</p> */
    reportValue: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.report.xml | Report} */
export class ReportImpl implements Report {
    public static readonly UUID_PREFIX = 0x2a4d;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.report";
    public static readonly NAME = "Report";

    /** Parse from a DataView into {@link Report}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ReportImpl {
        return new ReportImpl(reportFromDataView(dataView, indexStart));
    }

    public readonly reportValue: number;

    public constructor(report: Report) {
        this.reportValue = report.reportValue;
    }
}

/** Parse from a DataView into {@link Report}. */
export function reportFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Report {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const reportValue = $dvr.uint8();
    return { reportValue };
}
