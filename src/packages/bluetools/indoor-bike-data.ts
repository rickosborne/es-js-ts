import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.indoor_bike_data.xml
/** <p>The Indoor Bike Data characteristic is used to send training-related data to the Client from an indoor bike (Server).</p> */
export interface IndoorBikeData {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.angular_velocity.revolution_per_minute`</p>
     * <p>1/minute with a resolution of 0.5</p>
     */
    averageCadence?: number | undefined;
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.power.watt`</p>
     * <p>Watts with a resolution of 1</p>
     */
    averagePower?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.kilometre_per_hour`</p>
     * <p>Kilometer per hour with a resolution of 0.01</p>
     */
    averageSpeed?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     * <p>Second with a resolution of 1</p>
     */
    elapsedTime?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.energy.kilogram_calorie`</p>
     * <p>Kilo Calorie with a resolution of 1</p>
     */
    energyPerHour?: number | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.energy.kilogram_calorie`</p>
     * <p>Kilo Calorie with a resolution of 1</p>
     */
    energyPerMinute?: number | undefined;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | req | name                          |
     * | ----- | ---- | --- | ----------------------------- |
     * | 0     | 1    | C1  | More Data                     |
     * | 1     | 1    | C2  | Instantaneous Cadence present |
     * | 2     | 1    | C3  | Average Speed present         |
     * | 3     | 1    | C4  | Average Candence present      |
     * | 4     | 1    | C5  | Total Distance Present        |
     * | 5     | 1    | C6  | Resistance Level present      |
     * | 6     | 1    | C7  | Instantaneous Power present   |
     * | 7     | 1    | C8  | Average Power present         |
     * | 8     | 1    | C9  | Expended Energy present       |
     * | 9     | 1    | C10 | Heart Rate present            |
     * | 10    | 1    | C11 | Metabolic Equivalent present  |
     * | 11    | 1    | C12 | Elapsed Time present          |
     * | 12    | 1    | C13 | Remaining Time present        |
     * | 13    | 3    |     | Reserved for future use       |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Beats per minute with a resolution of 1</p>
     */
    heartRate?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.angular_velocity.revolution_per_minute`</p>
     * <p>1/minute with a resolution of 0.5</p>
     */
    instantaneousCadence?: number | undefined;
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.power.watt`</p>
     * <p>Watts with a resolution of 1</p>
     */
    instantaneousPower?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.kilometre_per_hour`</p>
     * <p>Kilometer per hour with a resolution of 0.01</p>
     */
    instantaneousSpeed?: number | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.metabolic_equivalent`</p>
     * <p>Metabolic Equivalent with a resolution of 0.1</p>
     */
    metabolicEquivalent?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     * <p>Second with a resolution of 1</p>
     */
    remainingTime?: number | undefined;
    /**
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unitless with a resolution of 1</p>
     */
    resistanceLevel?: number | undefined;
    /**
     * <p>Format: `uint24`</p>
     * <p>Unit: `org.bluetooth.unit.length.metre`</p>
     * <p>Meters with a resolution of 1</p>
     */
    totalDistance?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.energy.kilogram_calorie`</p>
     * <p>Kilo Calorie with a resolution of 1</p>
     */
    totalEnergy?: number | undefined;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.indoor_bike_data.xml | Indoor Bike Data} */
export class IndoorBikeDataImpl implements IndoorBikeData {
    public static readonly UUID_PREFIX = 0x2ad2;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.indoor_bike_data";
    public static readonly NAME = "Indoor Bike Data";

    /** Parse from a DataView into {@link IndoorBikeData}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): IndoorBikeDataImpl {
        return new IndoorBikeDataImpl(indoorBikeDataFromDataView(dataView, indexStart));
    }

    public readonly averageCadence?: number | undefined;
    public readonly averagePower?: number | undefined;
    public readonly averageSpeed?: number | undefined;
    public readonly elapsedTime?: number | undefined;
    public readonly energyPerHour?: number | undefined;
    public readonly energyPerMinute?: number | undefined;
    public readonly flags: number;
    public readonly heartRate?: number | undefined;
    public readonly instantaneousCadence?: number | undefined;
    public readonly instantaneousPower?: number | undefined;
    public readonly instantaneousSpeed?: number | undefined;
    public readonly metabolicEquivalent?: number | undefined;
    public readonly remainingTime?: number | undefined;
    public readonly resistanceLevel?: number | undefined;
    public readonly totalDistance?: number | undefined;
    public readonly totalEnergy?: number | undefined;

    public constructor(indoorBikeData: IndoorBikeData) {
        this.averageCadence = indoorBikeData.averageCadence;
        this.averagePower = indoorBikeData.averagePower;
        this.averageSpeed = indoorBikeData.averageSpeed;
        this.elapsedTime = indoorBikeData.elapsedTime;
        this.energyPerHour = indoorBikeData.energyPerHour;
        this.energyPerMinute = indoorBikeData.energyPerMinute;
        this.flags = indoorBikeData.flags;
        this.heartRate = indoorBikeData.heartRate;
        this.instantaneousCadence = indoorBikeData.instantaneousCadence;
        this.instantaneousPower = indoorBikeData.instantaneousPower;
        this.instantaneousSpeed = indoorBikeData.instantaneousSpeed;
        this.metabolicEquivalent = indoorBikeData.metabolicEquivalent;
        this.remainingTime = indoorBikeData.remainingTime;
        this.resistanceLevel = indoorBikeData.resistanceLevel;
        this.totalDistance = indoorBikeData.totalDistance;
        this.totalEnergy = indoorBikeData.totalEnergy;
    }
}

/** Parse from a DataView into {@link IndoorBikeData}. */
export function indoorBikeDataFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): IndoorBikeData {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint16();
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     | C1  | False       |
     * | 1     |     | True        |
     * <p>Requirements: C1</p>
     */
    const moreData = !!(flags & 0b0000_0000_0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C2  | True        |
     * <p>Requirements: C2</p>
     */
    const instantaneousCadencePresent = !!((flags & 0b0000_0000_0000_0010) >> 1);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C3  | True        |
     * <p>Requirements: C3</p>
     */
    const averageSpeedPresent = !!((flags & 0b0000_0000_0000_0100) >> 2);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C4  | True        |
     * <p>Requirements: C4</p>
     */
    const averageCandencePresent = !!((flags & 0b0000_0000_0000_1000) >> 3);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C5  | True        |
     * <p>Requirements: C5</p>
     */
    const totalDistancePresent = !!((flags & 0b0000_0000_0001_0000) >> 4);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C6  | True        |
     * <p>Requirements: C6</p>
     */
    const resistanceLevelPresent = !!((flags & 0b0000_0000_0010_0000) >> 5);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C7  | True        |
     * <p>Requirements: C7</p>
     */
    const instantaneousPowerPresent = !!((flags & 0b0000_0000_0100_0000) >> 6);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C8  | True        |
     * <p>Requirements: C8</p>
     */
    const averagePowerPresent = !!((flags & 0b0000_0000_1000_0000) >> 7);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C9  | True        |
     * <p>Requirements: C9</p>
     */
    const expendedEnergyPresent = !!((flags & 0b0000_0001_0000_0000) >> 8);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C10 | True        |
     * <p>Requirements: C10</p>
     */
    const heartRatePresent = !!((flags & 0b0000_0010_0000_0000) >> 9);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C11 | True        |
     * <p>Requirements: C11</p>
     */
    const metabolicEquivalentPresent = !!((flags & 0b0000_0100_0000_0000) >> 10);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C12 | True        |
     * <p>Requirements: C12</p>
     */
    const elapsedTimePresent = !!((flags & 0b0000_1000_0000_0000) >> 11);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C13 | True        |
     * <p>Requirements: C13</p>
     */
    const remainingTimePresent = !!((flags & 0b0001_0000_0000_0000) >> 12);
    let instantaneousSpeed: number | undefined = undefined;
    if (!moreData) {
        instantaneousSpeed = $dvr.uint16();
    }

    let averageSpeed: number | undefined = undefined;
    if (instantaneousCadencePresent) {
        averageSpeed = $dvr.uint16();
    }

    let instantaneousCadence: number | undefined = undefined;
    if (averageSpeedPresent) {
        instantaneousCadence = $dvr.uint16();
    }

    let averageCadence: number | undefined = undefined;
    if (averageCandencePresent) {
        averageCadence = $dvr.uint16();
    }

    let totalDistance: number | undefined = undefined;
    if (totalDistancePresent) {
        totalDistance = $dvr.uint24();
    }

    let resistanceLevel: number | undefined = undefined;
    if (resistanceLevelPresent) {
        resistanceLevel = $dvr.int16();
    }

    let instantaneousPower: number | undefined = undefined;
    if (instantaneousPowerPresent) {
        instantaneousPower = $dvr.int16();
    }

    let averagePower: number | undefined = undefined;
    if (averagePowerPresent) {
        averagePower = $dvr.int16();
    }

    let totalEnergy: number | undefined = undefined;
    if (expendedEnergyPresent) {
        totalEnergy = $dvr.uint16();
    }

    let energyPerHour: number | undefined = undefined;
    if (expendedEnergyPresent) {
        energyPerHour = $dvr.uint16();
    }

    let energyPerMinute: number | undefined = undefined;
    if (expendedEnergyPresent) {
        energyPerMinute = $dvr.uint8();
    }

    let heartRate: number | undefined = undefined;
    if (heartRatePresent) {
        heartRate = $dvr.uint8();
    }

    let metabolicEquivalent: number | undefined = undefined;
    if (metabolicEquivalentPresent) {
        metabolicEquivalent = $dvr.uint8();
    }

    let elapsedTime: number | undefined = undefined;
    if (elapsedTimePresent) {
        elapsedTime = $dvr.uint16();
    }

    let remainingTime: number | undefined = undefined;
    if (remainingTimePresent) {
        remainingTime = $dvr.uint16();
    }

    return { averageCadence, averagePower, averageSpeed, elapsedTime, energyPerHour, energyPerMinute, flags, heartRate, instantaneousCadence, instantaneousPower, instantaneousSpeed, metabolicEquivalent, remainingTime, resistanceLevel, totalDistance, totalEnergy };
}
