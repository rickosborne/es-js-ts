import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.three_zone_heart_rate_limits.xml
/** <p>Data structure containing the limits between the heart rate zones for the 3-zone heart rate definition (Hard, Moderate and Light).</p> */
export interface ThreeZoneHeartRateLimits {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is in beats per minute with a resolution of 1</p>
     */
    threeZoneHeartRateLimitsLightFatBurnModerateAerobicLimit: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is in beats per minute with a resolution of 1</p>
     */
    threeZoneHeartRateLimitsModerateAerobicHardAnaerobicLimit: number;
}

/**
 * The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.three_zone_heart_rate_limits.xml | Three Zone Heart Rate Limits}
 */
export class ThreeZoneHeartRateLimitsImpl implements ThreeZoneHeartRateLimits {
    public static readonly UUID_PREFIX = 0x2a94;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.three_zone_heart_rate_limits";
    public static readonly NAME = "Three Zone Heart Rate Limits";

    /** Parse from a DataView into {@link ThreeZoneHeartRateLimits}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ThreeZoneHeartRateLimitsImpl {
        return new ThreeZoneHeartRateLimitsImpl(threeZoneHeartRateLimitsFromDataView(dataView, indexStart));
    }

    public readonly threeZoneHeartRateLimitsLightFatBurnModerateAerobicLimit: number;
    public readonly threeZoneHeartRateLimitsModerateAerobicHardAnaerobicLimit: number;

    public constructor(threeZoneHeartRateLimits: ThreeZoneHeartRateLimits) {
        this.threeZoneHeartRateLimitsLightFatBurnModerateAerobicLimit = threeZoneHeartRateLimits.threeZoneHeartRateLimitsLightFatBurnModerateAerobicLimit;
        this.threeZoneHeartRateLimitsModerateAerobicHardAnaerobicLimit = threeZoneHeartRateLimits.threeZoneHeartRateLimitsModerateAerobicHardAnaerobicLimit;
    }
}

/** Parse from a DataView into {@link ThreeZoneHeartRateLimits}. */
export function threeZoneHeartRateLimitsFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ThreeZoneHeartRateLimits {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const threeZoneHeartRateLimitsLightFatBurnModerateAerobicLimit = $dvr.uint8();
    const threeZoneHeartRateLimitsModerateAerobicHardAnaerobicLimit = $dvr.uint8();
    return { threeZoneHeartRateLimitsLightFatBurnModerateAerobicLimit, threeZoneHeartRateLimitsModerateAerobicHardAnaerobicLimit };
}
