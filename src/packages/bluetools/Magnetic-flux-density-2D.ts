import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.Magnetic_flux_density_2D.xml
export interface MagneticFluxDensity2D {
    /**
     * <p>This characteristic contains measurements of magnetic flux density for two orthogonal axes: X and Y. This characteristic is composed of two fields having the same format: In order of LSO to MSO, the fields are: X-Axis, Y-Axis. 1 x 10^-7 Tesla equals 0.001 Gauss.</p>
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.magnetic_flux_density.tesla`</p>
     */
    magneticFluxDensityXAxis: number;
    /**
     * <p>This characteristic contains measurements of magnetic flux density for two orthogonal axes: X and Y. This characteristic is composed of two fields having the same format: In order of LSO to MSO, the fields are: X-Axis, Y-Axis. 1 x 10^-7 Tesla equals 0.001 Gauss.</p>
     * <p>Format: `sint16`</p>
     * <p>Unit: `org.bluetooth.unit.magnetic_flux_density.tesla`</p>
     */
    magneticFluxDensityYAxis: number;
}

/**
 * The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.Magnetic_flux_density_2D.xml | Magnetic Flux Density 2D}
 */
export class MagneticFluxDensity2DImpl implements MagneticFluxDensity2D {
    public static readonly UUID_PREFIX = 0x2aa0;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.Magnetic_flux_density_2D";
    public static readonly NAME = "Magnetic Flux Density - 2D";

    /** Parse from a DataView into {@link MagneticFluxDensity2D}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): MagneticFluxDensity2DImpl {
        return new MagneticFluxDensity2DImpl(magneticFluxDensity2DFromDataView(dataView, indexStart));
    }

    public readonly magneticFluxDensityXAxis: number;
    public readonly magneticFluxDensityYAxis: number;

    public constructor(magneticFluxDensity2D: MagneticFluxDensity2D) {
        this.magneticFluxDensityXAxis = magneticFluxDensity2D.magneticFluxDensityXAxis;
        this.magneticFluxDensityYAxis = magneticFluxDensity2D.magneticFluxDensityYAxis;
    }
}

/** Parse from a DataView into {@link MagneticFluxDensity2D}. */
export function magneticFluxDensity2DFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): MagneticFluxDensity2D {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const magneticFluxDensityXAxis = $dvr.int16();
    const magneticFluxDensityYAxis = $dvr.int16();
    return { magneticFluxDensityXAxis, magneticFluxDensityYAxis };
}
