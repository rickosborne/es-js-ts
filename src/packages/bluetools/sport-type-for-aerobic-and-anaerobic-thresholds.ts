import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.sport_type_for_aerobic_and_anaerobic_thresholds.xml
/** <p>Sport type enumeration(See note below). The values of the Sport Type for Aerobic and Anaerobic Thresholds characteristic are defined below</p> */
export interface SportTypeForAerobicAndAnaerobicThresholds {
    /**
     * <p>Format: `uint8`</p>
     * | Key | Description                 |
     * | --- | --------------------------- |
     * | 0   | Unspecified                 |
     * | 1   | Running (Treadmill)         |
     * | 2   | Cycling (Ergometer)         |
     * | 3   | Rowing (Ergometer)          |
     * | 4   | Cross Training (Elliptical) |
     * | 5   | Climbing                    |
     * | 6   | Skiing                      |
     * | 7   | Skating                     |
     * | 8   | Arm exercising              |
     * | 9   | Lower body exercising       |
     * | 10  | Upper body exercising       |
     * | 11  | Whole body exercising       |
     *
     * <p>Reserved for future use: 12 to 225</p>
     */
    sportTypeForAerobicAndAnaerobicThresholds: number;
}

/**
 * Aerobic Threshold and Anaerobic Threshold together with the Sport Type for Aerobic and Anaerobic Thresholds describe the metabolic thresholds of the user. The Sport Type for Aerobic and Anaerobic Thresholds identifies how the measurement was performed.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.sport_type_for_aerobic_and_anaerobic_thresholds.xml | Sport Type For Aerobic And Anaerobic Thresholds}
 */
export class SportTypeForAerobicAndAnaerobicThresholdsImpl implements SportTypeForAerobicAndAnaerobicThresholds {
    public static readonly UUID_PREFIX = 0x2a93;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.sport_type_for_aerobic_and_anaerobic_thresholds";
    public static readonly NAME = "Sport Type for Aerobic and Anaerobic Thresholds";

    /** Parse from a DataView into {@link SportTypeForAerobicAndAnaerobicThresholds}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): SportTypeForAerobicAndAnaerobicThresholdsImpl {
        return new SportTypeForAerobicAndAnaerobicThresholdsImpl(sportTypeForAerobicAndAnaerobicThresholdsFromDataView(dataView, indexStart));
    }

    public readonly sportTypeForAerobicAndAnaerobicThresholds: number;

    public constructor(sportTypeForAerobicAndAnaerobicThresholds: SportTypeForAerobicAndAnaerobicThresholds) {
        this.sportTypeForAerobicAndAnaerobicThresholds = sportTypeForAerobicAndAnaerobicThresholds.sportTypeForAerobicAndAnaerobicThresholds;
    }
}

/** Parse from a DataView into {@link SportTypeForAerobicAndAnaerobicThresholds}. */
export function sportTypeForAerobicAndAnaerobicThresholdsFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): SportTypeForAerobicAndAnaerobicThresholds {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | description                 |
     * | ----- | --------------------------- |
     * | 0     | Unspecified                 |
     * | 1     | Running (Treadmill)         |
     * | 2     | Cycling (Ergometer)         |
     * | 3     | Rowing (Ergometer)          |
     * | 4     | Cross Training (Elliptical) |
     * | 5     | Climbing                    |
     * | 6     | Skiing                      |
     * | 7     | Skating                     |
     * | 8     | Arm exercising              |
     * | 9     | Lower body exercising       |
     * | 10    | Upper body exercising       |
     * | 11    | Whole body exercising       |
     */
    const sportTypeForAerobicAndAnaerobicThresholds = $dvr.uint8();
    return { sportTypeForAerobicAndAnaerobicThresholds };
}
