import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.pressure.xml
export interface Pressure {
    /**
     * <p>Format: `uint32`</p>
     * <p>Unit: `org.bluetooth.unit.pressure.pascal`</p>
     * <p>Unit is in pascals with a resolution of 0.1 Pa</p>
     */
    pressure: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.pressure.xml | Pressure} */
export class PressureImpl implements Pressure {
    public static readonly UUID_PREFIX = 0x2a6d;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.pressure";
    public static readonly NAME = "Pressure";

    /** Parse from a DataView into {@link Pressure}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): PressureImpl {
        return new PressureImpl(pressureFromDataView(dataView, indexStart));
    }

    public readonly pressure: number;

    public constructor(pressure: Pressure) {
        this.pressure = pressure.pressure;
    }
}

/** Parse from a DataView into {@link Pressure}. */
export function pressureFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Pressure {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const pressure = $dvr.uint32();
    return { pressure };
}
