import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type Digital, DigitalImpl } from "./digital.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.value_trigger_setting.xml
/** <p>The value of the descriptor has two parts. Part one is a condition field and occupies one octet, and part two is the comparison value (trigger point) that the characteristic value is checked against.</p> */
export interface ValueTriggerSetting {
    /**
     * <p>Format: `uint8`</p>
     * | Key | Req. | Description     |
     * | --- | ---- | --------------- |
     * | 0   |      | None            |
     * | 1   | C2   | Analog          |
     * | 2   | C2   | Analog          |
     * | 3   | C2   | Analog          |
     * | 4   | C3   | Bit Mask        |
     * | 5   | C4   | Analog Interval |
     * | 6   | C4   | Analog Interval |
     * | 7   |      | None            |
     *
     * <p>Reserved for future use: 8 to 255</p>
     */
    condition: number;
    /** <p>Format: `uint16`</p> */
    valueAnalog?: number | undefined;
    /**
     * <p>Format: `uint32`</p>
     * <p>Analog One (uint16), Analog Two (uint16)</p>
     */
    valueAnalogInterval?: number | undefined;
    valueBitMask?: Digital | undefined;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.value_trigger_setting.xml | Value Trigger Setting} */
export class ValueTriggerSettingImpl implements ValueTriggerSetting {
    public static readonly UUID_PREFIX = 0x290a;
    public static readonly TYPE_NAME = "org.bluetooth.descriptor.value_trigger_setting";
    public static readonly NAME = "Value Trigger Setting";

    /** Parse from a DataView into {@link ValueTriggerSetting}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ValueTriggerSettingImpl {
        return new ValueTriggerSettingImpl(valueTriggerSettingFromDataView(dataView, indexStart));
    }

    public readonly condition: number;
    public readonly valueAnalog?: number | undefined;
    public readonly valueAnalogInterval?: number | undefined;
    public readonly valueBitMask?: Digital | undefined;

    public constructor(valueTriggerSetting: ValueTriggerSetting) {
        this.condition = valueTriggerSetting.condition;
        this.valueAnalog = valueTriggerSetting.valueAnalog;
        this.valueAnalogInterval = valueTriggerSetting.valueAnalogInterval;
        this.valueBitMask = valueTriggerSetting.valueBitMask;
    }
}

/** Parse from a DataView into {@link ValueTriggerSetting}. */
export function valueTriggerSettingFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ValueTriggerSetting {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | req | description     |
     * | ----- | --- | --------------- |
     * | 0     |     | None            |
     * | 1     | C2  | Analog          |
     * | 2     | C2  | Analog          |
     * | 3     | C2  | Analog          |
     * | 4     | C3  | Bit Mask        |
     * | 5     | C4  | Analog Interval |
     * | 6     | C4  | Analog Interval |
     * | 7     |     | None            |
     */
    /** <p>Requirements: C2, C3, C4</p> */
    const condition = $dvr.uint8();
    let valueAnalog: number | undefined = undefined;
    if (condition === 3) {
        valueAnalog = $dvr.uint16();
    }

    let valueBitMask: Digital | undefined = undefined;
    if (condition === 4) {
        valueBitMask = DigitalImpl.fromDataView($dvr);
    }

    let valueAnalogInterval: number | undefined = undefined;
    if (condition === 6) {
        valueAnalogInterval = $dvr.uint32();
    }

    return { condition, valueAnalog, valueAnalogInterval, valueBitMask };
}
