import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type BloodPressureMeasurement, BloodPressureMeasurementImpl } from "./blood-pressure-measurement.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.intermediate_cuff_pressure.xml
/** <p>This characteristic has the same format as the Blood Pressure Measurement characteristic. However, due to a different context, the Blood Pressure Measurement Compound Value field becomes the Intermediate Cuff Pressure Compound Value field, the Systolic sub-field becomes the Current Cuff Pressure sub-field and the Diastolic and MAP fields are unused.</p> */
export interface IntermediateCuffPressure {
    intermediateCuffPressure: BloodPressureMeasurement;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.intermediate_cuff_pressure.xml | Intermediate Cuff Pressure} */
export class IntermediateCuffPressureImpl implements IntermediateCuffPressure {
    public static readonly UUID_PREFIX = 0x2a36;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.intermediate_cuff_pressure";
    public static readonly NAME = "Intermediate Cuff Pressure";

    /** Parse from a DataView into {@link IntermediateCuffPressure}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): IntermediateCuffPressureImpl {
        return new IntermediateCuffPressureImpl(intermediateCuffPressureFromDataView(dataView, indexStart));
    }

    public readonly intermediateCuffPressure: BloodPressureMeasurement;

    public constructor(intermediateCuffPressure: IntermediateCuffPressure) {
        this.intermediateCuffPressure = intermediateCuffPressure.intermediateCuffPressure;
    }
}

/** Parse from a DataView into {@link IntermediateCuffPressure}. */
export function intermediateCuffPressureFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): IntermediateCuffPressure {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const intermediateCuffPressure = BloodPressureMeasurementImpl.fromDataView($dvr);
    return { intermediateCuffPressure };
}
