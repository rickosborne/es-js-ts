import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type TimeSource, TimeSourceImpl } from "./time-source.js";
import { type TimeAccuracy, TimeAccuracyImpl } from "./time-accuracy.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.reference_time_information.xml
export interface ReferenceTimeInformation {
    accuracy: TimeAccuracy;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.time.day`</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 254</p>
     */
    daysSinceUpdate: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.time.hour`</p>
     * <p>If Days Since Update = 255, then Hours Since Update shall also be set to 255</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 23</p>
     */
    hoursSinceUpdate: number;
    source: TimeSource;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.reference_time_information.xml | Reference Time Information} */
export class ReferenceTimeInformationImpl implements ReferenceTimeInformation {
    public static readonly UUID_PREFIX = 0x2a14;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.reference_time_information";
    public static readonly NAME = "Reference Time Information";

    /** Parse from a DataView into {@link ReferenceTimeInformation}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ReferenceTimeInformationImpl {
        return new ReferenceTimeInformationImpl(referenceTimeInformationFromDataView(dataView, indexStart));
    }

    public readonly accuracy: TimeAccuracy;
    public readonly daysSinceUpdate: number;
    public readonly hoursSinceUpdate: number;
    public readonly source: TimeSource;

    public constructor(referenceTimeInformation: ReferenceTimeInformation) {
        this.accuracy = referenceTimeInformation.accuracy;
        this.daysSinceUpdate = referenceTimeInformation.daysSinceUpdate;
        this.hoursSinceUpdate = referenceTimeInformation.hoursSinceUpdate;
        this.source = referenceTimeInformation.source;
    }
}

/** Parse from a DataView into {@link ReferenceTimeInformation}. */
export function referenceTimeInformationFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ReferenceTimeInformation {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const source = TimeSourceImpl.fromDataView($dvr);
    const accuracy = TimeAccuracyImpl.fromDataView($dvr);
    const daysSinceUpdate = $dvr.uint8();
    const hoursSinceUpdate = $dvr.uint8();
    return { accuracy, daysSinceUpdate, hoursSinceUpdate, source };
}
