import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.blood_pressure_measurement.xml
/** <p>The Blood Pressure Measurement characteristic is a variable length structure containing a Flags field, a Blood Pressure Measurement Compound Value field, and contains additional fields such as Time Stamp, Pulse Rate and User ID as determined by the contents of the Flags field.</p> */
export interface BloodPressureMeasurement {
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.pressure.pascal`</p>
     * <p>C2: Field exists if the key of bit 0 of the Flags field is set to 1</p>
     */
    bloodPressureMeasurementCompoundValueDiastolicKPa?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.pressure.millimetre_of_mercury`</p>
     * <p>C1: Field exists if the key of bit 0 of the Flags field is set to 0</p>
     */
    bloodPressureMeasurementCompoundValueDiastolicMmHg?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.pressure.pascal`</p>
     * <p>C2: Field exists if the key of bit 0 of the Flags field is set to 1</p>
     */
    bloodPressureMeasurementCompoundValueMeanArterialPressureKPa?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.pressure.millimetre_of_mercury`</p>
     * <p>C1: Field exists if the key of bit 0 of the Flags field is set to 0</p>
     */
    bloodPressureMeasurementCompoundValueMeanArterialPressureMmHg?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.pressure.pascal`</p>
     * <p>C2: Field exists if the key of bit 0 of the Flags field is set to 1</p>
     */
    bloodPressureMeasurementCompoundValueSystolicKPa?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.pressure.millimetre_of_mercury`</p>
     * <p>C1: Field exists if the key of bit 0 of the Flags field is set to 0</p>
     */
    bloodPressureMeasurementCompoundValueSystolicMmHg?: number | undefined;
    /**
     * | value | description                      |
     * | ----- | -------------------------------- |
     * | 0     | No body movement                 |
     * | 1     | Body movement during measurement |
     */
    bodyMovementDetectionFlag: number;
    /**
     * | value | description        |
     * | ----- | ------------------ |
     * | 0     | Cuff fits properly |
     * | 1     | Cuff too loose     |
     */
    cuffFitDetectionFlag: number;
    /**
     * <p>Format: `8bit`</p>
     * <p>These flags define which data fields are present in the Characteristic value</p>
     *
     * Bit field:
     *
     * | index | size | req    | name                      |
     * | ----- | ---- | ------ | ------------------------- |
     * | 0     | 1    | C1, C2 | Blood Pressure Units Flag |
     * | 1     | 1    | C3     | Time Stamp Flag           |
     * | 2     | 1    | C4     | Pulse Rate Flag           |
     * | 3     | 1    | C5     | User ID Flag              |
     * | 4     | 1    | C6     | Measurement Status Flag   |
     * | 0     | 0    |        | Reserved for future use   |
     *
     */
    flags: number;
    /**
     * | value | description                 |
     * | ----- | --------------------------- |
     * | 0     | No irregular pulse detected |
     * | 1     | Irregular pulse detected    |
     */
    irregularPulseDetectionFlag: number;
    /**
     * | value | description                   |
     * | ----- | ----------------------------- |
     * | 0     | Proper measurement position   |
     * | 1     | Improper measurement position |
     */
    measurementPositionDetectionFlag: number;
    /**
     * <p>Format: `16bit`</p>
     * <p>C6: Field exists if the key of bit 4 of the Flags field is set to 1</p>
     *
     * Bit field:
     *
     * | index | size | name                                |
     * | ----- | ---- | ----------------------------------- |
     * | 0     | 1    | Body Movement Detection Flag        |
     * | 1     | 1    | Cuff Fit Detection Flag             |
     * | 2     | 1    | Irregular Pulse Detection Flag      |
     * | 3     | 2    | Pulse Rate Range Detection Flags    |
     * | 5     | 1    | Measurement Position Detection Flag |
     * | 0     | 0    | Reserved for future use             |
     *
     */
    measurementStatus: number;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>C4: Field exists if the key of bit 2 of the Flags field is set to 1</p>
     */
    pulseRate?: number | undefined;
    /**
     * | value | description                         |
     * | ----- | ----------------------------------- |
     * | 0     | Pulse rate is within the range      |
     * | 1     | Pulse rate exceeds upper limit      |
     * | 2     | Pulse rate is less than lower limit |
     */
    pulseRateRangeDetectionFlags: number;
    /** <p>C3: Field exists if the key of bit 1 of the Flags field is set to 1</p> */
    timeStamp?: DateTime | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>C5: Field exists if the key of bit 3 of the Flags field is set to 1</p>
     * | Key | Description  |
     * | --- | ------------ |
     * | 255 | Unknown User |
     *
     */
    userID?: number | undefined;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.blood_pressure_measurement.xml | Blood Pressure Measurement} */
export class BloodPressureMeasurementImpl implements BloodPressureMeasurement {
    public static readonly UUID_PREFIX = 0x2a35;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.blood_pressure_measurement";
    public static readonly NAME = "Blood Pressure Measurement";

    /** Parse from a DataView into {@link BloodPressureMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): BloodPressureMeasurementImpl {
        return new BloodPressureMeasurementImpl(bloodPressureMeasurementFromDataView(dataView, indexStart));
    }

    public readonly bloodPressureMeasurementCompoundValueDiastolicKPa?: number | undefined;
    public readonly bloodPressureMeasurementCompoundValueDiastolicMmHg?: number | undefined;
    public readonly bloodPressureMeasurementCompoundValueMeanArterialPressureKPa?: number | undefined;
    public readonly bloodPressureMeasurementCompoundValueMeanArterialPressureMmHg?: number | undefined;
    public readonly bloodPressureMeasurementCompoundValueSystolicKPa?: number | undefined;
    public readonly bloodPressureMeasurementCompoundValueSystolicMmHg?: number | undefined;
    public readonly bodyMovementDetectionFlag: number;
    public readonly cuffFitDetectionFlag: number;
    public readonly flags: number;
    public readonly irregularPulseDetectionFlag: number;
    public readonly measurementPositionDetectionFlag: number;
    public readonly measurementStatus: number;
    public readonly pulseRate?: number | undefined;
    public readonly pulseRateRangeDetectionFlags: number;
    public readonly timeStamp?: DateTime | undefined;
    public readonly userID?: number | undefined;

    public constructor(bloodPressureMeasurement: BloodPressureMeasurement) {
        this.bloodPressureMeasurementCompoundValueDiastolicKPa = bloodPressureMeasurement.bloodPressureMeasurementCompoundValueDiastolicKPa;
        this.bloodPressureMeasurementCompoundValueDiastolicMmHg = bloodPressureMeasurement.bloodPressureMeasurementCompoundValueDiastolicMmHg;
        this.bloodPressureMeasurementCompoundValueMeanArterialPressureKPa = bloodPressureMeasurement.bloodPressureMeasurementCompoundValueMeanArterialPressureKPa;
        this.bloodPressureMeasurementCompoundValueMeanArterialPressureMmHg = bloodPressureMeasurement.bloodPressureMeasurementCompoundValueMeanArterialPressureMmHg;
        this.bloodPressureMeasurementCompoundValueSystolicKPa = bloodPressureMeasurement.bloodPressureMeasurementCompoundValueSystolicKPa;
        this.bloodPressureMeasurementCompoundValueSystolicMmHg = bloodPressureMeasurement.bloodPressureMeasurementCompoundValueSystolicMmHg;
        this.bodyMovementDetectionFlag = bloodPressureMeasurement.bodyMovementDetectionFlag;
        this.cuffFitDetectionFlag = bloodPressureMeasurement.cuffFitDetectionFlag;
        this.flags = bloodPressureMeasurement.flags;
        this.irregularPulseDetectionFlag = bloodPressureMeasurement.irregularPulseDetectionFlag;
        this.measurementPositionDetectionFlag = bloodPressureMeasurement.measurementPositionDetectionFlag;
        this.measurementStatus = bloodPressureMeasurement.measurementStatus;
        this.pulseRate = bloodPressureMeasurement.pulseRate;
        this.pulseRateRangeDetectionFlags = bloodPressureMeasurement.pulseRateRangeDetectionFlags;
        this.timeStamp = bloodPressureMeasurement.timeStamp;
        this.userID = bloodPressureMeasurement.userID;
    }
}

/** Parse from a DataView into {@link BloodPressureMeasurement}. */
export function bloodPressureMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): BloodPressureMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description                                                     |
     * | ----- | --- | --------------------------------------------------------------- |
     * | 0     | C1  | Blood pressure for Systolic, Diastolic and MAP in units of mmHg |
     * | 1     | C2  | Blood pressure for Systolic, Diastolic and MAP in units of kPa  |
     * <p>Requirements: C1, C2</p>
     */
    const bloodPressureUnitsFlag = !!(flags & 0b0000_0001);
    /**
     * | value | req | description            |
     * | ----- | --- | ---------------------- |
     * | 0     |     | Time Stamp not present |
     * | 1     | C3  | Time Stamp present     |
     * <p>Requirements: C3</p>
     */
    const timeStampFlag = !!((flags & 0b0000_0010) >> 1);
    /**
     * | value | req | description            |
     * | ----- | --- | ---------------------- |
     * | 0     |     | Pulse Rate not present |
     * | 1     | C4  | Pulse Rate present     |
     * <p>Requirements: C4</p>
     */
    const pulseRateFlag = !!((flags & 0b0000_0100) >> 2);
    /**
     * | value | req | description         |
     * | ----- | --- | ------------------- |
     * | 0     |     | User ID not present |
     * | 1     | C5  | User ID present     |
     * <p>Requirements: C5</p>
     */
    const userIDFlag = !!((flags & 0b0000_1000) >> 3);
    /**
     * | value | req | description                    |
     * | ----- | --- | ------------------------------ |
     * | 0     |     | Measurement Status not present |
     * | 1     | C6  | Measurement Status present     |
     * <p>Requirements: C6</p>
     */
    const measurementStatusFlag = !!((flags & 0b0001_0000) >> 4);
    let bloodPressureMeasurementCompoundValueSystolicMmHg: number | undefined = undefined;
    if (!bloodPressureUnitsFlag) {
        bloodPressureMeasurementCompoundValueSystolicMmHg = $dvr.float16();
    }

    let bloodPressureMeasurementCompoundValueDiastolicMmHg: number | undefined = undefined;
    if (!bloodPressureUnitsFlag) {
        bloodPressureMeasurementCompoundValueDiastolicMmHg = $dvr.float16();
    }

    let bloodPressureMeasurementCompoundValueMeanArterialPressureMmHg: number | undefined = undefined;
    if (!bloodPressureUnitsFlag) {
        bloodPressureMeasurementCompoundValueMeanArterialPressureMmHg = $dvr.float16();
    }

    let bloodPressureMeasurementCompoundValueSystolicKPa: number | undefined = undefined;
    if (bloodPressureUnitsFlag) {
        bloodPressureMeasurementCompoundValueSystolicKPa = $dvr.float16();
    }

    let bloodPressureMeasurementCompoundValueDiastolicKPa: number | undefined = undefined;
    if (bloodPressureUnitsFlag) {
        bloodPressureMeasurementCompoundValueDiastolicKPa = $dvr.float16();
    }

    let bloodPressureMeasurementCompoundValueMeanArterialPressureKPa: number | undefined = undefined;
    if (bloodPressureUnitsFlag) {
        bloodPressureMeasurementCompoundValueMeanArterialPressureKPa = $dvr.float16();
    }

    let timeStamp: DateTime | undefined = undefined;
    if (timeStampFlag) {
        timeStamp = DateTimeImpl.fromDataView($dvr);
    }

    let pulseRate: number | undefined = undefined;
    if (pulseRateFlag) {
        pulseRate = $dvr.float16();
    }

    /** */
    /**
     * | value | description  |
     * | ----- | ------------ |
     * | 255   | Unknown User |
     */
    let userID: number | undefined = undefined;
    if (userIDFlag) {
        userID = $dvr.uint8();
    }

    let measurementStatus: number = 0;
    if (measurementStatusFlag) {
        measurementStatus = $dvr.uint16();
    }

    /**
     * | value | description                      |
     * | ----- | -------------------------------- |
     * | 0     | No body movement                 |
     * | 1     | Body movement during measurement |
     */
    const bodyMovementDetectionFlag = measurementStatus & 0b0000_0000_0000_0001;
    /**
     * | value | description        |
     * | ----- | ------------------ |
     * | 0     | Cuff fits properly |
     * | 1     | Cuff too loose     |
     */
    const cuffFitDetectionFlag = (measurementStatus & 0b0000_0000_0000_0010) >> 1;
    /**
     * | value | description                 |
     * | ----- | --------------------------- |
     * | 0     | No irregular pulse detected |
     * | 1     | Irregular pulse detected    |
     */
    const irregularPulseDetectionFlag = (measurementStatus & 0b0000_0000_0000_0100) >> 2;
    /**
     * | value | description                         |
     * | ----- | ----------------------------------- |
     * | 0     | Pulse rate is within the range      |
     * | 1     | Pulse rate exceeds upper limit      |
     * | 2     | Pulse rate is less than lower limit |
     */
    const pulseRateRangeDetectionFlags = (measurementStatus & 0b0000_0000_0001_1000) >> 3;
    /**
     * | value | description                   |
     * | ----- | ----------------------------- |
     * | 0     | Proper measurement position   |
     * | 1     | Improper measurement position |
     */
    const measurementPositionDetectionFlag = (measurementStatus & 0b0000_0000_0010_0000) >> 5;
    return { bloodPressureMeasurementCompoundValueDiastolicKPa, bloodPressureMeasurementCompoundValueDiastolicMmHg, bloodPressureMeasurementCompoundValueMeanArterialPressureKPa, bloodPressureMeasurementCompoundValueMeanArterialPressureMmHg, bloodPressureMeasurementCompoundValueSystolicKPa, bloodPressureMeasurementCompoundValueSystolicMmHg, bodyMovementDetectionFlag, cuffFitDetectionFlag, flags, irregularPulseDetectionFlag, measurementPositionDetectionFlag, measurementStatus, pulseRate, pulseRateRangeDetectionFlags, timeStamp, userID };
}
