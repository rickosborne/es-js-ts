import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.irradiance.xml
export interface Irradiance {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.irradiance.watt_per_square_metre`</p>
     * <p>Unit is in watt per square meter with a resolution of 0.1 W/m^2</p>
     */
    irradiance: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.irradiance.xml | Irradiance} */
export class IrradianceImpl implements Irradiance {
    public static readonly UUID_PREFIX = 0x2a77;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.irradiance";
    public static readonly NAME = "Irradiance";

    /** Parse from a DataView into {@link Irradiance}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): IrradianceImpl {
        return new IrradianceImpl(irradianceFromDataView(dataView, indexStart));
    }

    public readonly irradiance: number;

    public constructor(irradiance: Irradiance) {
        this.irradiance = irradiance.irradiance;
    }
}

/** Parse from a DataView into {@link Irradiance}. */
export function irradianceFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Irradiance {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const irradiance = $dvr.uint16();
    return { irradiance };
}
