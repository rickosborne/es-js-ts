import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.gatt.characteristic_aggregate_format.xml
/**
 * <p>The Characteristic Aggregate Format descriptor defines the format of an aggregated Characteristic Value.</p>
 * <p>If 3 Characteristic Presentation Format declarations exist at Attribute Handles 0x40, 0x50 and 0x60, the Characteris Aggregate Format Value is 0x405060.</p>
 * <p>Only one Characteristic Aggregate Format descriptor exists in a characteristic definition. This descriptor consists of a list of Attribute Handles pointing to Characteristic Presentation Format declarations. This descriptor is read only and does not require authentication or authorization. The list of Attribute Handles is the concatenation of multiple 16-bit Attribute Handle values into a single Attribute Value. If more than one Characteristic Presentation Format declarations exist, then there is one Characteristic Aggregate Format declaration. However, a Characteristic Aggregate Format descriptor can be present even if there aren't any Presentation Format descriptors in the characteristic definition. The order of the Attribute Handles in the list is significant.</p>
 */
export interface GattCharacteristicAggregateFormat {
    /** <p>Format: `uint16`</p> */
    listOfHandles: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.gatt.characteristic_aggregate_format.xml | Gatt Characteristic Aggregate Format} */
export class GattCharacteristicAggregateFormatImpl implements GattCharacteristicAggregateFormat {
    public static readonly UUID_PREFIX = 0x2905;
    public static readonly TYPE_NAME = "org.bluetooth.descriptor.gatt.characteristic_aggregate_format";
    public static readonly NAME = "Characteristic Aggregate Format";

    /** Parse from a DataView into {@link GattCharacteristicAggregateFormat}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GattCharacteristicAggregateFormatImpl {
        return new GattCharacteristicAggregateFormatImpl(gattCharacteristicAggregateFormatFromDataView(dataView, indexStart));
    }

    public readonly listOfHandles: number;

    public constructor(gattCharacteristicAggregateFormat: GattCharacteristicAggregateFormat) {
        this.listOfHandles = gattCharacteristicAggregateFormat.listOfHandles;
    }
}

/** Parse from a DataView into {@link GattCharacteristicAggregateFormat}. */
export function gattCharacteristicAggregateFormatFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GattCharacteristicAggregateFormat {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const listOfHandles = $dvr.uint16();
    return { listOfHandles };
}
