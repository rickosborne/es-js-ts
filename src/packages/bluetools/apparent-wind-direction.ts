import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.apparent_wind_direction.xml
export interface ApparentWindDirection {
    /**
     * <p>The apparent wind is the wind experienced by an observer in motion and is the relative velocity of the wind in relation to the observer. For example, the apparent wind direction on-board a boat is given in degrees relative to the heading of the boat. Wind direction is reported by the direction from which it appears to originate. For example, an apparent wind coming from a direction that is 45 degrees clockwise relative to the heading of the observer is given as 45 degrees; one that is from a direction 45 degrees anti-clockwise relative to the heading of the observer is given as 315 degrees.</p>
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.plane_angle.degree`</p>
     * <p>Unit is in degrees with a resolution of 0.01 degrees</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 359.99</p>
     */
    apparentWindDirection: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.apparent_wind_direction.xml | Apparent Wind Direction} */
export class ApparentWindDirectionImpl implements ApparentWindDirection {
    public static readonly UUID_PREFIX = 0x2a73;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.apparent_wind_direction";
    public static readonly NAME = "Apparent Wind Direction";

    /** Parse from a DataView into {@link ApparentWindDirection}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ApparentWindDirectionImpl {
        return new ApparentWindDirectionImpl(apparentWindDirectionFromDataView(dataView, indexStart));
    }

    public readonly apparentWindDirection: number;

    public constructor(apparentWindDirection: ApparentWindDirection) {
        this.apparentWindDirection = apparentWindDirection.apparentWindDirection;
    }
}

/** Parse from a DataView into {@link ApparentWindDirection}. */
export function apparentWindDirectionFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ApparentWindDirection {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const apparentWindDirection = $dvr.uint16();
    return { apparentWindDirection };
}
