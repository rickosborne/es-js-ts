import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.report_reference.xml
/** <p>Mapping information in the form of a Report ID and Report Type which maps the current parent characteristic to the Report ID(s) and Report Type (s) defined within the Report Map characteristic.</p> */
export interface ReportReference {
    /**
     * <p>Format: `uint8`</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 255</p>
     */
    reportID: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Minimum: 1</p>
     * <p>Maximum: 3</p>
     * | Key | Description    |
     * | --- | -------------- |
     * | 1   | Input Report   |
     * | 2   | Output report  |
     * | 3   | Feature Report |
     *
     * <p>Reserved for future use: 4 to 255</p>
     */
    reportType: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.descriptor.report_reference.xml | Report Reference} */
export class ReportReferenceImpl implements ReportReference {
    public static readonly UUID_PREFIX = 0x2908;
    public static readonly TYPE_NAME = "org.bluetooth.descriptor.report_reference";
    public static readonly NAME = "Report Reference";

    /** Parse from a DataView into {@link ReportReference}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ReportReferenceImpl {
        return new ReportReferenceImpl(reportReferenceFromDataView(dataView, indexStart));
    }

    public readonly reportID: number;
    public readonly reportType: number;

    public constructor(reportReference: ReportReference) {
        this.reportID = reportReference.reportID;
        this.reportType = reportReference.reportType;
    }
}

/** Parse from a DataView into {@link ReportReference}. */
export function reportReferenceFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ReportReference {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const reportID = $dvr.uint8();
    /** */
    /**
     * | value | description    |
     * | ----- | -------------- |
     * | 1     | Input Report   |
     * | 2     | Output report  |
     * | 3     | Feature Report |
     */
    const reportType = $dvr.uint8();
    return { reportID, reportType };
}
