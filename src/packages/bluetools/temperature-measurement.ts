import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";
import { type TemperatureType, TemperatureTypeImpl } from "./temperature-type.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.temperature_measurement.xml
/**
 * <p>The Temperature Measurement characteristic is a variable length structure containing a Flags field, a Temperature Measurement Value field and, based upon the contents of the Flags field, optionally a Time Stamp field and/or a Temperature Type field.</p>
 * <p>If the value of bit 1 of the Flags field is 0 and bit 2 is 0, the structure of the Temperature Measurement characteristic consists of two fields in this order; Flags and Temperature Measurement Value.</p>
 * <p>If the value of bit 1 of the Flags field is 1 (Time Stamp) and bit 2 is 0, the structure of the Temperature Measurement characteristic consists of three fields in this order: Flags, Temperature Measurement Value and Time Stamp.</p>
 * <p>If the value of bit 1 of the Flags field is 1 and bit 2 is 1 (Time Stamp and Temperature Type), the structure of the Temperature Measurement characteristic consists of four fields in this order: Flags, Temperature Measurement Value, Time Stamp and Temperature Type.</p>
 * <p>If the value of bit 1 of the Flags field is 0 and bit 2 is 1 (Temperature Type), the structure of the Temperature Measurement characteristic consists of three fields in this order: Flags, Temperature Measurement Value and Temperature Type.</p>
 * <p>The flags is the first field sent followed by the Temperature Measurement Value.</p>
 * <p>The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet.</p>
 */
export interface TemperatureMeasurement {
    /**
     * <p>Format: `8bit`</p>
     *
     * Bit field:
     *
     * | index | size | req    | name                    |
     * | ----- | ---- | ------ | ----------------------- |
     * | 0     | 1    | C1, C2 | Temperature Units Flag  |
     * | 1     | 1    | C3     | Time Stamp Flag         |
     * | 2     | 1    | C4     | Temperature Type Flag   |
     * | 0     | 0    |        | Reserved for future use |
     *
     */
    flags: number;
    /**
     * <p>Format: `FLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.thermodynamic_temperature.degree_celsius`</p>
     * <p>This field is only included if the flags bit 0 is 0.</p>
     */
    temperatureMeasurementValueCelsius?: number | undefined;
    /**
     * <p>Format: `FLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit`</p>
     * <p>This field is only included if the flags bit 0 is 1.</p>
     */
    temperatureMeasurementValueFahrenheit?: number | undefined;
    /** <p>If the flags bit 2 is set to 1 this field is included. If it is 0, this field is not included</p> */
    temperatureType?: TemperatureType | undefined;
    /** <p>If the flags bit 1 is 1 this field is included. If it is 0, this field is not included</p> */
    timeStamp?: DateTime | undefined;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.temperature_measurement.xml | Temperature Measurement} */
export class TemperatureMeasurementImpl implements TemperatureMeasurement {
    public static readonly UUID_PREFIX = 0x2a1c;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.temperature_measurement";
    public static readonly NAME = "Temperature Measurement";

    /** Parse from a DataView into {@link TemperatureMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): TemperatureMeasurementImpl {
        return new TemperatureMeasurementImpl(temperatureMeasurementFromDataView(dataView, indexStart));
    }

    public readonly flags: number;
    public readonly temperatureMeasurementValueCelsius?: number | undefined;
    public readonly temperatureMeasurementValueFahrenheit?: number | undefined;
    public readonly temperatureType?: TemperatureType | undefined;
    public readonly timeStamp?: DateTime | undefined;

    public constructor(temperatureMeasurement: TemperatureMeasurement) {
        this.flags = temperatureMeasurement.flags;
        this.temperatureMeasurementValueCelsius = temperatureMeasurement.temperatureMeasurementValueCelsius;
        this.temperatureMeasurementValueFahrenheit = temperatureMeasurement.temperatureMeasurementValueFahrenheit;
        this.temperatureType = temperatureMeasurement.temperatureType;
        this.timeStamp = temperatureMeasurement.timeStamp;
    }
}

/** Parse from a DataView into {@link TemperatureMeasurement}. */
export function temperatureMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): TemperatureMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description                                          |
     * | ----- | --- | ---------------------------------------------------- |
     * | 0     | C1  | Temperature Measurement Value in units of Celsius    |
     * | 1     | C2  | Temperature Measurement Value in units of Fahrenheit |
     * <p>Requirements: C1, C2</p>
     */
    const temperatureUnitsFlag = !!(flags & 0b0000_0001);
    /**
     * | value | req | description                  |
     * | ----- | --- | ---------------------------- |
     * | 0     |     | Time Stamp field not present |
     * | 1     | C3  | Time Stamp field present     |
     * <p>Requirements: C3</p>
     */
    const timeStampFlag = !!((flags & 0b0000_0010) >> 1);
    /**
     * | value | req | description                        |
     * | ----- | --- | ---------------------------------- |
     * | 0     |     | Temperature Type field not present |
     * | 1     | C4  | Temperature Type field present     |
     * <p>Requirements: C4</p>
     */
    const temperatureTypeFlag = !!((flags & 0b0000_0100) >> 2);
    let temperatureMeasurementValueCelsius: number | undefined = undefined;
    if (!temperatureUnitsFlag) {
        temperatureMeasurementValueCelsius = $dvr.float();
    }

    let temperatureMeasurementValueFahrenheit: number | undefined = undefined;
    if (temperatureUnitsFlag) {
        temperatureMeasurementValueFahrenheit = $dvr.float();
    }

    let timeStamp: DateTime | undefined = undefined;
    if (timeStampFlag) {
        timeStamp = DateTimeImpl.fromDataView($dvr);
    }

    let temperatureType: TemperatureType | undefined = undefined;
    if (temperatureTypeFlag) {
        temperatureType = TemperatureTypeImpl.fromDataView($dvr);
    }

    return { flags, temperatureMeasurementValueCelsius, temperatureMeasurementValueFahrenheit, temperatureType, timeStamp };
}
