import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.time_accuracy.xml
export interface TimeAccuracy {
    /**
     * <p>Format: `uint8`</p>
     * <p>Accuracy (drift) of time information in steps of 1/8 of a second (125ms) compared to a reference time source. Valid range from 0 to 253 (0s to 31.5s). A value of 254 means Accuracy is out of range (&gt; 31.5s). A value of 255 means Accuracy is unknown.</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 253</p>
     */
    accuracy: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.time_accuracy.xml | Time Accuracy} */
export class TimeAccuracyImpl implements TimeAccuracy {
    public static readonly UUID_PREFIX = 0x2a12;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.time_accuracy";
    public static readonly NAME = "Time Accuracy";

    /** Parse from a DataView into {@link TimeAccuracy}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): TimeAccuracyImpl {
        return new TimeAccuracyImpl(timeAccuracyFromDataView(dataView, indexStart));
    }

    public readonly accuracy: number;

    public constructor(timeAccuracy: TimeAccuracy) {
        this.accuracy = timeAccuracy.accuracy;
    }
}

/** Parse from a DataView into {@link TimeAccuracy}. */
export function timeAccuracyFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): TimeAccuracy {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const accuracy = $dvr.uint8();
    return { accuracy };
}
