import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.battery_level.xml
/** <p>The current charge level of a battery. 100% represents fully charged while 0% represents fully discharged.</p> */
export interface BatteryLevel {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 100</p>
     * <p>Reserved: 101 to 255</p>
     */
    level: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.battery_level.xml | Battery Level} */
export class BatteryLevelImpl implements BatteryLevel {
    public static readonly UUID_PREFIX = 0x2a19;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.battery_level";
    public static readonly NAME = "Battery Level";

    /** Parse from a DataView into {@link BatteryLevel}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): BatteryLevelImpl {
        return new BatteryLevelImpl(batteryLevelFromDataView(dataView, indexStart));
    }

    public readonly level: number;

    public constructor(batteryLevel: BatteryLevel) {
        this.level = batteryLevel.level;
    }
}

/** Parse from a DataView into {@link BatteryLevel}. */
export function batteryLevelFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): BatteryLevel {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const level = $dvr.uint8();
    return { level };
}
