import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_heart_rate_range.xml
/** <p>The Supported Heart Rate Range characteristic is used to send the supported Heart Rate range as well as the minimum Heart Rate increment supported by the Server.</p> */
export interface SupportedHeartRateRange {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Beats per minute with a resolution of 1</p>
     */
    maximumHeartRate: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Beats per minute with a resolution of 1</p>
     */
    minimumHeartRate: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Beats per minute with a resolution of 1</p>
     */
    minimumIncrement: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.supported_heart_rate_range.xml | Supported Heart Rate Range} */
export class SupportedHeartRateRangeImpl implements SupportedHeartRateRange {
    public static readonly UUID_PREFIX = 0x2ad7;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.supported_heart_rate_range";
    public static readonly NAME = "Supported Heart Rate Range";

    /** Parse from a DataView into {@link SupportedHeartRateRange}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): SupportedHeartRateRangeImpl {
        return new SupportedHeartRateRangeImpl(supportedHeartRateRangeFromDataView(dataView, indexStart));
    }

    public readonly maximumHeartRate: number;
    public readonly minimumHeartRate: number;
    public readonly minimumIncrement: number;

    public constructor(supportedHeartRateRange: SupportedHeartRateRange) {
        this.maximumHeartRate = supportedHeartRateRange.maximumHeartRate;
        this.minimumHeartRate = supportedHeartRateRange.minimumHeartRate;
        this.minimumIncrement = supportedHeartRateRange.minimumIncrement;
    }
}

/** Parse from a DataView into {@link SupportedHeartRateRange}. */
export function supportedHeartRateRangeFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): SupportedHeartRateRange {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const minimumHeartRate = $dvr.uint8();
    const maximumHeartRate = $dvr.uint8();
    const minimumIncrement = $dvr.uint8();
    return { maximumHeartRate, minimumHeartRate, minimumIncrement };
}
