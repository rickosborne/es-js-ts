import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.firmware_revision_string.xml
/** <p>The value of this characteristic is a UTF-8 string representing the firmware revision for the firmware within the device.</p> */
export interface FirmwareRevisionString {
    /** <p>Format: `utf8s`</p> */
    firmwareRevision: string;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.firmware_revision_string.xml | Firmware Revision String} */
export class FirmwareRevisionStringImpl implements FirmwareRevisionString {
    public static readonly UUID_PREFIX = 0x2a26;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.firmware_revision_string";
    public static readonly NAME = "Firmware Revision String";

    /** Parse from a DataView into {@link FirmwareRevisionString}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): FirmwareRevisionStringImpl {
        return new FirmwareRevisionStringImpl(firmwareRevisionStringFromDataView(dataView, indexStart));
    }

    public readonly firmwareRevision: string;

    public constructor(firmwareRevisionString: FirmwareRevisionString) {
        this.firmwareRevision = firmwareRevisionString.firmwareRevision;
    }
}

/** Parse from a DataView into {@link FirmwareRevisionString}. */
export function firmwareRevisionStringFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): FirmwareRevisionString {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const firmwareRevision = $dvr.utf8s();
    return { firmwareRevision };
}
