import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.glucose_feature.xml
/** <p>The Glucose Feature characteristic is used to describe the supported features of the Server. When read, the Glucose Feature characteristic returns a value that is used by a Client to determine the supported features of the Server.</p> */
export interface GlucoseFeature {
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    generalDeviceFaultSupported: number;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                                               |
     * | ----- | ---- | -------------------------------------------------- |
     * | 0     | 1    | Low Battery Detection During Measurement Supported |
     * | 1     | 1    | Sensor Malfunction Detection Supported             |
     * | 2     | 1    | Sensor Sample Size Supported                       |
     * | 3     | 1    | Sensor Strip Insertion Error Detection Supported   |
     * | 4     | 1    | Sensor Strip Type Error Detection Supported        |
     * | 5     | 1    | Sensor Result High-Low Detection Supported         |
     * | 6     | 1    | Sensor Temperature High-Low Detection Supported    |
     * | 7     | 1    | Sensor Read Interrupt Detection Supported          |
     * | 8     | 1    | General Device Fault Supported                     |
     * | 9     | 1    | Time Fault Supported                               |
     * | 10    | 1    | Multiple Bond Supported                            |
     * | 11    | 5    | Reserved for future use                            |
     *
     */
    glucoseFeature: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    lowBatteryDetectionDuringMeasurementSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multipleBondSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorMalfunctionDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorReadInterruptDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorResultHighLowDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorSampleSizeSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorStripInsertionErrorDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorStripTypeErrorDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorTemperatureHighLowDetectionSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    timeFaultSupported: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.glucose_feature.xml | Glucose Feature} */
export class GlucoseFeatureImpl implements GlucoseFeature {
    public static readonly UUID_PREFIX = 0x2a51;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.glucose_feature";
    public static readonly NAME = "Glucose Feature";

    /** Parse from a DataView into {@link GlucoseFeature}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GlucoseFeatureImpl {
        return new GlucoseFeatureImpl(glucoseFeatureFromDataView(dataView, indexStart));
    }

    public readonly generalDeviceFaultSupported: number;
    public readonly glucoseFeature: number;
    public readonly lowBatteryDetectionDuringMeasurementSupported: number;
    public readonly multipleBondSupported: number;
    public readonly sensorMalfunctionDetectionSupported: number;
    public readonly sensorReadInterruptDetectionSupported: number;
    public readonly sensorResultHighLowDetectionSupported: number;
    public readonly sensorSampleSizeSupported: number;
    public readonly sensorStripInsertionErrorDetectionSupported: number;
    public readonly sensorStripTypeErrorDetectionSupported: number;
    public readonly sensorTemperatureHighLowDetectionSupported: number;
    public readonly timeFaultSupported: number;

    public constructor(glucoseFeature: GlucoseFeature) {
        this.generalDeviceFaultSupported = glucoseFeature.generalDeviceFaultSupported;
        this.glucoseFeature = glucoseFeature.glucoseFeature;
        this.lowBatteryDetectionDuringMeasurementSupported = glucoseFeature.lowBatteryDetectionDuringMeasurementSupported;
        this.multipleBondSupported = glucoseFeature.multipleBondSupported;
        this.sensorMalfunctionDetectionSupported = glucoseFeature.sensorMalfunctionDetectionSupported;
        this.sensorReadInterruptDetectionSupported = glucoseFeature.sensorReadInterruptDetectionSupported;
        this.sensorResultHighLowDetectionSupported = glucoseFeature.sensorResultHighLowDetectionSupported;
        this.sensorSampleSizeSupported = glucoseFeature.sensorSampleSizeSupported;
        this.sensorStripInsertionErrorDetectionSupported = glucoseFeature.sensorStripInsertionErrorDetectionSupported;
        this.sensorStripTypeErrorDetectionSupported = glucoseFeature.sensorStripTypeErrorDetectionSupported;
        this.sensorTemperatureHighLowDetectionSupported = glucoseFeature.sensorTemperatureHighLowDetectionSupported;
        this.timeFaultSupported = glucoseFeature.timeFaultSupported;
    }
}

/** Parse from a DataView into {@link GlucoseFeature}. */
export function glucoseFeatureFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GlucoseFeature {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const glucoseFeature = $dvr.uint16();
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const lowBatteryDetectionDuringMeasurementSupported = glucoseFeature & 0b0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorMalfunctionDetectionSupported = (glucoseFeature & 0b0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorSampleSizeSupported = (glucoseFeature & 0b0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorStripInsertionErrorDetectionSupported = (glucoseFeature & 0b0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorStripTypeErrorDetectionSupported = (glucoseFeature & 0b0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorResultHighLowDetectionSupported = (glucoseFeature & 0b0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorTemperatureHighLowDetectionSupported = (glucoseFeature & 0b0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorReadInterruptDetectionSupported = (glucoseFeature & 0b0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const generalDeviceFaultSupported = (glucoseFeature & 0b0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const timeFaultSupported = (glucoseFeature & 0b0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multipleBondSupported = (glucoseFeature & 0b0000_0100_0000_0000) >> 10;
    return { generalDeviceFaultSupported, glucoseFeature, lowBatteryDetectionDuringMeasurementSupported, multipleBondSupported, sensorMalfunctionDetectionSupported, sensorReadInterruptDetectionSupported, sensorResultHighLowDetectionSupported, sensorSampleSizeSupported, sensorStripInsertionErrorDetectionSupported, sensorStripTypeErrorDetectionSupported, sensorTemperatureHighLowDetectionSupported, timeFaultSupported };
}
