import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.resolvable_private_address_only.xml
/** <p>The Resolvable Private Address Only characteristic defines whether the device will only use Resolvable Private Addresses (RPAs) as local addresses.</p> */
export interface ResolvablePrivateAddressOnly {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * | Key | Description                                                                     |
     * | --- | ------------------------------------------------------------------------------- |
     * | 0   | Only Resolvable Private Addresses will be used as local addresses after bonding |
     *
     * <p>Reserved for future use: 1 to 255</p>
     */
    resolvablePrivateAddress: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.resolvable_private_address_only.xml | Resolvable Private Address Only} */
export class ResolvablePrivateAddressOnlyImpl implements ResolvablePrivateAddressOnly {
    public static readonly UUID_PREFIX = 0x2ac9;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.resolvable_private_address_only";
    public static readonly NAME = "Resolvable Private Address Only";

    /** Parse from a DataView into {@link ResolvablePrivateAddressOnly}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ResolvablePrivateAddressOnlyImpl {
        return new ResolvablePrivateAddressOnlyImpl(resolvablePrivateAddressOnlyFromDataView(dataView, indexStart));
    }

    public readonly resolvablePrivateAddress: number;

    public constructor(resolvablePrivateAddressOnly: ResolvablePrivateAddressOnly) {
        this.resolvablePrivateAddress = resolvablePrivateAddressOnly.resolvablePrivateAddress;
    }
}

/** Parse from a DataView into {@link ResolvablePrivateAddressOnly}. */
export function resolvablePrivateAddressOnlyFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ResolvablePrivateAddressOnly {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | description                                                                     |
     * | ----- | ------------------------------------------------------------------------------- |
     * | 0     | Only Resolvable Private Addresses will be used as local addresses after bonding |
     */
    const resolvablePrivateAddress = $dvr.uint8();
    return { resolvablePrivateAddress };
}
