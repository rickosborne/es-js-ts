import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.software_revision_string.xml
/** <p>The value of this characteristic is a UTF-8 string representing the software revision for the software within the device.</p> */
export interface SoftwareRevisionString {
    /** <p>Format: `utf8s`</p> */
    softwareRevision: string;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.software_revision_string.xml | Software Revision String} */
export class SoftwareRevisionStringImpl implements SoftwareRevisionString {
    public static readonly UUID_PREFIX = 0x2a28;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.software_revision_string";
    public static readonly NAME = "Software Revision String";

    /** Parse from a DataView into {@link SoftwareRevisionString}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): SoftwareRevisionStringImpl {
        return new SoftwareRevisionStringImpl(softwareRevisionStringFromDataView(dataView, indexStart));
    }

    public readonly softwareRevision: string;

    public constructor(softwareRevisionString: SoftwareRevisionString) {
        this.softwareRevision = softwareRevisionString.softwareRevision;
    }
}

/** Parse from a DataView into {@link SoftwareRevisionString}. */
export function softwareRevisionStringFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): SoftwareRevisionString {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const softwareRevision = $dvr.utf8s();
    return { softwareRevision };
}
