import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.csc_feature.xml
/** <p>The CSC (Cycling Speed and Cadence) Feature characteristic is used to describe the supported features of the Server.</p> */
export interface CscFeature {
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    crankRevolutionDataSupported: number;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                                |
     * | ----- | ---- | ----------------------------------- |
     * | 0     | 1    | Wheel Revolution Data Supported     |
     * | 1     | 1    | Crank Revolution Data Supported     |
     * | 2     | 1    | Multiple Sensor Locations Supported |
     * | 3     | 13   | Reserved for future use             |
     *
     */
    cscFeature: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multipleSensorLocationsSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    wheelRevolutionDataSupported: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.csc_feature.xml | Csc Feature} */
export class CscFeatureImpl implements CscFeature {
    public static readonly UUID_PREFIX = 0x2a5c;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.csc_feature";
    public static readonly NAME = "CSC Feature";

    /** Parse from a DataView into {@link CscFeature}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): CscFeatureImpl {
        return new CscFeatureImpl(cscFeatureFromDataView(dataView, indexStart));
    }

    public readonly crankRevolutionDataSupported: number;
    public readonly cscFeature: number;
    public readonly multipleSensorLocationsSupported: number;
    public readonly wheelRevolutionDataSupported: number;

    public constructor(cscFeature: CscFeature) {
        this.crankRevolutionDataSupported = cscFeature.crankRevolutionDataSupported;
        this.cscFeature = cscFeature.cscFeature;
        this.multipleSensorLocationsSupported = cscFeature.multipleSensorLocationsSupported;
        this.wheelRevolutionDataSupported = cscFeature.wheelRevolutionDataSupported;
    }
}

/** Parse from a DataView into {@link CscFeature}. */
export function cscFeatureFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): CscFeature {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const cscFeature = $dvr.uint16();
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const wheelRevolutionDataSupported = cscFeature & 0b0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const crankRevolutionDataSupported = (cscFeature & 0b0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multipleSensorLocationsSupported = (cscFeature & 0b0000_0000_0000_0100) >> 2;
    return { crankRevolutionDataSupported, cscFeature, multipleSensorLocationsSupported, wheelRevolutionDataSupported };
}
