import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.wind_chill.xml
export interface WindChill {
    /**
     * <p>Format: `sint8`</p>
     * <p>Unit: `org.bluetooth.unit.thermodynamic_temperature.degree_celsius`</p>
     * <p>Unit is in degrees Celsius with a resolution of 1 degree Celsius</p>
     */
    windChill: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.wind_chill.xml | Wind Chill} */
export class WindChillImpl implements WindChill {
    public static readonly UUID_PREFIX = 0x2a79;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.wind_chill";
    public static readonly NAME = "Wind Chill";

    /** Parse from a DataView into {@link WindChill}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): WindChillImpl {
        return new WindChillImpl(windChillFromDataView(dataView, indexStart));
    }

    public readonly windChill: number;

    public constructor(windChill: WindChill) {
        this.windChill = windChill.windChill;
    }
}

/** Parse from a DataView into {@link WindChill}. */
export function windChillFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): WindChill {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const windChill = $dvr.int8();
    return { windChill };
}
