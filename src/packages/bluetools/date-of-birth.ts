import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.date_of_birth.xml
export interface DateOfBirth {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.time.day`</p>
     * <p>Day of the month as defined by the Gregorian calendar.</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 31</p>
     */
    day: number;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.time.month`</p>
     * <p>Month of the year as defined by the Gregorian calendar.</p>
     * <p>Minimum: 0</p>
     * <p>Maximum: 12</p>
     * | Key | Description        |
     * | --- | ------------------ |
     * | 0   | Month is not known |
     * | 1   | January            |
     * | 2   | February           |
     * | 3   | March              |
     * | 4   | April              |
     * | 5   | May                |
     * | 6   | June               |
     * | 7   | July               |
     * | 8   | August             |
     * | 9   | September          |
     * | 10  | October            |
     * | 11  | November           |
     * | 12  | December           |
     *
     */
    month: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.year`</p>
     * <p>Year as defined by the Gregorian calendar.</p>
     * <p>Minimum: 1582</p>
     * <p>Maximum: 9999</p>
     */
    year: number;
}

/**
 * The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.date_of_birth.xml | Date Of Birth}
 */
export class DateOfBirthImpl implements DateOfBirth {
    public static readonly UUID_PREFIX = 0x2a85;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.date_of_birth";
    public static readonly NAME = "Date of Birth";

    /** Parse from a DataView into {@link DateOfBirth}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): DateOfBirthImpl {
        return new DateOfBirthImpl(dateOfBirthFromDataView(dataView, indexStart));
    }

    public readonly day: number;
    public readonly month: number;
    public readonly year: number;

    public constructor(dateOfBirth: DateOfBirth) {
        this.day = dateOfBirth.day;
        this.month = dateOfBirth.month;
        this.year = dateOfBirth.year;
    }
}

/** Parse from a DataView into {@link DateOfBirth}. */
export function dateOfBirthFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): DateOfBirth {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const year = $dvr.uint16();
    /** */
    /**
     * | value | description        |
     * | ----- | ------------------ |
     * | 0     | Month is not known |
     * | 1     | January            |
     * | 2     | February           |
     * | 3     | March              |
     * | 4     | April              |
     * | 5     | May                |
     * | 6     | June               |
     * | 7     | July               |
     * | 8     | August             |
     * | 9     | September          |
     * | 10    | October            |
     * | 11    | November           |
     * | 12    | December           |
     */
    const month = $dvr.uint8();
    const day = $dvr.uint8();
    return { day, month, year };
}
