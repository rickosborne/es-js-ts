import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.barometric_pressure_trend.xml
export interface BarometricPressureTrend {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * | Key | Description                   |
     * | --- | ----------------------------- |
     * | 0   | Unknown                       |
     * | 1   | Continuously falling          |
     * | 2   | Continuously rising           |
     * | 3   | Falling, then steady          |
     * | 4   | Rising, then steady           |
     * | 5   | Falling before a lesser rise  |
     * | 6   | Falling before a greater rise |
     * | 7   | Rising before a greater fall  |
     * | 8   | Rising before a lesser fall   |
     * | 9   | Steady                        |
     *
     * <p>Reserved for future use: 10 to 255</p>
     */
    barometricPressureTrend: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.barometric_pressure_trend.xml | Barometric Pressure Trend} */
export class BarometricPressureTrendImpl implements BarometricPressureTrend {
    public static readonly UUID_PREFIX = 0x2aa3;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.barometric_pressure_trend";
    public static readonly NAME = "Barometric Pressure Trend";

    /** Parse from a DataView into {@link BarometricPressureTrend}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): BarometricPressureTrendImpl {
        return new BarometricPressureTrendImpl(barometricPressureTrendFromDataView(dataView, indexStart));
    }

    public readonly barometricPressureTrend: number;

    public constructor(barometricPressureTrend: BarometricPressureTrend) {
        this.barometricPressureTrend = barometricPressureTrend.barometricPressureTrend;
    }
}

/** Parse from a DataView into {@link BarometricPressureTrend}. */
export function barometricPressureTrendFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): BarometricPressureTrend {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | description                   |
     * | ----- | ----------------------------- |
     * | 0     | Unknown                       |
     * | 1     | Continuously falling          |
     * | 2     | Continuously rising           |
     * | 3     | Falling, then steady          |
     * | 4     | Rising, then steady           |
     * | 5     | Falling before a lesser rise  |
     * | 6     | Falling before a greater rise |
     * | 7     | Rising before a greater fall  |
     * | 8     | Rising before a lesser fall   |
     * | 9     | Steady                        |
     */
    const barometricPressureTrend = $dvr.uint8();
    return { barometricPressureTrend };
}
