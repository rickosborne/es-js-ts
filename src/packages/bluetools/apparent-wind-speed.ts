import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.apparent_wind_speed.xml
export interface ApparentWindSpeed {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.velocity.metres_per_second`</p>
     * <p>Unit is in meters per second with a resolution of 0.01 m/s</p>
     */
    apparentWindSpeed: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.apparent_wind_speed.xml | Apparent Wind Speed} */
export class ApparentWindSpeedImpl implements ApparentWindSpeed {
    public static readonly UUID_PREFIX = 0x2a72;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.apparent_wind_speed";
    public static readonly NAME = "Apparent Wind Speed";

    /** Parse from a DataView into {@link ApparentWindSpeed}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ApparentWindSpeedImpl {
        return new ApparentWindSpeedImpl(apparentWindSpeedFromDataView(dataView, indexStart));
    }

    public readonly apparentWindSpeed: number;

    public constructor(apparentWindSpeed: ApparentWindSpeed) {
        this.apparentWindSpeed = apparentWindSpeed.apparentWindSpeed;
    }
}

/** Parse from a DataView into {@link ApparentWindSpeed}. */
export function apparentWindSpeedFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ApparentWindSpeed {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const apparentWindSpeed = $dvr.uint16();
    return { apparentWindSpeed };
}
