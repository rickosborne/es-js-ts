import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gust_factor.xml
export interface GustFactor {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>The factor has a fixed-point representation, where the actual factor is (attribute value * 0.1)</p>
     */
    gustFactor: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.gust_factor.xml | Gust Factor} */
export class GustFactorImpl implements GustFactor {
    public static readonly UUID_PREFIX = 0x2a74;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.gust_factor";
    public static readonly NAME = "Gust Factor";

    /** Parse from a DataView into {@link GustFactor}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): GustFactorImpl {
        return new GustFactorImpl(gustFactorFromDataView(dataView, indexStart));
    }

    public readonly gustFactor: number;

    public constructor(gustFactor: GustFactor) {
        this.gustFactor = gustFactor.gustFactor;
    }
}

/** Parse from a DataView into {@link GustFactor}. */
export function gustFactorFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): GustFactor {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const gustFactor = $dvr.uint8();
    return { gustFactor };
}
