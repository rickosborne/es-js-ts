import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.heart_rate_measurement.xml
export interface HeartRateMeasurement {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Note: The format of the Heart Rate Measurement Value field is dependent upon bit 0 of the Flags field.</p>
     */
    bpm: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.energy.joule`</p>
     * <p>The presence of the Energy Expended field is dependent upon bit 3 of the Flags field.</p>
     */
    energyJ?: number | undefined;
    /**
     * <p>Format: `8bit`</p>
     *
     * Bit field:
     *
     * | index | size | req    | name                        |
     * | ----- | ---- | ------ | --------------------------- |
     * | 0     | 1    | C1, C2 | Heart Rate Value Format bit |
     * | 1     | 2    |        | Sensor Contact Status bits  |
     * | 3     | 1    | C3     | Energy Expended Status bit  |
     * | 4     | 1    | C4     | RR-Interval bit             |
     * | 5     | 3    |        | Reserved for future use     |
     *
     */
    flags: number;
    /**
     * <p>Resolution of 1/1024 second</p>
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.time.second`</p>
     */
    rrInterval?: number[] | undefined;
    /**
     * | value | description                                                       |
     * | ----- | ----------------------------------------------------------------- |
     * | 0     | Sensor Contact feature is not supported in the current connection |
     * | 1     | Sensor Contact feature is not supported in the current connection |
     * | 2     | Sensor Contact feature is supported, but contact is not detected  |
     * | 3     | Sensor Contact feature is supported and contact is detected       |
     */
    sensorContact: number;
}

/**
 * The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.heart_rate_measurement.xml | Heart Rate Measurement}
 */
export class HeartRateMeasurementImpl implements HeartRateMeasurement {
    public static readonly UUID_PREFIX = 0x2a37;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.heart_rate_measurement";
    public static readonly NAME = "Heart Rate Measurement";

    /** Parse from a DataView into {@link HeartRateMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): HeartRateMeasurementImpl {
        return new HeartRateMeasurementImpl(heartRateMeasurementFromDataView(dataView, indexStart));
    }

    public readonly bpm: number;
    public readonly energyJ?: number | undefined;
    public readonly flags: number;
    public readonly rrInterval?: number[] | undefined;
    public readonly sensorContact: number;

    public constructor(heartRateMeasurement: HeartRateMeasurement) {
        this.bpm = heartRateMeasurement.bpm;
        this.energyJ = heartRateMeasurement.energyJ;
        this.flags = heartRateMeasurement.flags;
        this.rrInterval = heartRateMeasurement.rrInterval;
        this.sensorContact = heartRateMeasurement.sensorContact;
    }
}

/** Parse from a DataView into {@link HeartRateMeasurement}. */
export function heartRateMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): HeartRateMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description                                                             |
     * | ----- | --- | ----------------------------------------------------------------------- |
     * | 0     | C1  | Heart Rate Value Format is set to UINT8. Units: beats per minute (bpm)  |
     * | 1     | C2  | Heart Rate Value Format is set to UINT16. Units: beats per minute (bpm) |
     * <p>Requirements: C1, C2</p>
     */
    const heartRateValueFormatBit = !!(flags & 0b0000_0001);
    /**
     * | value | description                                                       |
     * | ----- | ----------------------------------------------------------------- |
     * | 0     | Sensor Contact feature is not supported in the current connection |
     * | 1     | Sensor Contact feature is not supported in the current connection |
     * | 2     | Sensor Contact feature is supported, but contact is not detected  |
     * | 3     | Sensor Contact feature is supported and contact is detected       |
     */
    const sensorContact = (flags & 0b0000_0110) >> 1;
    /**
     * | value | req | description                                          |
     * | ----- | --- | ---------------------------------------------------- |
     * | 0     |     | Energy Expended field is not present                 |
     * | 1     | C3  | Energy Expended field is present. Units: kilo Joules |
     * <p>Requirements: C3</p>
     */
    const energyExpendedStatusBit = !!((flags & 0b0000_1000) >> 3);
    /**
     * | value | req | description                                 |
     * | ----- | --- | ------------------------------------------- |
     * | 0     |     | RR-Interval values are not present.         |
     * | 1     | C4  | One or more RR-Interval values are present. |
     * <p>Requirements: C4</p>
     */
    const rrIntervalBit = !!((flags & 0b0001_0000) >> 4);
    let bpm: number = 0;
    if (!heartRateValueFormatBit) {
        bpm = $dvr.uint8();
    }
    else {
        bpm = $dvr.uint16();
    }

    let energyJ: number | undefined = undefined;
    if (energyExpendedStatusBit) {
        energyJ = $dvr.uint16();
    }

    let rrInterval: number[] | undefined = undefined;
    if (rrIntervalBit) {
        rrInterval = [];
        while ($dvr.bytesRemain > 0) {
            rrInterval.push($dvr.uint16());
        }
    }

    return { bpm, energyJ, flags, rrInterval, sensorContact };
}
