import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.body_composition_measurement.xml
export interface BodyCompositionMeasurement {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.energy.joule`</p>
     * <p>Unit is in kilo Joules with a resolution of 1</p>
     */
    basalMetabolism?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Unit is in percent with a resolution of 0.1</p>
     */
    bodyFatPercentage: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.kilogram`</p>
     * <p>Unit is in kilograms with a resolution of 0.005. Note: Determined when bit 0 of the Flags field is set to 0.</p>
     */
    bodyWaterMassKilograms?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.pound`</p>
     * <p>Unit is in pounds with a resolution of 0.01. Note: Determined when bit 0 of the Flags field is set to 1.</p>
     */
    bodyWaterMassPounds?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.kilogram`</p>
     * <p>Unit is in kilograms with resolution 0.005. Note: Determined when bit 0 of the Flags field is set to 0.</p>
     */
    fatFreeMassKilograms?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.pound`</p>
     * <p>Unit is in pounds with a resolution of 0.01. Note: Determined when bit 0 of the Flags field is set to 1.</p>
     */
    fatFreeMassPounds?: number | undefined;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | req    | name                        |
     * | ----- | ---- | ------ | --------------------------- |
     * | 0     | 1    | C1, C2 | Measurement Units           |
     * | 1     | 1    | C3     | Time Stamp Present          |
     * | 2     | 1    | C4     | User ID present             |
     * | 3     | 1    | C5     | Basal Metabolism present    |
     * | 4     | 1    | C6     | Muscle Percentage present   |
     * | 5     | 1    | C7     | Muscle Mass present         |
     * | 6     | 1    | C8     | Fat Free Mass present       |
     * | 7     | 1    | C9     | Soft Lean Mass present      |
     * | 8     | 1    | C10    | Body Water Mass present     |
     * | 9     | 1    | C11    | Impedance present           |
     * | 10    | 1    | C12    | Weight present              |
     * | 11    | 1    | C13    | Height present              |
     * | 12    | 1    |        | Multiple Packet Measurement |
     * | 13    | 3    |        | Reserved for future use     |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.inch`</p>
     * <p>Unit is in meters with a resolution of 0.1. Note: Determined when bit 0 of the Flags field is set to 1.</p>
     */
    heightInches?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 0.001. Note: Determined when bit 0 of the Flags field is set to 0.</p>
     */
    heightMeters?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.electric_resistance.ohm`</p>
     * <p>Unit is in Ohms with a resolution of 0.1</p>
     */
    impedance?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    multiplePacketMeasurement: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.kilogram`</p>
     * <p>Unit is in kilograms with resolution 0.005. Note: Determined when bit 0 of the Flags field is set to 0.</p>
     */
    muscleMassKilograms?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.pound`</p>
     * <p>Unit is in pounds with resolution 0.01. Note: Determined when bit 0 of the Flags field is set to 1.</p>
     */
    muscleMassPounds?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Unit is in percentage with a resolution of 0.1</p>
     */
    musclePercentage?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.kilogram`</p>
     * <p>Unit is in kilograms with a resolution of 0.005. Note: Determined when bit 0 of the Flags field is set to 0.</p>
     */
    softLeanMassKilograms?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.kilogram`</p>
     * <p>Unit is in pounds with a resolution of 0.01. Note: Determined when bit 0 of the Flags field is set to 1.</p>
     */
    softLeanMassPounds?: number | undefined;
    /** <p>Smallest unit in seconds</p> */
    timeStamp?: DateTime | undefined;
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     * <p>Unit is unitless with a resoluton of 1</p>
     * | Key | Description  |
     * | --- | ------------ |
     * | 255 | unknown user |
     *
     */
    userID?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.kilogram`</p>
     * <p>Unit is in kilograms with a resolution of 0.005. Note: Determined when bit 0 of the Flags field is set to 0.</p>
     */
    weightKilograms?: number | undefined;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.mass.pound`</p>
     * <p>Unit is in pounds with a resolution of 0.01. Note: Determined when bit 0 of the Flags field is set to 1.</p>
     */
    weightPounds?: number | undefined;
}

/**
 * The fields in the above table are in the order of LSO to MSO. Where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.body_composition_measurement.xml | Body Composition Measurement}
 */
export class BodyCompositionMeasurementImpl implements BodyCompositionMeasurement {
    public static readonly UUID_PREFIX = 0x2a9c;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.body_composition_measurement";
    public static readonly NAME = "Body Composition Measurement";

    /** Parse from a DataView into {@link BodyCompositionMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): BodyCompositionMeasurementImpl {
        return new BodyCompositionMeasurementImpl(bodyCompositionMeasurementFromDataView(dataView, indexStart));
    }

    public readonly basalMetabolism?: number | undefined;
    public readonly bodyFatPercentage: number;
    public readonly bodyWaterMassKilograms?: number | undefined;
    public readonly bodyWaterMassPounds?: number | undefined;
    public readonly fatFreeMassKilograms?: number | undefined;
    public readonly fatFreeMassPounds?: number | undefined;
    public readonly flags: number;
    public readonly heightInches?: number | undefined;
    public readonly heightMeters?: number | undefined;
    public readonly impedance?: number | undefined;
    public readonly multiplePacketMeasurement: number;
    public readonly muscleMassKilograms?: number | undefined;
    public readonly muscleMassPounds?: number | undefined;
    public readonly musclePercentage?: number | undefined;
    public readonly softLeanMassKilograms?: number | undefined;
    public readonly softLeanMassPounds?: number | undefined;
    public readonly timeStamp?: DateTime | undefined;
    public readonly userID?: number | undefined;
    public readonly weightKilograms?: number | undefined;
    public readonly weightPounds?: number | undefined;

    public constructor(bodyCompositionMeasurement: BodyCompositionMeasurement) {
        this.basalMetabolism = bodyCompositionMeasurement.basalMetabolism;
        this.bodyFatPercentage = bodyCompositionMeasurement.bodyFatPercentage;
        this.bodyWaterMassKilograms = bodyCompositionMeasurement.bodyWaterMassKilograms;
        this.bodyWaterMassPounds = bodyCompositionMeasurement.bodyWaterMassPounds;
        this.fatFreeMassKilograms = bodyCompositionMeasurement.fatFreeMassKilograms;
        this.fatFreeMassPounds = bodyCompositionMeasurement.fatFreeMassPounds;
        this.flags = bodyCompositionMeasurement.flags;
        this.heightInches = bodyCompositionMeasurement.heightInches;
        this.heightMeters = bodyCompositionMeasurement.heightMeters;
        this.impedance = bodyCompositionMeasurement.impedance;
        this.multiplePacketMeasurement = bodyCompositionMeasurement.multiplePacketMeasurement;
        this.muscleMassKilograms = bodyCompositionMeasurement.muscleMassKilograms;
        this.muscleMassPounds = bodyCompositionMeasurement.muscleMassPounds;
        this.musclePercentage = bodyCompositionMeasurement.musclePercentage;
        this.softLeanMassKilograms = bodyCompositionMeasurement.softLeanMassKilograms;
        this.softLeanMassPounds = bodyCompositionMeasurement.softLeanMassPounds;
        this.timeStamp = bodyCompositionMeasurement.timeStamp;
        this.userID = bodyCompositionMeasurement.userID;
        this.weightKilograms = bodyCompositionMeasurement.weightKilograms;
        this.weightPounds = bodyCompositionMeasurement.weightPounds;
    }
}

/** Parse from a DataView into {@link BodyCompositionMeasurement}. */
export function bodyCompositionMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): BodyCompositionMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint16();
    /**
     * | value | req | description                                                                        |
     * | ----- | --- | ---------------------------------------------------------------------------------- |
     * | 0     | C1  | SI (Weight and Mass in units of kilogram (kg) and Height in units of meter)        |
     * | 1     | C2  | Imperial (Weight and Mass in units of pound (lb) and Height in units of inch (in)) |
     * <p>Requirements: C1, C2</p>
     */
    const measurementUnits = !!(flags & 0b0000_0000_0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C3  | True        |
     * <p>Requirements: C3</p>
     */
    const timeStampPresent = !!((flags & 0b0000_0000_0000_0010) >> 1);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C4  | True        |
     * <p>Requirements: C4</p>
     */
    const userIDPresent = !!((flags & 0b0000_0000_0000_0100) >> 2);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C5  | True        |
     * <p>Requirements: C5</p>
     */
    const basalMetabolismPresent = !!((flags & 0b0000_0000_0000_1000) >> 3);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C6  | True        |
     * <p>Requirements: C6</p>
     */
    const musclePercentagePresent = !!((flags & 0b0000_0000_0001_0000) >> 4);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C7  | True        |
     * <p>Requirements: C7</p>
     */
    const muscleMassPresent = !!((flags & 0b0000_0000_0010_0000) >> 5);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C8  | True        |
     * <p>Requirements: C8</p>
     */
    const fatFreeMassPresent = !!((flags & 0b0000_0000_0100_0000) >> 6);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C9  | True        |
     * <p>Requirements: C9</p>
     */
    const softLeanMassPresent = !!((flags & 0b0000_0000_1000_0000) >> 7);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C10 | True        |
     * <p>Requirements: C10</p>
     */
    const bodyWaterMassPresent = !!((flags & 0b0000_0001_0000_0000) >> 8);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C11 | True        |
     * <p>Requirements: C11</p>
     */
    const impedancePresent = !!((flags & 0b0000_0010_0000_0000) >> 9);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C12 | True        |
     * <p>Requirements: C12</p>
     */
    const weightPresent = !!((flags & 0b0000_0100_0000_0000) >> 10);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C13 | True        |
     * <p>Requirements: C13</p>
     */
    const heightPresent = !!((flags & 0b0000_1000_0000_0000) >> 11);
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const multiplePacketMeasurement = (flags & 0b0001_0000_0000_0000) >> 12;
    const bodyFatPercentage = $dvr.uint16();
    let timeStamp: DateTime | undefined = undefined;
    if (timeStampPresent) {
        timeStamp = DateTimeImpl.fromDataView($dvr);
    }

    /** */
    /**
     * | value | description  |
     * | ----- | ------------ |
     * | 255   | unknown user |
     */
    let userID: number | undefined = undefined;
    if (userIDPresent) {
        userID = $dvr.uint8();
    }

    let basalMetabolism: number | undefined = undefined;
    if (basalMetabolismPresent) {
        basalMetabolism = $dvr.uint16();
    }

    let musclePercentage: number | undefined = undefined;
    if (musclePercentagePresent) {
        musclePercentage = $dvr.uint16();
    }

    let muscleMassKilograms: number | undefined = undefined;
    if (!measurementUnits && muscleMassPresent) {
        muscleMassKilograms = $dvr.uint16();
    }

    let muscleMassPounds: number | undefined = undefined;
    if (measurementUnits && muscleMassPresent) {
        muscleMassPounds = $dvr.uint16();
    }

    let fatFreeMassKilograms: number | undefined = undefined;
    if (!measurementUnits && fatFreeMassPresent) {
        fatFreeMassKilograms = $dvr.uint16();
    }

    let fatFreeMassPounds: number | undefined = undefined;
    if (measurementUnits && fatFreeMassPresent) {
        fatFreeMassPounds = $dvr.uint16();
    }

    let softLeanMassKilograms: number | undefined = undefined;
    if (!measurementUnits && softLeanMassPresent) {
        softLeanMassKilograms = $dvr.uint16();
    }

    let softLeanMassPounds: number | undefined = undefined;
    if (measurementUnits && softLeanMassPresent) {
        softLeanMassPounds = $dvr.uint16();
    }

    let bodyWaterMassKilograms: number | undefined = undefined;
    if (!measurementUnits && bodyWaterMassPresent) {
        bodyWaterMassKilograms = $dvr.uint16();
    }

    let bodyWaterMassPounds: number | undefined = undefined;
    if (measurementUnits && bodyWaterMassPresent) {
        bodyWaterMassPounds = $dvr.uint16();
    }

    let impedance: number | undefined = undefined;
    if (impedancePresent) {
        impedance = $dvr.uint16();
    }

    let weightKilograms: number | undefined = undefined;
    if (!measurementUnits && weightPresent) {
        weightKilograms = $dvr.uint16();
    }

    let weightPounds: number | undefined = undefined;
    if (measurementUnits && weightPresent) {
        weightPounds = $dvr.uint16();
    }

    let heightMeters: number | undefined = undefined;
    if (!measurementUnits && heightPresent) {
        heightMeters = $dvr.uint16();
    }

    let heightInches: number | undefined = undefined;
    if (measurementUnits && heightPresent) {
        heightInches = $dvr.uint16();
    }

    return { basalMetabolism, bodyFatPercentage, bodyWaterMassKilograms, bodyWaterMassPounds, fatFreeMassKilograms, fatFreeMassPounds, flags, heightInches, heightMeters, impedance, multiplePacketMeasurement, muscleMassKilograms, muscleMassPounds, musclePercentage, softLeanMassKilograms, softLeanMassPounds, timeStamp, userID, weightKilograms, weightPounds };
}
