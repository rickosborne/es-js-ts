import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.scan_refresh.xml
/** <p>The Scan Refresh characteristic is used to notify the Client that the Server requires the Scan Interval Window characteristic to be written with the latest values upon notification.</p> */
export interface ScanRefresh {
    /**
     * <p>Format: `uint8`</p>
     * | Key | Description             |
     * | --- | ----------------------- |
     * | 0   | Server requires refresh |
     *
     * <p>Reserved for future use: 1 to 255</p>
     */
    scanRefreshValue: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.scan_refresh.xml | Scan Refresh} */
export class ScanRefreshImpl implements ScanRefresh {
    public static readonly UUID_PREFIX = 0x2a31;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.scan_refresh";
    public static readonly NAME = "Scan Refresh";

    /** Parse from a DataView into {@link ScanRefresh}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): ScanRefreshImpl {
        return new ScanRefreshImpl(scanRefreshFromDataView(dataView, indexStart));
    }

    public readonly scanRefreshValue: number;

    public constructor(scanRefresh: ScanRefresh) {
        this.scanRefreshValue = scanRefresh.scanRefreshValue;
    }
}

/** Parse from a DataView into {@link ScanRefresh}. */
export function scanRefreshFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): ScanRefresh {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    /** */
    /**
     * | value | description             |
     * | ----- | ----------------------- |
     * | 0     | Server requires refresh |
     */
    const scanRefreshValue = $dvr.uint8();
    return { scanRefreshValue };
}
