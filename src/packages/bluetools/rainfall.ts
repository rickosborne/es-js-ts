import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.rainfall.xml
export interface Rainfall {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 1mm</p>
     */
    rainfall: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.rainfall.xml | Rainfall} */
export class RainfallImpl implements Rainfall {
    public static readonly UUID_PREFIX = 0x2a78;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.rainfall";
    public static readonly NAME = "Rainfall";

    /** Parse from a DataView into {@link Rainfall}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): RainfallImpl {
        return new RainfallImpl(rainfallFromDataView(dataView, indexStart));
    }

    public readonly rainfall: number;

    public constructor(rainfall: Rainfall) {
        this.rainfall = rainfall.rainfall;
    }
}

/** Parse from a DataView into {@link Rainfall}. */
export function rainfallFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Rainfall {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const rainfall = $dvr.uint16();
    return { rainfall };
}
