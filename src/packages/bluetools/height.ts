import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.height.xml
/** <p>Height of the User</p> */
export interface Height {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 0.01 .</p>
     */
    height: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.height.xml | Height} */
export class HeightImpl implements Height {
    public static readonly UUID_PREFIX = 0x2a8e;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.height";
    public static readonly NAME = "Height";

    /** Parse from a DataView into {@link Height}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): HeightImpl {
        return new HeightImpl(heightFromDataView(dataView, indexStart));
    }

    public readonly height: number;

    public constructor(height: Height) {
        this.height = height.height;
    }
}

/** Parse from a DataView into {@link Height}. */
export function heightFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Height {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const height = $dvr.uint16();
    return { height };
}
