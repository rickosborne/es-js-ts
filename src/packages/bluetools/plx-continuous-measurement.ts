import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.plx_continuous_measurement.xml
/** <p>The PLX Continuous Measurement characteristic, if supported, is used to send periodic pulse oximetry measurements. This characteristic is a variable length structure containing the Flags field (to indicate presence of optional fields), the SpO2PR-Normal field, and depending on the contents of the Flags field, the SpO2PR-Fast field, the SpO2PR-Slow field, the Measurement Status field, the Device and Sensor Status field, and/or the Pulse Amplitude Index field.</p> */
export interface PlxContinuousMeasurement {
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    calibrationOngoing: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    dataForDemonstration: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    dataForTesting: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    dataFromMeasurementStorage: number;
    /**
     * <p>Format: `24bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                                                  |
     * | ----- | ---- | ----------------------------------------------------- |
     * | 0     | 1    | Extended Display Update Ongoing bit supported         |
     * | 1     | 1    | Equipment Malfunction Detected bit supported          |
     * | 2     | 1    | Signal Processing Irregularity Detected bit supported |
     * | 3     | 1    | Inadequite Signal Detected bit supported              |
     * | 4     | 1    | Poor Signal Detected bit supported                    |
     * | 5     | 1    | Low Perfusion Detected bit supported                  |
     * | 6     | 1    | Erratic Signal Detected bit supported                 |
     * | 7     | 1    | Nonpulsatile Signal Detected bit supported            |
     * | 8     | 1    | Questionable Pulse Detected bit supported             |
     * | 9     | 1    | Signal Analysis Ongoing bit supported                 |
     * | 10    | 1    | Sensor Interference Detected bit supported            |
     * | 11    | 1    | Sensor Unconnected to User bit supported              |
     * | 12    | 1    | Unknown Sensor Connected bit supported                |
     * | 13    | 1    | Sensor Displaced bit supported                        |
     * | 14    | 1    | Sensor Malfunctioning bit supported                   |
     * | 15    | 1    | Sensor Disconnected bit supported                     |
     * | 16    | 8    | Reserved for future use                               |
     *
     */
    deviceAndSensorStatus: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    earlyEstimatedData: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    equipmentMalfunctionDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    erraticSignalDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    extendedDisplayUpdateOngoingBitSupported: number;
    /**
     * <p>Format: `8bit`</p>
     *
     * Bit field:
     *
     * | index | size | req | name                                      |
     * | ----- | ---- | --- | ----------------------------------------- |
     * | 0     | 1    | C1  | SpO2PR?Fast field is present              |
     * | 1     | 1    | C2  | SpO2PR-Slow field is present              |
     * | 2     | 1    | C3  | Measurement Status field is present       |
     * | 3     | 1    | C4  | Device and Sensor Status field is present |
     * | 4     | 1    | C5  | Pulse Amplitude Index field is present    |
     * | 5     | 3    |     | Reserved for future use                   |
     *
     */
    flags: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    fullyQualifiedData: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    inadequiteSignalDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    invalidMeasurementDetected: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    lowPerfusionDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    measurementOngoing: number;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                              |
     * | ----- | ---- | --------------------------------- |
     * | 5     | 1    | Measurement Ongoing               |
     * | 6     | 1    | Early Estimated Data              |
     * | 7     | 1    | Validated Data                    |
     * | 8     | 1    | Fully Qualified Data              |
     * | 9     | 1    | Data from Measurement Storage     |
     * | 10    | 1    | Data for Demonstration            |
     * | 11    | 1    | Data for Testing                  |
     * | 12    | 1    | Calibration Ongoing               |
     * | 13    | 1    | Measurement Unavailable           |
     * | 14    | 1    | Questionable Measurement Detected |
     * | 15    | 1    | Invalid Measurement Detected      |
     * | 0     | 5    | Reserved for future use           |
     *
     */
    measurementStatus: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    measurementUnavailable: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    nonpulsatileSignalDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    poorSignalDetectedBitSupported: number;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Unit is percentage with a resolution of 1</p>
     */
    pulseAmplitudeIndex?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    questionableMeasurementDetected: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    questionablePulseDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorDisconnectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorDisplacedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorInterferenceDetectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorMalfunctioningBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    sensorUnconnectedToUserBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    signalAnalysisOngoingBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    signalProcessingIrregularityDetectedBitSupported: number;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is beats per minute with a resolution of 1</p>
     */
    spo2prFastPR?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Unit is percentage with a resolution of 1</p>
     */
    spo2prFastSpO2?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is beats per minute with a resolution of 1</p>
     */
    spo2prNormalPR: number;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Unit is percentage with a resolution of 1</p>
     */
    spo2prNormalSpO2: number;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.period.beats_per_minute`</p>
     * <p>Unit is beats per minute with a resolution of 1</p>
     */
    spo2prSlowPR?: number | undefined;
    /**
     * <p>Format: `SFLOAT`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Unit is percentage with a resolution of 1</p>
     */
    spo2prSlowSpO2?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    unknownSensorConnectedBitSupported: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    validatedData: number;
}

/**
 * The fields in the above table, reading from top to bottom, are shown in the order of LSO to MSO, where LSO = Least Significant Octet and MSO = Most Significant Octet.
 * @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.plx_continuous_measurement.xml | Plx Continuous Measurement}
 */
export class PlxContinuousMeasurementImpl implements PlxContinuousMeasurement {
    public static readonly UUID_PREFIX = 0x2a5f;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.plx_continuous_measurement";
    public static readonly NAME = "PLX Continuous Measurement Characteristic";

    /** Parse from a DataView into {@link PlxContinuousMeasurement}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): PlxContinuousMeasurementImpl {
        return new PlxContinuousMeasurementImpl(plxContinuousMeasurementFromDataView(dataView, indexStart));
    }

    public readonly calibrationOngoing: number;
    public readonly dataForDemonstration: number;
    public readonly dataForTesting: number;
    public readonly dataFromMeasurementStorage: number;
    public readonly deviceAndSensorStatus: number;
    public readonly earlyEstimatedData: number;
    public readonly equipmentMalfunctionDetectedBitSupported: number;
    public readonly erraticSignalDetectedBitSupported: number;
    public readonly extendedDisplayUpdateOngoingBitSupported: number;
    public readonly flags: number;
    public readonly fullyQualifiedData: number;
    public readonly inadequiteSignalDetectedBitSupported: number;
    public readonly invalidMeasurementDetected: number;
    public readonly lowPerfusionDetectedBitSupported: number;
    public readonly measurementOngoing: number;
    public readonly measurementStatus: number;
    public readonly measurementUnavailable: number;
    public readonly nonpulsatileSignalDetectedBitSupported: number;
    public readonly poorSignalDetectedBitSupported: number;
    public readonly pulseAmplitudeIndex?: number | undefined;
    public readonly questionableMeasurementDetected: number;
    public readonly questionablePulseDetectedBitSupported: number;
    public readonly sensorDisconnectedBitSupported: number;
    public readonly sensorDisplacedBitSupported: number;
    public readonly sensorInterferenceDetectedBitSupported: number;
    public readonly sensorMalfunctioningBitSupported: number;
    public readonly sensorUnconnectedToUserBitSupported: number;
    public readonly signalAnalysisOngoingBitSupported: number;
    public readonly signalProcessingIrregularityDetectedBitSupported: number;
    public readonly spo2prFastPR?: number | undefined;
    public readonly spo2prFastSpO2?: number | undefined;
    public readonly spo2prNormalPR: number;
    public readonly spo2prNormalSpO2: number;
    public readonly spo2prSlowPR?: number | undefined;
    public readonly spo2prSlowSpO2?: number | undefined;
    public readonly unknownSensorConnectedBitSupported: number;
    public readonly validatedData: number;

    public constructor(plxContinuousMeasurement: PlxContinuousMeasurement) {
        this.calibrationOngoing = plxContinuousMeasurement.calibrationOngoing;
        this.dataForDemonstration = plxContinuousMeasurement.dataForDemonstration;
        this.dataForTesting = plxContinuousMeasurement.dataForTesting;
        this.dataFromMeasurementStorage = plxContinuousMeasurement.dataFromMeasurementStorage;
        this.deviceAndSensorStatus = plxContinuousMeasurement.deviceAndSensorStatus;
        this.earlyEstimatedData = plxContinuousMeasurement.earlyEstimatedData;
        this.equipmentMalfunctionDetectedBitSupported = plxContinuousMeasurement.equipmentMalfunctionDetectedBitSupported;
        this.erraticSignalDetectedBitSupported = plxContinuousMeasurement.erraticSignalDetectedBitSupported;
        this.extendedDisplayUpdateOngoingBitSupported = plxContinuousMeasurement.extendedDisplayUpdateOngoingBitSupported;
        this.flags = plxContinuousMeasurement.flags;
        this.fullyQualifiedData = plxContinuousMeasurement.fullyQualifiedData;
        this.inadequiteSignalDetectedBitSupported = plxContinuousMeasurement.inadequiteSignalDetectedBitSupported;
        this.invalidMeasurementDetected = plxContinuousMeasurement.invalidMeasurementDetected;
        this.lowPerfusionDetectedBitSupported = plxContinuousMeasurement.lowPerfusionDetectedBitSupported;
        this.measurementOngoing = plxContinuousMeasurement.measurementOngoing;
        this.measurementStatus = plxContinuousMeasurement.measurementStatus;
        this.measurementUnavailable = plxContinuousMeasurement.measurementUnavailable;
        this.nonpulsatileSignalDetectedBitSupported = plxContinuousMeasurement.nonpulsatileSignalDetectedBitSupported;
        this.poorSignalDetectedBitSupported = plxContinuousMeasurement.poorSignalDetectedBitSupported;
        this.pulseAmplitudeIndex = plxContinuousMeasurement.pulseAmplitudeIndex;
        this.questionableMeasurementDetected = plxContinuousMeasurement.questionableMeasurementDetected;
        this.questionablePulseDetectedBitSupported = plxContinuousMeasurement.questionablePulseDetectedBitSupported;
        this.sensorDisconnectedBitSupported = plxContinuousMeasurement.sensorDisconnectedBitSupported;
        this.sensorDisplacedBitSupported = plxContinuousMeasurement.sensorDisplacedBitSupported;
        this.sensorInterferenceDetectedBitSupported = plxContinuousMeasurement.sensorInterferenceDetectedBitSupported;
        this.sensorMalfunctioningBitSupported = plxContinuousMeasurement.sensorMalfunctioningBitSupported;
        this.sensorUnconnectedToUserBitSupported = plxContinuousMeasurement.sensorUnconnectedToUserBitSupported;
        this.signalAnalysisOngoingBitSupported = plxContinuousMeasurement.signalAnalysisOngoingBitSupported;
        this.signalProcessingIrregularityDetectedBitSupported = plxContinuousMeasurement.signalProcessingIrregularityDetectedBitSupported;
        this.spo2prFastPR = plxContinuousMeasurement.spo2prFastPR;
        this.spo2prFastSpO2 = plxContinuousMeasurement.spo2prFastSpO2;
        this.spo2prNormalPR = plxContinuousMeasurement.spo2prNormalPR;
        this.spo2prNormalSpO2 = plxContinuousMeasurement.spo2prNormalSpO2;
        this.spo2prSlowPR = plxContinuousMeasurement.spo2prSlowPR;
        this.spo2prSlowSpO2 = plxContinuousMeasurement.spo2prSlowSpO2;
        this.unknownSensorConnectedBitSupported = plxContinuousMeasurement.unknownSensorConnectedBitSupported;
        this.validatedData = plxContinuousMeasurement.validatedData;
    }
}

/** Parse from a DataView into {@link PlxContinuousMeasurement}. */
export function plxContinuousMeasurementFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): PlxContinuousMeasurement {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint8();
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C1  | True        |
     * <p>Requirements: C1</p>
     */
    const spo2prFastFieldIsPresent = !!(flags & 0b0000_0001);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C2  | True        |
     * <p>Requirements: C2</p>
     */
    const spo2prSlowFieldIsPresent = !!((flags & 0b0000_0010) >> 1);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C3  | True        |
     * <p>Requirements: C3</p>
     */
    const measurementStatusFieldIsPresent = !!((flags & 0b0000_0100) >> 2);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C4  | True        |
     * <p>Requirements: C4</p>
     */
    const deviceAndSensorStatusFieldIsPresent = !!((flags & 0b0000_1000) >> 3);
    /**
     * | value | req | description |
     * | ----- | --- | ----------- |
     * | 0     |     | False       |
     * | 1     | C5  | True        |
     * <p>Requirements: C5</p>
     */
    const pulseAmplitudeIndexFieldIsPresent = !!((flags & 0b0001_0000) >> 4);
    const spo2prNormalSpO2 = $dvr.sFloat();
    const spo2prNormalPR = $dvr.sFloat();
    let spo2prFastSpO2: number | undefined = undefined;
    if (spo2prFastFieldIsPresent) {
        spo2prFastSpO2 = $dvr.sFloat();
    }

    let spo2prFastPR: number | undefined = undefined;
    if (spo2prFastFieldIsPresent) {
        spo2prFastPR = $dvr.sFloat();
    }

    let spo2prSlowSpO2: number | undefined = undefined;
    if (spo2prSlowFieldIsPresent) {
        spo2prSlowSpO2 = $dvr.sFloat();
    }

    let spo2prSlowPR: number | undefined = undefined;
    if (spo2prSlowFieldIsPresent) {
        spo2prSlowPR = $dvr.sFloat();
    }

    let measurementStatus: number = 0;
    if (measurementStatusFieldIsPresent) {
        measurementStatus = $dvr.uint16();
    }

    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const measurementOngoing = (measurementStatus & 0b0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const earlyEstimatedData = (measurementStatus & 0b0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const validatedData = (measurementStatus & 0b0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const fullyQualifiedData = (measurementStatus & 0b0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const dataFromMeasurementStorage = (measurementStatus & 0b0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const dataForDemonstration = (measurementStatus & 0b0000_0100_0000_0000) >> 10;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const dataForTesting = (measurementStatus & 0b0000_1000_0000_0000) >> 11;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const calibrationOngoing = (measurementStatus & 0b0001_0000_0000_0000) >> 12;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const measurementUnavailable = (measurementStatus & 0b0010_0000_0000_0000) >> 13;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const questionableMeasurementDetected = (measurementStatus & 0b0100_0000_0000_0000) >> 14;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const invalidMeasurementDetected = (measurementStatus & 0b1000_0000_0000_0000) >> 15;
    let deviceAndSensorStatus: number = 0;
    if (deviceAndSensorStatusFieldIsPresent) {
        deviceAndSensorStatus = $dvr.uint24();
    }

    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const extendedDisplayUpdateOngoingBitSupported = deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const equipmentMalfunctionDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const signalProcessingIrregularityDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_0000_0100) >> 2;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const inadequiteSignalDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_0000_1000) >> 3;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const poorSignalDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_0001_0000) >> 4;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const lowPerfusionDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_0010_0000) >> 5;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const erraticSignalDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const nonpulsatileSignalDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const questionablePulseDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0001_0000_0000) >> 8;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const signalAnalysisOngoingBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0010_0000_0000) >> 9;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorInterferenceDetectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_0100_0000_0000) >> 10;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorUnconnectedToUserBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0000_1000_0000_0000) >> 11;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const unknownSensorConnectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0001_0000_0000_0000) >> 12;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorDisplacedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0010_0000_0000_0000) >> 13;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorMalfunctioningBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_0100_0000_0000_0000) >> 14;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const sensorDisconnectedBitSupported = (deviceAndSensorStatus & 0b0000_0000_0000_0000_1000_0000_0000_0000) >> 15;
    let pulseAmplitudeIndex: number | undefined = undefined;
    if (pulseAmplitudeIndexFieldIsPresent) {
        pulseAmplitudeIndex = $dvr.sFloat();
    }

    return { calibrationOngoing, dataForDemonstration, dataForTesting, dataFromMeasurementStorage, deviceAndSensorStatus, earlyEstimatedData, equipmentMalfunctionDetectedBitSupported, erraticSignalDetectedBitSupported, extendedDisplayUpdateOngoingBitSupported, flags, fullyQualifiedData, inadequiteSignalDetectedBitSupported, invalidMeasurementDetected, lowPerfusionDetectedBitSupported, measurementOngoing, measurementStatus, measurementUnavailable, nonpulsatileSignalDetectedBitSupported, poorSignalDetectedBitSupported, pulseAmplitudeIndex, questionableMeasurementDetected, questionablePulseDetectedBitSupported, sensorDisconnectedBitSupported, sensorDisplacedBitSupported, sensorInterferenceDetectedBitSupported, sensorMalfunctioningBitSupported, sensorUnconnectedToUserBitSupported, signalAnalysisOngoingBitSupported, signalProcessingIrregularityDetectedBitSupported, spo2prFastPR, spo2prFastSpO2, spo2prNormalPR, spo2prNormalSpO2, spo2prSlowPR, spo2prSlowSpO2, unknownSensorConnectedBitSupported, validatedData };
}
