import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.humidity.xml
export interface Humidity {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.percentage`</p>
     * <p>Unit is in percent with a resolution of 0.01 percent</p>
     */
    humidity: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.humidity.xml | Humidity} */
export class HumidityImpl implements Humidity {
    public static readonly UUID_PREFIX = 0x2a6f;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.humidity";
    public static readonly NAME = "Humidity";

    /** Parse from a DataView into {@link Humidity}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): HumidityImpl {
        return new HumidityImpl(humidityFromDataView(dataView, indexStart));
    }

    public readonly humidity: number;

    public constructor(humidity: Humidity) {
        this.humidity = humidity.humidity;
    }
}

/** Parse from a DataView into {@link Humidity}. */
export function humidityFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Humidity {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const humidity = $dvr.uint16();
    return { humidity };
}
