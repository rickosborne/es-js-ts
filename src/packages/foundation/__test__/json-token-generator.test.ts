import { expect } from "chai";
import { describe, test } from "mocha";
import { readFile } from "node:fs/promises";
import { join as pathJoin } from "node:path";
import { type JsonToken, JsonTokenGenerator } from "../json-token-generator.js";

describe(JsonTokenGenerator.name, () => {
	test("static text", async () => {
		const json = await readFile(pathJoin(__dirname, "cities.fixture.json"), { encoding: "utf-8" });
		const generator = JsonTokenGenerator.forText(json);
		const tokens = await Array.fromAsync(generator);
		expect(tokens).eql([
			{
				at: 0,
				length: 1,
				line: 1,
				pos: 1,
				type: "pun",
				value: "{",
			},
			{
				at: 1,
				length: 2,
				line: 1,
				lines: 1,
				offset: 2,
				pos: 2,
				type: "space",
				value: "\n\t",
			},
			{
				at: 3,
				length: 6,
				line: 2,
				pos: 2,
				type: "string",
				value: "city",
			},
			{
				at: 9,
				length: 1,
				line: 2,
				pos: 8,
				type: "pun",
				value: ":",
			},
			{
				at: 10,
				length: 1,
				line: 2,
				lines: 0,
				offset: 1,
				pos: 9,
				type: "space",
				value: " ",
			},
			{
				at: 11,
				length: 1,
				line: 2,
				pos: 10,
				type: "pun",
				value: "[",
			},
			{
				at: 12,
				length: 3,
				line: 2,
				lines: 1,
				offset: 3,
				pos: 11,
				type: "space",
				value: "\n\t\t",
			},
			{
				at: 15,
				length: 7,
				line: 3,
				pos: 3,
				type: "string",
				value: "Paris",
			},
			{
				at: 22,
				length: 1,
				line: 3,
				pos: 10,
				type: "pun",
				value: ",",
			},
			{
				at: 23,
				length: 3,
				line: 3,
				lines: 1,
				offset: 3,
				pos: 11,
				type: "space",
				value: "\n\t\t",
			},
			{
				at: 26,
				length: 8,
				line: 4,
				pos: 3,
				type: "string",
				value: "London",
			},
			{
				at: 34,
				length: 2,
				line: 4,
				lines: 1,
				offset: 2,
				pos: 11,
				type: "space",
				value: "\n\t",
			},
			{
				at: 36,
				length: 1,
				line: 5,
				pos: 2,
				type: "pun",
				value: "]",
			},
			{
				at: 37,
				length: 1,
				line: 5,
				pos: 3,
				type: "pun",
				value: ",",
			},
			{
				at: 38,
				length: 2,
				line: 5,
				lines: 1,
				offset: 2,
				pos: 4,
				type: "space",
				value: "\n\t",
			},
			{
				at: 40,
				length: 7,
				line: 6,
				pos: 2,
				type: "string",
				value: "count",
			},
			{
				at: 47,
				length: 1,
				line: 6,
				pos: 9,
				type: "pun",
				value: ":",
			},
			{
				at: 48,
				length: 1,
				line: 6,
				lines: 0,
				offset: 1,
				pos: 10,
				type: "space",
				value: " ",
			},
			{
				at: 49,
				length: 4,
				line: 6,
				pos: 11,
				type: "number",
				value: -2.5,
			},
			{
				at: 53,
				length: 1,
				line: 6,
				pos: 15,
				type: "pun",
				value: ",",
			},
			{
				at: 54,
				length: 2,
				line: 6,
				lines: 1,
				offset: 2,
				pos: 16,
				type: "space",
				value: "\n\t",
			},
			{
				at: 56,
				length: 9,
				line: 7,
				pos: 2,
				type: "string",
				value: "missing",
			},
			{
				at: 65,
				length: 1,
				line: 7,
				pos: 11,
				type: "pun",
				value: ":",
			},
			{
				at: 66,
				length: 1,
				line: 7,
				lines: 0,
				offset: 1,
				pos: 12,
				type: "space",
				value: " ",
			},
			{
				at: 67,
				length: 4,
				line: 7,
				pos: 13,
				type: "null",
				value: null,
			},
			{
				at: 71,
				length: 1,
				line: 7,
				pos: 17,
				type: "pun",
				value: ",",
			},
			{
				at: 72,
				length: 2,
				line: 7,
				lines: 1,
				offset: 2,
				pos: 18,
				type: "space",
				value: "\n\t",
			},
			{
				at: 74,
				length: 9,
				line: 8,
				pos: 2,
				type: "string",
				value: "ordered",
			},
			{
				at: 83,
				length: 1,
				line: 8,
				pos: 11,
				type: "pun",
				value: ":",
			},
			{
				at: 84,
				length: 1,
				line: 8,
				lines: 0,
				offset: 1,
				pos: 12,
				type: "space",
				value: " ",
			},
			{
				at: 85,
				length: 5,
				line: 8,
				pos: 13,
				type: "boolean",
				value: false,
			},
			{
				at: 90,
				length: 1,
				line: 8,
				pos: 18,
				type: "pun",
				value: ",",
			},
			{
				at: 91,
				length: 2,
				line: 8,
				lines: 1,
				offset: 2,
				pos: 19,
				type: "space",
				value: "\n\t",
			},
			{
				at: 93,
				length: 9,
				line: 9,
				pos: 2,
				type: "string",
				value: "present",
			},
			{
				at: 102,
				length: 1,
				line: 9,
				pos: 11,
				type: "pun",
				value: ":",
			},
			{
				at: 103,
				length: 1,
				line: 9,
				lines: 0,
				offset: 1,
				pos: 12,
				type: "space",
				value: " ",
			},
			{
				at: 104,
				length: 4,
				line: 9,
				pos: 13,
				type: "boolean",
				value: true,
			},
			{
				at: 108,
				length: 1,
				line: 9,
				lines: 1,
				offset: 1,
				pos: 17,
				type: "space",
				value: "\n",
			},
			{
				at: 109,
				length: 1,
				line: 10,
				pos: 1,
				type: "pun",
				value: "}",
			},
			{
				at: 110,
				length: 1,
				line: 10,
				lines: 1,
				offset: 1,
				pos: 2,
				type: "space",
				value: "\n",
			},
		] satisfies JsonToken[]);
	});
});
