import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.navigation.xml
/** <p>The Navigation characteristic is a variable length structure containing a Flags field, a Bearing field, a Heading field and, based on the contents of the Flags field, may contain a combination of data fields listed below.</p> */
export interface Navigation {
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.plane_angle.degree`</p>
     * <p>Unit is in degrees with a resolution of 1/100</p>
     */
    bearing: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    destinationReached: number;
    /** <p>Smallest units in seconds</p> */
    estimatedTimeOfArrival?: DateTime | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    estimatedTimeOfArrivalPresent: number;
    /**
     * <p>Format: `16bit`</p>
     *
     * Bit field:
     *
     * | index | size | name                                |
     * | ----- | ---- | ----------------------------------- |
     * | 0     | 1    | Remaining Distance Present          |
     * | 1     | 1    | Remaining Vertical Distance Present |
     * | 2     | 1    | Estimated Time of Arrival Present   |
     * | 3     | 2    | Position Status                     |
     * | 5     | 1    | Heading Source                      |
     * | 6     | 1    | Navigation Indicator Type           |
     * | 7     | 1    | Waypoint Reached                    |
     * | 8     | 1    | Destination Reached                 |
     * | 9     | 7    | Reserved for future use             |
     *
     */
    flags: number;
    /**
     * <p>Format: `uint16`</p>
     * <p>Unit: `org.bluetooth.unit.plane_angle.degree`</p>
     * <p>Unit is in degrees with a resolution of 1/100</p>
     */
    heading: number;
    /**
     * | value | description                       |
     * | ----- | --------------------------------- |
     * | 0     | Heading based on movement         |
     * | 1     | Heading based on magnetic compass |
     */
    headingSource: number;
    /**
     * | value | description    |
     * | ----- | -------------- |
     * | 0     | To Waypoint    |
     * | 1     | To Destination |
     */
    navigationIndicatorType: number;
    /**
     * | value | description         |
     * | ----- | ------------------- |
     * | 0     | No Position         |
     * | 1     | Position Ok         |
     * | 2     | Estimated Position  |
     * | 3     | Last Known Position |
     */
    positionStatus: number;
    /**
     * <p>Format: `uint24`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 1/10</p>
     */
    remainingDistance?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    remainingDistancePresent: number;
    /**
     * <p>Format: `sint24`</p>
     * <p>Unit: `org.bluetooth.unit.length.meter`</p>
     * <p>Unit is in meters with a resolution of 1/100</p>
     */
    remainingVerticalDistance?: number | undefined;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    remainingVerticalDistancePresent: number;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    waypointReached: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.navigation.xml | Navigation} */
export class NavigationImpl implements Navigation {
    public static readonly UUID_PREFIX = 0x2a68;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.navigation";
    public static readonly NAME = "Navigation";

    /** Parse from a DataView into {@link Navigation}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): NavigationImpl {
        return new NavigationImpl(navigationFromDataView(dataView, indexStart));
    }

    public readonly bearing: number;
    public readonly destinationReached: number;
    public readonly estimatedTimeOfArrival?: DateTime | undefined;
    public readonly estimatedTimeOfArrivalPresent: number;
    public readonly flags: number;
    public readonly heading: number;
    public readonly headingSource: number;
    public readonly navigationIndicatorType: number;
    public readonly positionStatus: number;
    public readonly remainingDistance?: number | undefined;
    public readonly remainingDistancePresent: number;
    public readonly remainingVerticalDistance?: number | undefined;
    public readonly remainingVerticalDistancePresent: number;
    public readonly waypointReached: number;

    public constructor(navigation: Navigation) {
        this.bearing = navigation.bearing;
        this.destinationReached = navigation.destinationReached;
        this.estimatedTimeOfArrival = navigation.estimatedTimeOfArrival;
        this.estimatedTimeOfArrivalPresent = navigation.estimatedTimeOfArrivalPresent;
        this.flags = navigation.flags;
        this.heading = navigation.heading;
        this.headingSource = navigation.headingSource;
        this.navigationIndicatorType = navigation.navigationIndicatorType;
        this.positionStatus = navigation.positionStatus;
        this.remainingDistance = navigation.remainingDistance;
        this.remainingDistancePresent = navigation.remainingDistancePresent;
        this.remainingVerticalDistance = navigation.remainingVerticalDistance;
        this.remainingVerticalDistancePresent = navigation.remainingVerticalDistancePresent;
        this.waypointReached = navigation.waypointReached;
    }
}

/** Parse from a DataView into {@link Navigation}. */
export function navigationFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): Navigation {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const flags = $dvr.uint16();
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const remainingDistancePresent = flags & 0b0000_0000_0000_0001;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const remainingVerticalDistancePresent = (flags & 0b0000_0000_0000_0010) >> 1;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const estimatedTimeOfArrivalPresent = (flags & 0b0000_0000_0000_0100) >> 2;
    /**
     * | value | description         |
     * | ----- | ------------------- |
     * | 0     | No Position         |
     * | 1     | Position Ok         |
     * | 2     | Estimated Position  |
     * | 3     | Last Known Position |
     */
    const positionStatus = (flags & 0b0000_0000_0001_1000) >> 3;
    /**
     * | value | description                       |
     * | ----- | --------------------------------- |
     * | 0     | Heading based on movement         |
     * | 1     | Heading based on magnetic compass |
     */
    const headingSource = (flags & 0b0000_0000_0010_0000) >> 5;
    /**
     * | value | description    |
     * | ----- | -------------- |
     * | 0     | To Waypoint    |
     * | 1     | To Destination |
     */
    const navigationIndicatorType = (flags & 0b0000_0000_0100_0000) >> 6;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const waypointReached = (flags & 0b0000_0000_1000_0000) >> 7;
    /**
     * | value | description |
     * | ----- | ----------- |
     * | 0     | False       |
     * | 1     | True        |
     */
    const destinationReached = (flags & 0b0000_0001_0000_0000) >> 8;
    const bearing = $dvr.uint16();
    const heading = $dvr.uint16();
    const remainingDistance = $dvr.uint24();
    const remainingVerticalDistance = $dvr.int24();
    const estimatedTimeOfArrival = DateTimeImpl.fromDataView($dvr);
    return { bearing, destinationReached, estimatedTimeOfArrival, estimatedTimeOfArrivalPresent, flags, heading, headingSource, navigationIndicatorType, positionStatus, remainingDistance, remainingDistancePresent, remainingVerticalDistance, remainingVerticalDistancePresent, waypointReached };
}
