import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.uv_index.xml
export interface UvIndex {
    /**
     * <p>Format: `uint8`</p>
     * <p>Unit: `org.bluetooth.unit.unitless`</p>
     */
    uvIndex: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.uv_index.xml | Uv Index} */
export class UvIndexImpl implements UvIndex {
    public static readonly UUID_PREFIX = 0x2a76;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.uv_index";
    public static readonly NAME = "UV Index";

    /** Parse from a DataView into {@link UvIndex}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): UvIndexImpl {
        return new UvIndexImpl(uvIndexFromDataView(dataView, indexStart));
    }

    public readonly uvIndex: number;

    public constructor(uvIndex: UvIndex) {
        this.uvIndex = uvIndex.uvIndex;
    }
}

/** Parse from a DataView into {@link UvIndex}. */
export function uvIndexFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): UvIndex {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const uvIndex = $dvr.uint8();
    return { uvIndex };
}
