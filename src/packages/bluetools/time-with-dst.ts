import { type DataViewReader, dataViewReader } from "./data-view-reader.js";
import { type DateTime, DateTimeImpl } from "./date-time.js";
import { type DstOffset, DstOffsetImpl } from "./dst-offset.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.time_with_dst.xml
export interface TimeWithDst {
    dateTime: DateTime;
    dstOffset: DstOffset;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.time_with_dst.xml | Time With Dst} */
export class TimeWithDstImpl implements TimeWithDst {
    public static readonly UUID_PREFIX = 0x2a11;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.time_with_dst";
    public static readonly NAME = "Time with DST";

    /** Parse from a DataView into {@link TimeWithDst}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): TimeWithDstImpl {
        return new TimeWithDstImpl(timeWithDstFromDataView(dataView, indexStart));
    }

    public readonly dateTime: DateTime;
    public readonly dstOffset: DstOffset;

    public constructor(timeWithDst: TimeWithDst) {
        this.dateTime = timeWithDst.dateTime;
        this.dstOffset = timeWithDst.dstOffset;
    }
}

/** Parse from a DataView into {@link TimeWithDst}. */
export function timeWithDstFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): TimeWithDst {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const dateTime = DateTimeImpl.fromDataView($dvr);
    const dstOffset = DstOffsetImpl.fromDataView($dvr);
    return { dateTime, dstOffset };
}
