import { type DataViewReader, dataViewReader } from "./data-view-reader.js";

// This file is autogenerated.
// Do not edit it by hand, as changes will be lost.
// Upstream source: https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.local_east_coordinate.xml
/** <p>The Local East characteristic describes the East coordinate of the device using local coordinate system.</p> */
export interface LocalEastCoordinate {
    /** <p>Format: `sint16`</p> */
    localEastCoordinate: number;
}

/** @see {@link https://raw.githubusercontent.com/oesmith/gatt-xml/refs/heads/master/org.bluetooth.characteristic.local_east_coordinate.xml | Local East Coordinate} */
export class LocalEastCoordinateImpl implements LocalEastCoordinate {
    public static readonly UUID_PREFIX = 0x2ab1;
    public static readonly TYPE_NAME = "org.bluetooth.characteristic.local_east_coordinate";
    public static readonly NAME = "Local East Coordinate";

    /** Parse from a DataView into {@link LocalEastCoordinate}. */
    public static fromDataView(dataView: DataView | DataViewReader, indexStart?: number | undefined): LocalEastCoordinateImpl {
        return new LocalEastCoordinateImpl(localEastCoordinateFromDataView(dataView, indexStart));
    }

    public readonly localEastCoordinate: number;

    public constructor(localEastCoordinate: LocalEastCoordinate) {
        this.localEastCoordinate = localEastCoordinate.localEastCoordinate;
    }
}

/** Parse from a DataView into {@link LocalEastCoordinate}. */
export function localEastCoordinateFromDataView(dataView: DataView | DataViewReader, indexStart: number = 0): LocalEastCoordinate {
    const $dvr: DataViewReader = dataViewReader(dataView, indexStart);
    const localEastCoordinate = $dvr.int16();
    return { localEastCoordinate };
}
